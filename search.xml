<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博一下学期小结</title>
      <link href="/articles/summary-d1-2/"/>
      <url>/articles/summary-d1-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这一学期延续上一学期的基调，主打学习，也开始推进一些实验项目。</p><hr><h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p>本学期我选修了四门课程，至此已达到完成培养方案的课程学分要求。</p><h2 id="算法与算法复杂性理论"><a href="#算法与算法复杂性理论" class="headerlink" title="算法与算法复杂性理论"></a>算法与算法复杂性理论</h2><p>这是武永卫老师开的课，所以相当于必修课。</p><p>这门课的主要内容是以数学的方式分析计算机算法，更侧重于培养理解和分析算法的体系化思路，注重思想而非技巧。虽然我个人认为在现在这个成长阶段再学一遍算法没有太多必要性，但这门课也确实给我带来了一些思维上的锻炼和提升。</p><h2 id="分布式系统导论"><a href="#分布式系统导论" class="headerlink" title="分布式系统导论"></a>分布式系统导论</h2><p>这是章明星老师开的课，所以也相当于必修课。</p><p>在课程安排上，这门课大体参考了 MIT 的 6.5840，对分布式系统做了个较为全面的介绍。</p><p>通过这门课的学习，我对分布式系统有了初步的成体系的认识。从 CAP 理论开始，我逐渐加深了对于分布式系统研究的认识，也借助一系列经典案例取得了更具体的了解。作为一门导论课，我从中受益匪浅。</p><h2 id="自然辩证法概论"><a href="#自然辩证法概论" class="headerlink" title="自然辩证法概论"></a>自然辩证法概论</h2><p>这门课比“中马”的事少多了，只要参加随堂答题、网络学堂问答，并写完论文就行了。</p><p>略微多评价一句，就是我认为这门课有浓浓的民科味。有些章节对自然科学案例的解读只看到了表面，所推导出的结论也就可能片面或有偏颇。我的课程论文就抓住老师讲的“科学美”的部分进行了辩证的分析（老师认为真理总是美的，但我以为不然），虽然不知道助教会怎么判，但在这个话题上我有充分的论据，写起来非常轻松。</p><h2 id="不确定规划"><a href="#不确定规划" class="headerlink" title="不确定规划"></a>不确定规划</h2><p>如果把某个公理系统中的某条公理改一改，会发生什么？</p><p>这门课给我留下的最深刻的印象是：改变一条公理，就能创建一个学科；照抄经典学科，就能水出大量论文。</p><p>具体到授课的内容层面，这门课从“面积的定义方式”出发，指出除了 $a\times b$ 之外，还有一种合法的定义方式，即 $a\wedge b$。以此定义，可以衍生出不确定理论，发展出一个全新的学科<del>，并且提供大量研究空白</del>。</p><p>从思想上，这门课让我认识到，概率论在现实生活中根本不适用。我们日常生活中说的“概率”，很多时候指的其实是“信度”。这也就是为什么要发展出不确定理论。</p><hr><h1 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h1><p>绝赞探索中。</p><hr><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>今年 Saiblo 和 THUAI 继续进行了合作，并且尝试了新的合作模式：私有部署评测机。</p><p>我时常思考 Saiblo 平台的本质到底是什么，应该围绕着什么发展，而这次合作给了我一定的启示：Saiblo 平台的活力并不源于其评测技术有多高明（全世界有成千上万个评测机，写一个评测机其实没有多困难），而是它的运营模式。基于此，我给 Saiblo 平台抽象出了两条不同于传统 OJ 的根本特征：</p><ul><li>用户代码之间可以任意组合进行评测，具有多进程评测的特点；</li><li>一份用户代码可能在任意时刻被用于评测。</li></ul><p>我认为，任何智能体比赛平台都符合上面两个特征，这也是我们能够向 THUAI 提供服务的根本所在。平台的发展可能有众多方向，但终究是围绕着这两个基本特征展开的。之前我们曾经想让 Saiblo 平台向传统 OJ 转型，现在我感觉其实有点本末倒置了。</p><hr><h1 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h1><p>保持身心健康最重要！</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪后武夷山游记</title>
      <link href="/articles/wuyishan/"/>
      <url>/articles/wuyishan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>2024 年 1 月 22 日，武夷山迎来了一场大雪。我有幸于降雪当晚抵达武夷山，领略雪后的山川美景。</p><p>武夷山景区位于武夷山市南部。景区紧邻城镇，交通、住宿便捷。新冠疫情过后，为复苏旅游业，武夷山景区和公交车均免费开放，足显其友好。</p><p>九曲溪将景区分为南北两部分。沿着九曲溪乘坐竹筏漂流而下，可总览景区山水，体验人在画中游的轻松休闲。然而，由于前日降雪，原计划上午乘坐的竹筏被取消。因此，我调整游览路线，先步行探索南半景区。带着饮用水和充电宝，我就出发了。</p><h2 id="绿野仙踪：玉女峰、茶舍、虎啸岩与一线天"><a href="#绿野仙踪：玉女峰、茶舍、虎啸岩与一线天" class="headerlink" title="绿野仙踪：玉女峰、茶舍、虎啸岩与一线天"></a>绿野仙踪：玉女峰、茶舍、虎啸岩与一线天</h2><p>我首先乘坐 9 路公交车抵达玉女峰附近。玉女峰是南半景区步道的起点。这条步道行人较少，雪后的空气格外清新，郁郁葱葱的树林被积雪点缀，给人带来别致的体验。</p><p>步行一段可看见一家茶舍，坐落于茶树林之中。远处可见群山连绵，颇有雅致。</p><p>沿着步道继续深入，可抵达虎啸岩和一线天。由于时间有限，我没有探访这两处景点，便离开了步道。</p><h2 id="九曲竹筏"><a href="#九曲竹筏" class="headerlink" title="九曲竹筏"></a>九曲竹筏</h2><p>到达一线天的时候已是中午，此时竹筏也重新开放售票。我从景点检票口走出步道后，继续走向 9 路车站台，乘车前往竹筏码头。9 路车的发车间隔很玄学：高德地图上说 20 分钟一班，但实际体验告诉我，班车间隔并不均匀。</p><p>竹筏码头位于景区西部，附近有许多民宿和餐厅，但是否黑心就不好说了。我简单用餐后，就准备踏上竹筏之旅。</p><p>有道是“不坐竹筏，武夷白来”，名不虚传，这次竹筏旅程有趣而闲适。特别要注意的是，由于水面上的温度较低，乘坐竹筏务必要做好保暖措施。据说冬天坐竹筏并不够刺激，要在夏天雨季才能体验到“速度与激情”。</p><p>竹筏漂流终点是武夷宫，位于景区东部，在九曲溪北岸。这样的路线规划，可让我自然而然地从南半景区过渡到北半边，从而减少回头路。</p><h2 id="北岸险峰：天游峰与大王峰"><a href="#北岸险峰：天游峰与大王峰" class="headerlink" title="北岸险峰：天游峰与大王峰"></a>北岸险峰：天游峰与大王峰</h2><p>其实武夷山整体都不高，大王峰也就 500 多米，称不上险峰。不过和南岸的比起来，这两座山峰海拔更高，名气也更高。</p><p>另外，需要注意的是，北部景区之间没有公交车相通。如果不想走路，必须购买 70 元的景区单日车票。</p><p>我没买景区车票，所以选择了邻近武夷宫的大王峰攀登。</p><p>相比于天游峰，大王峰游客更少，山路更陡，攀登起来更有趣，但也更费体力。半山腰有一条岔路，左侧有一处类似“一线天”的景观，右侧则有一处观景台。然而，由于大王峰的观景台朝东，从大王峰上看到的景色主要是武夷山市区，壮美程度想必不及天游峰的自然风光。</p><p>下山时已经日落，我从武夷宫乘坐 9 路公交离开景区。武夷山景区的道路几乎没有照明，因此晚间走路需要当心。</p><h2 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h2><p>武夷山市具有火车站与机场。机场离景区很近，但航班较少，且为军民两用机场。在我返航当天，只有前往北京、厦门、成都的三个国内班次。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博一上学期小结</title>
      <link href="/articles/summary-d1-1/"/>
      <url>/articles/summary-d1-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>对于我这样一个本科阶段到处瞎搞、毫无科研经验的学术小白而言，博士生的第一学期主打一个学习，包括学习课程以及学习如何开展科研工作。</p><p>第一学期总是包罗万象的。入学教育的环节我已在之前的文章里写了，因此这里我继续分类记录本学期的其余内容。</p><hr><h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p>研究生课程可选的余地并不多，再加上通常会限定在自己的研究领域内，因此选来选去就那几门课。</p><p>我由于免修了博士生英语，课程相对少一点点，所以打算博一一年修完所有课程。</p><h2 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h2><p>这个好像是系统方向的必修课，分专题讲了并行计算的基本理论和经典算法，考核方式是出勤 + 少量小作业 + 大作业。</p><p>由于我不是做并行计算应用的，讲课的内容对我来说没什么吸引力。小作业很简单。截至本文完成时，我还没开始写大作业——主要是因为没想好选题。还是那句话，我不是做并行计算应用的，所以要从我的研究领域内挖出能写大作业的选题真是太困难了。</p><h2 id="大数据系统导论"><a href="#大数据系统导论" class="headerlink" title="大数据系统导论"></a>大数据系统导论</h2><p>选这门课的原因是，虽然这门课事多，但要求低。每周都有小作业（以编程作业为主），外加一场期末考试。编程作业大多比较好写，但有几周的作业写起来贼痛苦。不过好歹能混到基本分。期末考试是开卷考试，但属实没啥好开卷的，都是一些简单的问答题，也很少考概念。至于流处理系统的部分，我确实没咋学会，不过应该影响不大。</p><p>以及考试的时候，我才发现我对计算机层级存储结构的大小缺乏常识性认识，最主要是不知道各级缓存都有多大，希望没影响答题。</p><p><img src="/images/lstopo.png" alt="lstopo"></p><p>关于小作业还有两点微小的建议（虽然助教多半看不到我这篇文章）：</p><ul><li>不是每个同学都能很方便地在任何设备上查看 <code>.md</code> 文件，因此希望说明文档还是以 <code>.pdf</code> 格式下发比较好；</li><li>如果每周作业都能给出初始模板，那就更好了。</li></ul><h2 id="中国马克思主义与当代"><a href="#中国马克思主义与当代" class="headerlink" title="中国马克思主义与当代"></a>中国马克思主义与当代</h2><p>必修课，每个班的任务都一样，我觉得我也没有什么与众不同的值得分享的经验。</p><h2 id="最优化方法"><a href="#最优化方法" class="headerlink" title="最优化方法"></a>最优化方法</h2><p>前半学期讲线性规划和非线性规划的基本理论，基本上还是虚张声势的线性代数。我觉得学数学课能让我获得新知和思维的锻炼，加之我认为这门课对我有价值，所以学得也挺认真。</p><p>后半学期讲各种非线性规划算法，我觉得学了没意思，就没怎么听。</p><p>另外，个人觉得《最优化方法》和《组合数学》一起修比较舒服，因为《组合数学》最后一章会讲单纯形法，而《最优化方法》课里面学会了以后，《组合数学》课上就不用学了。<strong>唯一的区别是，《组合数学》检验数定义的正负号居然是反的。</strong></p><h2 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h2><p>虽说数学课都是选修课，但感觉这门课事实上成为了计算机系的必修课。</p><p>说实话，我个人不太喜欢这样的为计算机系特供的数学课。我认为组合数学有其独立存在的意义。这门课上下来我心里总有种错位的感觉，不过我文笔不好，也不知道怎么描述。或许这只是我的个人感受，就让它随着时间逐渐被遗忘吧~</p><details>    <summary>一些心里话</summary>    <p>        OI 爷不要因为高中提前学了点组合数学就沾沾自喜。那还不是因为数学好的都去了北大数院。如果我拿出 IMO 金牌选手，阁下又该如何应对？    </p></details><p></p><h2 id="研究生学术与职业素养"><a href="#研究生学术与职业素养" class="headerlink" title="研究生学术与职业素养"></a>研究生学术与职业素养</h2><p>讲座课，但我有若干吐槽：</p><ul><li>教室容量远远不能满足学生的听课需求。看来签完到就溜走才是正解。</li><li>实际授课内容和时间与计划不符。这会让学生难以提前规划时间。<del>（好吧，谁叫你总是想要提前若干周规划时间呢？）</del></li><li>课程看不了回放。不过考虑到有些老师的授课内容不希望上网，这也可以接受。</li></ul><hr><h1 id="助教"><a href="#助教" class="headerlink" title="助教"></a>助教</h1><p>这学期我做了《离散数学》的课程助教，主要工作量是每两周批几道题，<del>而且大一同学不会给助教出难题，活少钱多</del>。就是证明题批改起来比较累，而且会心累——同学们写证明题的功底也太一言难尽了。</p><p>此外，还需负责期末出题、监考和批卷，我负责出罗素公理的题目，还挺有意思的。</p><p>顺便吐槽一下，两个班加起来将近 300 名学生。贵系扩招真是越来越恐怖了。</p><hr><h1 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h1><p>目前还没完全上道，等上道了再单独记录吧。</p><hr><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p>这学期我还在继续推进 THU Info 和 Saiblo 的传承事宜。</p><p>读博之后，留给课外项目的精力就比较有限了。我首先放手的是 Saiblo，因为它已处于稳定期。但现在看来我还得考虑一下接班人的接班人问题，而且目前接了新需求，还是有些新东西可以做做的。</p><p>THU Info 项目则有一定的特殊性，我需要考虑一种合适的交接方式。</p><hr><h1 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h1><p>我有一种预感，读博五年会成为我一生中最快活的五年。经济独立、时间灵活、没有绩效考核、没有生活负担……如果忽略毕业压力，这五年将别提有多爽了。</p><p>当然，毕业压力是不可能忽略的。不过读博嘛，心态最重要。现在不享受美好时光，就只能等退休了（x</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro 新机配置小记</title>
      <link href="/articles/manjaro-configuration/"/>
      <url>/articles/manjaro-configuration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h2><ul><li>从 <a href="https://manjaro.org/">Manjaro 官网</a>下载 Plasma 主题镜像。</li><li>使用 <a href="https://github.com/openSUSE/imagewriter">SUSE Studio Imagewriter</a> 将镜像写入 USB。</li><li>按 F12 进入 Boot Menu，选择 USB 镜像，安装镜像。</li></ul><hr><h2 id="配置准备"><a href="#配置准备" class="headerlink" title="配置准备"></a>配置准备</h2><h3 id="连接蓝牙鼠标"><a href="#连接蓝牙鼠标" class="headerlink" title="连接蓝牙鼠标"></a>连接蓝牙鼠标</h3><ul><li>打开菜单，搜索 bluetooth，进入蓝牙设置。</li><li>通过 Tab 键和空格键进入“添加新设备”菜单，通过 Tab 键、方向键和回车键配对鼠标。</li></ul><h3 id="连接无线网络"><a href="#连接无线网络" class="headerlink" title="连接无线网络"></a>连接无线网络</h3><ul><li>购买 TP-LINK TL-WN725N 无线网络接收器，Linux 内核自带驱动。</li></ul><h3 id="启用-AUR"><a href="#启用-AUR" class="headerlink" title="启用 AUR"></a>启用 AUR</h3><ul><li>打开软件包管理器，进入首选项，在第三方选项卡中，启用 AUR 支持。</li><li>打开软件包管理器，安装 <code>yay</code>。</li></ul><h3 id="安装-base-devel"><a href="#安装-base-devel" class="headerlink" title="安装 base-devel"></a>安装 <code>base-devel</code></h3><ul><li>打开软件包管理器，安装 <code>base-devel</code>。</li></ul><h3 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3><ul><li>打开软件包管理器，安装 <code>fcitx-sogoupinyin</code> 和 <code>kcm-fcitx</code>。</li><li>修改 <code>/etc/profile</code>，写入以下内容：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fcitx</span></span><br><span class="line">XIM_PROGRAM=fcitx</span><br><span class="line">XIM=fcitx</span><br><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=<span class="string">&quot;@im=fcitx&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><h3 id="设置交换内存"><a href="#设置交换内存" class="headerlink" title="设置交换内存"></a>设置交换内存</h3><ul><li>参见 <a href="https://wiki.archlinux.org/title/Swap#Swap_file">Swap - ArchWiki</a> 。</li></ul><hr><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><h3 id="Fish"><a href="#Fish" class="headerlink" title="Fish"></a>Fish</h3><ul><li>打开软件包管理器，安装 <code>fish</code>。</li><li>编辑 <code>~/.config/fish/config.fish</code>，设置 <code>set -U fish_greeting</code>。</li><li>打开 Konsole，新建配置方案“Fish”，将启动命令改为 <code>/usr/bin/fish</code>，适当调整字号，并将该配置方案设为默认配置。</li></ul><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><ul><li>设置语言。</li><li>设置隐私模式。</li><li>设置默认搜索引擎。</li><li>设置新标签菜单。</li><li>设置关闭多标签页时确认。</li><li>安装 Learn Helper、Zotero 等插件。</li></ul><h3 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h3><ul><li>打开软件包管理器，安装 <code>clash</code>。</li><li>创建配置目录 <code>/etc/clash</code>，并从旧电脑上拷贝必要的配置文件。</li><li>创建配置文件 <code>/etc/systemd/system/clash.service</code>，写入以下内容：</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Clash daemon, A rule-based proxy in Go.</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/clash -d /etc/clash</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>重新加载 <code>systemd</code> 模块：<code>systemctl daemon-reload</code>。</li><li>启动 <code>clash</code> 服务：<code>systemctl start clash</code>。</li><li>设置开机自启：<code>systemctl enable clash</code>。</li></ul><h3 id="JetBrains"><a href="#JetBrains" class="headerlink" title="JetBrains"></a>JetBrains</h3><ul><li>打开软件包管理器，安装 <code>jetbrains-toolbox</code>。</li><li>登录 JetBrains Toolbox。</li><li>设置打开 Toolbox App 的全局快捷键 <code>Ctrl + Alt + J</code>。</li></ul><h3 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h3><ul><li>打开软件包管理器，安装 <code>linuxqq</code>。</li></ul><h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><ul><li>打开软件包管理器，安装 <code>deepin-wine-wechat</code>。</li></ul><h3 id="飞书"><a href="#飞书" class="headerlink" title="飞书"></a>飞书</h3><ul><li>打开软件包管理器，安装 <code>feishu-bin</code>。</li></ul><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><ul><li>打开软件包管理器，安装 <code>netease-cloud-music</code>。</li></ul><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><ul><li>打开软件包管理器，安装 <code>typora-free</code>。</li></ul><h3 id="Thunderbird"><a href="#Thunderbird" class="headerlink" title="Thunderbird"></a>Thunderbird</h3><ul><li>打开软件包管理器，安装 <code>thunderbird</code>。</li></ul><h3 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h3><ul><li>打开软件包管理器，安装 <code>telegram-desktop</code>。</li></ul><h3 id="Zotero"><a href="#Zotero" class="headerlink" title="Zotero"></a>Zotero</h3><ul><li>打开软件包管理器，安装 <code>zotero-bin</code>。</li></ul><h3 id="腾讯会议"><a href="#腾讯会议" class="headerlink" title="腾讯会议"></a>腾讯会议</h3><ul><li>打开软件包管理器，安装 <code>wemeet-bin</code>。</li></ul><h3 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h3><ul><li>打开软件包管理器，安装 <code>wps-office</code>、<code>wps-office-fonts</code>、<code>wps-office-mime</code>、<code>wps-office-mui-zh-cn</code>。</li></ul><h3 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h3><ul><li>打开软件包管理器，安装 <code>onedrive-git</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生入学小记</title>
      <link href="/articles/post-graduate-entrance/"/>
      <url>/articles/post-graduate-entrance/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文以笔者 2023 年博士研究生入学相关的实际经历为例，旨在为新生提供一个入学流程的宏观认识，方便新生了解各项活动的轻重缓急，安排与规划具体事务。</p><p>本文以日记的形式给出。</p><span id="more"></span><hr><h2 id="9-月-1-日"><a href="#9-月-1-日" class="headerlink" title="9 月 1 日"></a>9 月 1 日</h2><p>报到。没啥好说的。</p><p>直读生请注意，本科账号下午就会注销，因此请务必<a href="/articles/graduate/#%E7%9B%B4%E8%AF%BB%E7%94%9F%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB">提前做好数据迁移工作</a>。</p><h2 id="9-月-2-日"><a href="#9-月-2-日" class="headerlink" title="9 月 2 日"></a>9 月 2 日</h2><p>从 9 月 2 日起，学校和院系就会安排一系列入学教育活动，并且有出勤率要求。这个自己把握好。</p><p>上午学校开学典礼，无外乎教师代表讲话、新生代表讲话、校长讲话。起得比较早，困死。</p><p>下午计算机系开学典礼，倒是 40 分钟结束。</p><h2 id="9-月-3-日"><a href="#9-月-3-日" class="headerlink" title="9 月 3 日"></a>9 月 3 日</h2><p>休息一天。</p><h2 id="9-月-4-日"><a href="#9-月-4-日" class="headerlink" title="9 月 4 日"></a>9 月 4 日</h2><p>上午<del>鸡汤</del>讲座。起得还是比较早，困死。</p><p>下午培养方案解读。还是可以听一听，有点营养。</p><p>晚上为组会临时抱佛脚，但没有进展。</p><h2 id="9-月-5-日"><a href="#9-月-5-日" class="headerlink" title="9 月 5 日"></a>9 月 5 日</h2><p>今天有组会，所以我请了入学教育的假，终于不用起大早了。</p><p>改硬件配置把服务器改得无法启动了，抢修了一下。</p><p>这是第一次组会，新学期新气象，并引入了出勤要求：工作日 14:00 到 18:00 要求在实验室。</p><p>好在我赶在章总检查工作之前搞出了一丁点进展。</p><p><del>大家都是有科研任务的同学，又不是大一新生，求求了请别把入学教育安排得满满当当的。</del></p><h2 id="9-月-6-日"><a href="#9-月-6-日" class="headerlink" title="9 月 6 日"></a>9 月 6 日</h2><p>起大早抽血。大困特困。抽完血睡了个回笼觉，今早的入学教育直接翘了。真搞不懂为啥要求七点钟就抽血。</p><p>下午继续体检。假如今天的情况具有普遍性（三点多种拍胸片要排队一个小时），那么建议以后的同学，<strong>第一个体检项目就趁人少去拍胸片</strong>。</p><p>体检完去机房捣鼓了一下服务器，把系统盘拆下来了，寄。</p><p>好消息是，学长说我可以在实验室采购自己的机器和实验设备，省得隔三差五跑到机房<del>，还把别人正在用的机器搞崩</del>。</p><p>今天还整了下选课。按照章总的说法：</p><blockquote><p>除了我的分布式系统，其它你看着选些水课就行。不用浪费时间在课后作业上。</p></blockquote><p>本着选本方向水课和数学水课的原则，其实也没有太多选择的余地。这一点倒是对选恐人士比较友好。</p><p><del>分布式系统其实是最硬的课程之一。</del></p><h2 id="9-月-7-日"><a href="#9-月-7-日" class="headerlink" title="9 月 7 日"></a>9 月 7 日</h2><p>早上组里给新生统一安排的行前培训。真好，可以请入学教育的假了。</p><h2 id="9-月-8-日"><a href="#9-月-8-日" class="headerlink" title="9 月 8 日"></a>9 月 8 日</h2><p>今天没有值得记录的事。</p><h2 id="9-月-9-日"><a href="#9-月-9-日" class="headerlink" title="9 月 9 日"></a>9 月 9 日</h2><p>今天没有值得记录的事。</p><h2 id="9-月-10-日"><a href="#9-月-10-日" class="headerlink" title="9 月 10 日"></a>9 月 10 日</h2><p>今天下午是消防演练，有两个环节：逃生疏散和灭火器使用。</p><p>如果你真的不想参加演练，也可以只在签到的时候扫码打卡。</p><h2 id="9-月-11-日"><a href="#9-月-11-日" class="headerlink" title="9 月 11 日"></a>9 月 11 日</h2><p>今天上午有两场新生教育报告，分别是美育和校史专题。</p><p>今天下午是计算机系学生成果开放周的第一场展示，是软件所专场。长报告当中，几乎每一个<del>十个甚至九个</del>报告都和机器学习相关。</p><p>茶歇的时候，我撤了，转场前往助教实操考核。</p><p>助教实操考核的题目包括但不限于：</p><ul><li>麦克风没声怎么查（我最后才意识到需要检查麦克风电池）；</li><li>如何连校园网；</li><li>电脑没声怎么查；</li><li>雨课堂怎么用；</li><li>如何正确设置投屏；</li><li>雨课堂如何开启互动授课模式。</li></ul><h2 id="9-月-12-日"><a href="#9-月-12-日" class="headerlink" title="9 月 12 日"></a>9 月 12 日</h2><p>今天上午出了选课抽签结果。我在选课截止前将《中国马克思主义与当代》的老师换了换，相对保守一些，所以最后一门都没掉。</p><p>今天下午是离散数学助教会。除了完成批作业的分工外，最重要的事情是，启动教材修订工作。</p><p>非常谔谔的是，这项工作需要先将旧教材通过 OCR 扫描成文本，然后再以 LaTeX 的格式进行新教材的修订和编写。<del>为什么不能直接拿到旧教材的电子稿呢（</del></p><p>计算机系扩招越来越厉害了，一共有 300 多新生需要选修计算机专业课（普通计算机系、计金、信计）。</p><p>晚上是班会，就是填写并上交若干表格。</p><h2 id="9-月-13-日"><a href="#9-月-13-日" class="headerlink" title="9 月 13 日"></a>9 月 13 日</h2><p>上午听了学生成果开放周的高性能所专场展示，终于有几个方向对口的报告了。不过茶歇交流的时候大家还是都围着 mlsys 相关的海报。</p><p>下午去了系里的第零次助教培训。</p><p>别的没啥好记录的。</p><p>至此，新生入学教育相关环节可以说是结束了吧。接下来就是正式投入研究生工作了。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些神奇的 Linux 指令</title>
      <link href="/articles/linux-cmd-notes/"/>
      <url>/articles/linux-cmd-notes/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="perf-获得准确的调用栈"><a href="#perf-获得准确的调用栈" class="headerlink" title="perf 获得准确的调用栈"></a><code>perf</code> 获得准确的调用栈</h2><p>指令要点：<code>perf record --call-graph lbr</code></p><p>参考资料：<a href="https://gaomf.cn/2019/10/30/perf_stack_traceback">https://gaomf.cn/2019/10/30/perf_stack_traceback</a></p><h2 id="减小内核编译产物的大小"><a href="#减小内核编译产物的大小" class="headerlink" title="减小内核编译产物的大小"></a>减小内核编译产物的大小</h2><p>指令要点：<code>make INSTALL_MOD_STRIP=1 modules_install &amp;&amp; make install</code></p><p>参考资料：<a href="https://unix.stackexchange.com/questions/270390">https://unix.stackexchange.com/questions/270390</a></p><h2 id="使用了-openssl-v3-但需要连接-Tsinghua-Secure"><a href="#使用了-openssl-v3-但需要连接-Tsinghua-Secure" class="headerlink" title="使用了 openssl@v3 但需要连接 Tsinghua-Secure"></a>使用了 <code>openssl@v3</code> 但需要连接 Tsinghua-Secure</h2><p>指令要点：<code>nmcli connection modify id Tsinghua-Secure 802-1x.phase1-auth-flags tls-1-0-enable</code></p><p>参考资料：<a href="https://thu.services/services/#tsinghua-secure">https://thu.services/services/#tsinghua-secure</a></p><h2 id="让-bashrc-生效"><a href="#让-bashrc-生效" class="headerlink" title="让 .bashrc 生效"></a>让 <code>.bashrc</code> 生效</h2><p>指令要点：创建一个默认 <code>~/.profile</code></p><p>参考资料：<a href="https://askubuntu.com/questions/161249">https://askubuntu.com/questions/161249</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业流程小记</title>
      <link href="/articles/graduate/"/>
      <url>/articles/graduate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文以笔者 2023 年毕业相关的实际经历为例，旨在为毕业生提供一个毕业流程的宏观认识，方便毕业生安排与规划具体事务。内容集中于毕业典礼和毕业离校。</p><span id="more"></span><hr><h1 id="毕业典礼"><a href="#毕业典礼" class="headerlink" title="毕业典礼"></a>毕业典礼</h1><h2 id="与校领导合影"><a href="#与校领导合影" class="headerlink" title="与校领导合影"></a>与校领导合影</h2><p>23 日上午，需要以院系为单位，在主楼与校领导和系领导合影。要求穿衬衫与西裤。</p><h2 id="系毕业典礼"><a href="#系毕业典礼" class="headerlink" title="系毕业典礼"></a>系毕业典礼</h2><p>系毕业典礼于 23 日下午在主楼后厅举行，要求穿学位服。亲友可通过直播观看。</p><p>系毕业典礼后，本科生穿学位服与系领导合影。</p><p>随后，是自由拍照留念的时机。</p><h2 id="系毕业联欢晚会"><a href="#系毕业联欢晚会" class="headerlink" title="系毕业联欢晚会"></a>系毕业联欢晚会</h2><p>系毕业联欢晚会于 23 日晚举行。可与亲友一起参加。（我没参加。）</p><h2 id="毕业典礼-1"><a href="#毕业典礼-1" class="headerlink" title="毕业典礼"></a>毕业典礼</h2><p>毕业典礼有三种观礼券（两种现场券和一种转播券），每人每种现场券最多领取一张。</p><p>24 日 7:20 就要求在东主楼集合，随后带队前往东大操场草地就坐。实际上，在 8:00（可能略微提前开始，今年实际开始时间约为 7:55）之前单独到场亦可。毕业典礼开始后就不可以随意走动了。</p><p>毕业典礼大约持续 40 分钟。持有现场券的家长可在操场看台上观看。</p><h2 id="学位授予仪式"><a href="#学位授予仪式" class="headerlink" title="学位授予仪式"></a>学位授予仪式</h2><p>随后是学位授予仪式，在综合体育馆举行。有十几个校领导并行为毕业生拨穗，因此效率挺高，十点多基本上就能搞定。</p><p>如果有自己特别喜欢的校领导，可以观察一下他在哪一路队伍中，排到那一队里。</p><p>持有现场券通券的家长可在综合体育馆看台上观看。</p><p>会有专门的摄影师拍摄毕业生在学位授予仪式上的照片，但是需要 15 天后才能下载。如果有当天发朋友圈需求的同学，可以让自己的舍友或好友排在自己后面 2~3 人的位置，帮忙拍一下。</p><p>随后毕业典礼结束，可以自由活动。</p><hr><h1 id="毕业离校"><a href="#毕业离校" class="headerlink" title="毕业离校"></a>毕业离校</h1><h2 id="重要时间节点"><a href="#重要时间节点" class="headerlink" title="重要时间节点"></a>重要时间节点</h2><p>25、26 日是办理离校手续的日期。28日是允许留校的最后一天（本校直读生除外）。</p><h2 id="退宿"><a href="#退宿" class="headerlink" title="退宿"></a>退宿</h2><p>需要到楼长室办理退宿。注意工作时间。</p><h2 id="注销网络账号"><a href="#注销网络账号" class="headerlink" title="注销网络账号"></a>注销网络账号</h2><p>首先备份重要数据、处理邮箱自动转发。</p><p>随后，登录 usereg 办理网络账号的注销手续。</p><h2 id="直读生准备数据迁移"><a href="#直读生准备数据迁移" class="headerlink" title="直读生准备数据迁移"></a>直读生准备数据迁移</h2><p>通常需要迁移的数据，不外乎 {cloud,git,overleaf}.tsinghua.edu.cn。</p><p>云盘不用多说。</p><p>GitLab 请在账号注销前创建一个 personal access token，这样即使校园网账号被注销了，也可以通过 API 访问本科账号。还可以通过 <a href="https://gitlab.com/Commit451/LabCoat">LabCoat</a> 等客户端访问。</p><p>Overleaf 也不用多说。</p><h2 id="填写毕业调查问卷"><a href="#填写毕业调查问卷" class="headerlink" title="填写毕业调查问卷"></a>填写毕业调查问卷</h2><p>网上填一填就好。需要用 Windows 系统和 IE 浏览器。</p><h2 id="领取两证和成绩单"><a href="#领取两证和成绩单" class="headerlink" title="领取两证和成绩单"></a>领取两证和成绩单</h2><p>完成主要离校手续后，可以到系教学办领取毕业证、学位证、本科成绩单。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>注销网络账号后还能上网吗？</p><p>可以。</p><h2 id="直读生搬家"><a href="#直读生搬家" class="headerlink" title="直读生搬家"></a>直读生搬家</h2><p>如果是直读生，则不用在离校时就归还钥匙和空调遥控器，而是可以等到搬家时再归还。</p><p>今年搬家的时间是 7.19，且必须当天完成。</p><p>无论是直博生还是直硕生，第一年通常均需入住 3 人间。博士生在第二年需要搬家。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大四下学期小结</title>
      <link href="/articles/summary-4-2/"/>
      <url>/articles/summary-4-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>过去的半年里，社会环境发生了不小的变化。伴随着新型冠状病毒感染疫情<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="我不喜欢具有时效性的简称和缩写。这也是我日常生活中很少用“阳了”等表述的原因。">[1]</span></a></sup>的结束，我们终于可以摘下口罩，回归生活的正轨。另一方面，生成式语言模型的发展也给各行各业和人们的生活带来了改变。</p><p>经过四年的大学生活，我总算走到了本科毕业，准备迎接未来<small>（预计）</small>五年的直博生涯。</p><p>站在这个承前启后的时间节点，回顾过去一个学期，我在此记录一些令自己印象深刻的事。</p><hr><h1 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h1><p>互联网上有很多关于 AI 的讨论。我本不想落入俗套地赘述一些平平无奇的内容，但 AI 的影响力实在是太大了。所以，我不妨写一些自己与 AI 发生的比较独特的经历。</p><p>寒假里，我加入某公司某团队，运用自己的系统能力和工程能力，帮他们开发一个 ChatGPT 的代理。正如 AI 行业的整体风格一样，这个团队的一大特点就是“急”：没日没夜地工作，经常半夜十二点前给我一批数据要我跑。事后看来，相比于 GitHub 上其他类似工作，我的成果质量并不算高，但应该也是为他们解决了一些燃眉之急吧。</p><p>在该项目中，我也有一些收获。技术层面，我第一次掌握了代码驱动浏览器的技术，并学到了 xvfb 之类虚拟屏幕的用法（参见 <a href="/articles/chromium-in-docker/">在容器中运行完整版 Chromium</a>）。理念层面，我第一次实际接触了微服务、动态伸缩等理念，这也将应用于我未来的项目经历中。</p><p><del>还是得感叹一句，中国人真的很善于降本增效。</del></p><p>学期中，我加入了清华大学学生人工智能基础架构协会。我一开始以为这个协会吸引的主体是人智所的同学，没想到高性能所的同学也占了一半。<del>但我这个搞存储软件的还是显得格格不入（x</del> 我加入协会的原始目的其实是为了满足某些情感诉求，即人们仿佛只关心 AI 的各种花里胡哨的应用，却忽视支撑着 AI 的底层系统。所以，我还是很想通过加入协会了解存储系统在 AI 领域里的一席之地。</p><p>最后，关于我的研究领域与 AI 关系的问题，我目前的核心理念是，让系统成为 AI 的基础而非本末倒置。<del>希望五年以后我仍然这么想。</del></p><p><img src="/images/zero-ai.jpg" alt="zero-ai"></p><blockquote><p>当然，不用 IDE 是不可能的（x</p><p><del>这张图怎么放到博客里这么大。。。</del></p></blockquote><hr><h1 id="音乐艺术"><a href="#音乐艺术" class="headerlink" title="音乐艺术"></a>音乐艺术</h1><p>这学期，我选修了《交响音乐赏析》，受益匪浅。这门课给我最宏观的收获是，要用历史的眼光看音乐流派，任何音乐流派的发展都离不开其历史、政治和社会的背景。此外，这门课也在一定程度上提升了我对音乐艺术的鉴赏能力。</p><p>平日里，我更喜欢听<a href="https://music.163.com/#/playlist?id=2308016962">纯音乐</a>，而对流行音乐不感兴趣。我更容易受旋律和配器本身推动个人情绪。话虽如此，但我对音乐的偏好仍未脱离大众的俗套。我经常被音乐创作者的雕虫小技吸引，喜欢一些技巧性的旋律<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[【Animenz】声嘶力竭 - 家有女友 OP 钢琴改编](https://music.163.com/song?id=1931568150)">[2]</span></a></sup>、新奇的乐器<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Climbing the Ginso Tree](https://music.163.com/song?id=31010767)">[3]</span></a></sup>和层次丰富的声部<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[【Animenz】声嘶力竭 - 家有女友 OP 钢琴改编](https://music.163.com/song?id=1931568150)">[2]</span></a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Autumn Romance](https://music.163.com/song?id=1410404879)">[4]</span></a></sup><sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[【Animenz】游戏人生 零 - THERE IS A REASON 钢琴](https://www.bilibili.com/video/BV125411T7G4/)">[5]</span></a></sup>，尽管我知道有些就是作者设计出来满足听众喜好的。此外，套用《交响音乐赏析》老师的说法，这类技巧和设计也是前人早已用过的，从音乐艺术的角度并无创新性。再比如，我欣赏的所谓层次丰富的旋律，和复调的艺术比起来差远了。不过呢，日常听歌还是自己高兴就好。</p><blockquote><p>在将来，我也许会入门一门乐器。但感觉不知道有没有时间（</p></blockquote><hr><h1 id="系统思维"><a href="#系统思维" class="headerlink" title="系统思维"></a>系统思维</h1><p>我接下来五年要从事系统方向的科研工作。这学期我对“系统思维”有了粗浅的认识。</p><p>系统思维不单局限于某一种系统，而是关心系统的研究方法。以我本科毕设选题为例。最开始的选题是，针对图数据库邻边扫描的场景，设计一种缓存机制来提升查询效率。后来 <del>为了多凑点页数</del>，章老师指导我将选题的重心调整为我们设计的缓存机制，将图数据库作为该缓存机制的一个上层应用，并新增分布式文件系统作为该缓存机制的另一个上层应用。这样，文章提出的缓存机制就能被视为一种通用的机制，而非为了某一种应用专门设计的产物。这就是系统思维的体现。</p><p>再比如，我大三在另一个课题组参与的一项实习工作，利用一种新型分布式训练方法优化大模型训练性能。这项工作的不足之处在于，它好像是为不同的算子和不同的模型分别设计的算法的集合，却没有从系统的层面加以统一，因此不符合系统研究的气质。</p><p>当然，我现在对所谓“系统思维”的理解相当肤浅。今后的研究工作还是需要更广阔的视野，需要多思考、多理解。</p><blockquote><p>说到底，我现在理解的所谓“系统思维”依然没有脱离“树状思维”的范畴。Xyi 总是劝我不要局限于“树状思维”，但计算机学科就是高度层次化的，那可如何是好呢？</p></blockquote><hr><h1 id="汉语方言"><a href="#汉语方言" class="headerlink" title="汉语方言"></a>汉语方言</h1><p>上学期，我选修了《昆曲艺术欣赏》，沉浸式体验了吴语<small>（太湖片）</small>。</p><p>这学期，由于一些别的契机<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="清明回老家感觉父母讲方言（江淮官话淮扬片）的场景显著增多了。">[6]</span></a></sup>，我对方言产生了一定的兴趣。考虑到我将来可能在吴语区定居等原因，我打算学习一些吴语的基本知识，争取首先做到能听懂。</p><p>我选用的学习资料是 <a href="https://www.bilibili.com/video/BV16x411B71T/">【苏白学堂&#x2F;教程】吴语苏州话语音基础入门（学堂版拼音）</a>，辅以 <a href="https://www.wugniu.com/">吴语学堂</a> 作为电子字典，准备先学习一些基础的发音。虽然由于后半学期空闲时间较少，我只学了几个简单的韵母，但也对吴语取得了初步的认识。</p><p>吴语的语音相对复杂，有 27 个声母、49 个韵母、8 个声调<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="部分地区部分声调发生了合并，可能不足 8 个声调。">[7]</span></a></sup>。这源于吴语的一些相对独特的语言特点：区分清音浊音、区分尖音团音、声调分阴阳、保留入声。</p><p>此外，同一个声调在不同地区、不同县市的发音都有区别。<del>（老上海貌似根据发音腔调就能判断你是哪个地区的人。）</del>吴语又有复杂的连读变调机制（且无固定规律），不同地区的连读变调方式又有很大的差别，这更增添了吴语的复杂性。</p><p>考虑到我连吴语的基本发音都没有学明白，在这里就不多加介绍了。</p><blockquote><p>江苏不愧是“苏联”，一个省内就能齐聚吴语、江淮官话、中原官话三种截然不同的方言。</p></blockquote><hr><h1 id="我的本科"><a href="#我的本科" class="headerlink" title="我的本科"></a>我的本科</h1><p>本年度，我忝获谭浩强教育基金优秀学生奖。我写的自我陈述大抵概括了我本科的经历，遂摘录于此：</p><details>    <summary>自我陈述</summary>    <ul>        <li>积极推广计算机教育，参与答疑坊、基础技能培训等多项计算机教育普及工作，参与编写《技能引导文档》，曾担任《软件工程》课程助教、《面向对象的程序设计基础》课程小教员。</li>        <li>积极组织计算机赛事，主办智能体大赛，并负责维护智能体比赛平台 Saiblo，为平台的功能改进、性能优化、运维传承与管理规范化做出了突出贡献。</li>        <li>积极参与计算机比赛，在全国大学生计算机系统能力大赛中，所在队伍获得操作系统设计赛功能设计赛道一等奖。</li>        <li>积极参与开源社区工作，为 TypeScript、React Native 等社区提出了一系列议题和拉取请求；负责维护 convert-excel-to-json、posix 等 npm 包的类型标注；推进 Saiblo 平台工具链开源，优化智能体大赛参赛体验。</li>        <li>积极推进校园信息化建设，以学生身份开发的信息门户移动端应用深受同学好评，为同学们的信息化生活带来了便利。</li>    </ul></details><p></p><p>这些经历中，我最得意的还是 THU Info 和 Saiblo。THU Info 自不必说，我是创始人。至于 Saiblo 项目，我则是作为第二代开发者，参与维护并写了一些新代码。我希望我在 Saiblo 团队的参与将 Saiblo 平台带上一个新的高度。我将自己的主要贡献概括如下：</p><ol><li>推进 Saiblo 平台架构改良，将评测端与网站解耦，形成一个纯<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="类似于“纯函数”的概念。">[8]</span></a></sup>的模块；</li><li>使用<del>现代</del>十年前的软件工程技术<del>（Docker）</del>简化评测机部署流程；</li><li>优化评测机性能，减少因裁判调度引入的等待时间。</li></ol><blockquote><p>感觉我遗漏了不少贡献，<del>谁叫 <a href="https://www.16personalities.com/ch/isfj-%E4%BA%BA%E6%A0%BC">ISFJ 型人格</a>总是对自己的成就轻描淡写呢（x</del></p></blockquote><p>事后想来，我的这些贡献并没有为 Saiblo 平台带来突破性的改变。一方面，这些贡献大多处于引擎盖的下面，仅仅是提升了日常运维效率。另一方面，第 3 点只不过对等待延迟问题起到了缓解的作用；但我未能打破思维定式，需要采用一种全新的架构才能彻底解决等待延迟问题。</p><p>不过我希望，我的这些贡献至少能为未来的接班人铺平工作的道路。期待我的接班人能为 Saiblo 平台带来全新的面貌。</p><hr><p>按照是否高考生、是否由兴趣驱动学习计算机来分类，我大概属于兴趣驱动的高考生一类，并且我认为我对计算机学科的兴趣源于计算机本身，而非计算机的行业价值或者对其他领域的作用。比如说，我对编写代码这件事本身就充满热情，就好比一些人对写作本身具有兴趣一样。可能在某些维度下，我的本科远远达不到全面发展。但在自己热爱的领域内做出一些微小的事业，难道不是一间令人满足的事情么？</p><p>回顾我的本科四年，我总体上是满意的。究其原因，套用入学后某次年级大会上某位老师的话，我找到了大学生活的“支点”。对于我来说，这个“支点”就是科协。在此，感谢科协提供的各类资源，也感谢科协为我提供了一个展示自我的舞台。</p><p>特别感谢 Xyi 的陪伴。三年来，我们相知相恋，感受着爱情的甜蜜与温馨。你为我缓解焦虑与压力，为我指点生活的迷津，为我带来幸福与喜悦。感谢你为我的生活添上甜蜜的一笔，让我们继续走下去吧。</p><p>感谢挚友 <a href="https://github.com/Ashitemaru">@Ashitemaru</a> 的陪伴。你是我合作的好伙伴，是我寻求帮助时第一个想到的朋友。祝你在自己热爱的领域里收获喜悦与成就。</p><blockquote><p>为什么这一节变成赛博致谢了啊（x</p></blockquote><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><ul><li>Saiblo 和 THU Info APP 的接班人都得找外系同学了，<del>贵系怎么变成这样了</del></li><li>大二时不屑于好好学网原，大四了才意识到网原的重要性。</li><li>这学期，我每个月的月底两三天都会没啥事干，这是什么奇怪的新规律么？</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">我不喜欢具有时效性的简称和缩写。这也是我日常生活中很少用“阳了”等表述的原因。<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://music.163.com/song?id=1931568150">【Animenz】声嘶力竭 - 家有女友 OP 钢琴改编</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://music.163.com/song?id=31010767">Climbing the Ginso Tree</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://music.163.com/song?id=1410404879">Autumn Romance</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.bilibili.com/video/BV125411T7G4/">【Animenz】游戏人生 零 - THERE IS A REASON 钢琴</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">清明回老家感觉父母讲方言（江淮官话淮扬片）的场景显著增多了。<a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">部分地区部分声调发生了合并，可能不足 8 个声调。<a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">类似于“纯函数”的概念。<a href="#fnref:8" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在容器中运行完整版 Chromium</title>
      <link href="/articles/chromium-in-docker/"/>
      <url>/articles/chromium-in-docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前几天接了一个活，需要使用代码驱动浏览器（具体而言，我使用了 puppeteer），并且需要在云服务器上部署。</p><p>由于要使用代码驱动一个<strong>完整的</strong> Chromium 浏览器，需要一个图形界面，因此只能通过远程桌面登录云服务器进行操作。随着业务规模的扩张，操作的人力成本也随之增加。我亟需将这个系统转化为一个微服务，从而支持快速部署与增缩。</p><p>最后，我参考了 <a href="https://github.com/c0b/chrome-in-docker">chrome-in-docker</a> 的实现，完成了这一目标。我在这里摘录了部分代码，供以后有类似需求时查阅。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y xvfb chromium &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get clean</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># entry.sh</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /tmp/.X10-lock</span><br><span class="line">Xvfb :10 -screen 0 1920x1480x24+32 -ac -r -cc 4 -accessx -xinerama +extension Composite -extension RANDR +extension GLX &amp;</span><br><span class="line"><span class="built_in">sleep</span> 5</span><br><span class="line"><span class="built_in">export</span> DISPLAY=<span class="string">&quot;:10&quot;</span></span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大四上学期小结</title>
      <link href="/articles/summary-4-1/"/>
      <url>/articles/summary-4-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在过去的这一学期中，不管出于主动还是被动，我都不得不面临一些变化。在这篇博客，我也将以此为切入点，回顾一下过去的半年。</p><h2 id="工作的限度"><a href="#工作的限度" class="headerlink" title="工作的限度"></a>工作的限度</h2><p>我第一次认识到精力之有限是在 2022 年 7 月。那时，我需要同时参与暑期实习、操作系统大赛以及前一个课题组的科研实习。同时跟进这三个项目是一个不可能的事。也正是那段时间，我因工作而感到焦虑。</p><p>这一阶段结束后，我评估了一下自己的工作精力。在同一时间内进行一项主业，最多进行一项简单的副业，是比较理想的状态。只有知道了自己的限度在哪里，才能更从容地应对工作内容。</p><p>也这是处于这一考虑，我需要在大四这一年（成为研究生之前）完成 THUInfo 与 Saiblo 的传承交接，否则我将很难有业余精力来推进这两个项目。</p><h2 id="踏出象牙塔"><a href="#踏出象牙塔" class="headerlink" title="踏出象牙塔"></a>踏出象牙塔</h2><p>这学期，我需要推进一个行政手续，参与一些行政流程。虽然这是校园内的事务，但当我参与这项事务时，我就已经从一个学生的身份转变为一个办事员工的身份。</p><p>由于我是第一次参与这类事务，我在处理许多事情时缺少经验。不过这件事让我有了一些收获，一是对行政体制内的工作流程有了初步的理解，二是对熟人社会有了更深的认识。我事先对整个事情涉及哪些部门并没有全面的把握，假如我认识一些熟门熟路的学长，早些了解完整的流程，那我的手续进展会更顺利一些。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>这学期对我来说印象最深刻的就是上面两节所说的了。放在网上的内容可能有点轻描淡写，但我想过段时间回过头来，看到这两节，我还是能想起背后的情景。</p><p>当然，还有一些其它的变化。例如，对疫情看法的转变、对线上（会议、课程等）的“叛逆”式反感、对友情关系的进一步认识，这些都发生在过去的这一学期。当然，我在此处也不展开写了。</p><p>最后，祝 2023 年一切顺利！</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对 Node.js 程序进行性能分析</title>
      <link href="/articles/node-tracing/"/>
      <url>/articles/node-tracing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这个暑假，我用 Node.js 将 Saiblo 评测机重写了一遍。但测试时，我遇到了一些 IO 性能问题。</p><p>出于一些安全性与保密性的原则，我在这里并不介绍具体的问题，而是简单记录一下我分析问题时的心路历程，以便后续回顾。</p><h2 id="寻找-IO-代码"><a href="#寻找-IO-代码" class="headerlink" title="寻找 IO 代码"></a>寻找 IO 代码</h2><p>Node.js 最典型的特征是事件驱动 IO，它的底层 IO 采用 <a href="https://libuv.org/">libuv</a> 实现。</p><p>在本项目中，我需要重点关注文件读写的性能。以写文件（<code>write</code>）为例，经过层层搜索，我找到了 Node.js 里写文件的 <a href="https://github.com/nodejs/node/blob/v19.0.0/src/node_file.cc#L1939-L1993">C++ 实现</a>。其中，调用 libuv 接口的异步代码是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (req_wrap_async != <span class="literal">nullptr</span>) &#123;  <span class="comment">// write(fd, buffer, off, len, pos, req)</span></span><br><span class="line">  <span class="built_in">FS_ASYNC_TRACE_BEGIN0</span>(UV_FS_WRITE, req_wrap_async)</span><br><span class="line">  <span class="built_in">AsyncCall</span>(env, req_wrap_async, args, <span class="string">&quot;write&quot;</span>, UTF8, AfterInteger,</span><br><span class="line">            uv_fs_write, fd, &amp;uvbuf, <span class="number">1</span>, pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再看一下 <code>AsyncCall</code> <a href="https://github.com/nodejs/node/blob/v19.0.0/src/node_file-inl.h#L253-L286">相关定义</a>，就会明白，这里执行的代码相当于：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uv_fs_write</span>(<span class="built_in">env</span>()-&gt;<span class="built_in">event_loop</span>(), <span class="built_in">req</span>(), fd, &amp;uvbuf, <span class="number">1</span>, pos, AfterInteger);</span><br></pre></td></tr></table></figure><p>其中，<code>AfterInteger</code> 是<a href="https://github.com/nodejs/node/blob/v19.0.0/src/node_file.cc#L770-L781">回调函数</a>，用于处理 write 的返回值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AfterInteger</span><span class="params">(<span class="type">uv_fs_t</span>* req)</span> </span>&#123;</span><br><span class="line">  FSReqBase* req_wrap = FSReqBase::<span class="built_in">from_req</span>(req);</span><br><span class="line">  <span class="function">FSReqAfterScope <span class="title">after</span><span class="params">(req_wrap, req)</span></span>;</span><br><span class="line">  <span class="built_in">FS_ASYNC_TRACE_END1</span>(</span><br><span class="line">      req-&gt;fs_type, req_wrap, <span class="string">&quot;result&quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(req-&gt;result))</span><br><span class="line">  <span class="type">int</span> result = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(req-&gt;result);</span><br><span class="line">  <span class="keyword">if</span> (result &gt;= <span class="number">0</span> &amp;&amp; req_wrap-&gt;<span class="built_in">is_plain_open</span>())</span><br><span class="line">    req_wrap-&gt;<span class="built_in">env</span>()-&gt;<span class="built_in">AddUnmanagedFd</span>(result);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (after.<span class="built_in">Proceed</span>())</span><br><span class="line">    req_wrap-&gt;<span class="built_in">Resolve</span>(Integer::<span class="built_in">New</span>(req_wrap-&gt;<span class="built_in">env</span>()-&gt;<span class="built_in">isolate</span>(), result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进行性能分析"><a href="#进行性能分析" class="headerlink" title="进行性能分析"></a>进行性能分析</h2><p>就当我准备自己插装代码，分析 IO 耗时，寻找性能瓶颈时，我注意到了这两个宏：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">FS_ASYNC_TRACE_BEGIN0</span>(UV_FS_WRITE, req_wrap_async);</span><br><span class="line"><span class="built_in">FS_ASYNC_TRACE_END1</span>(req-&gt;fs_type, req_wrap, <span class="string">&quot;result&quot;</span>, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(req-&gt;result));</span><br></pre></td></tr></table></figure><p>难道 Node.js 本身就插装了性能追踪代码？</p><p>经过进一步分析和寻找，我发现果然如此，并找到了<a href="https://github.com/nodejs/node/blob/v19.0.0/doc/api/tracing.md">相关文档</a>。</p><p>真是太棒了，我只要指定事件类别（<code>&quot;node.fs.async&quot;</code>），即可轻松完成性能追踪。</p><blockquote><p>当然，由于 Saiblo 评测机是多进程执行的，我只需要追踪其中一个子进程的 IO 事件。这里简单记录一下代码，以便后续回顾：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> trace <span class="keyword">from</span> <span class="string">&quot;node:trace_events&quot;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">main</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">argv</span>[<span class="number">2</span>] === <span class="string">&quot;worker&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> tracing = trace.<span class="title function_">createTracing</span>(&#123; <span class="attr">categories</span>: [<span class="string">&quot;node.fs.async&quot;</span>] &#125;);</span><br><span class="line">        tracing.<span class="title function_">enable</span>();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h2 id="阅读追踪日志"><a href="#阅读追踪日志" class="headerlink" title="阅读追踪日志"></a>阅读追踪日志</h2><p>但当我拿到日志文件时，我傻眼了，因为它是以人类几乎不可读的 JSON 格式记录的。</p><p><img src="/images/meme_yaml.jpg" alt="阅读困难：JSON"></p><p>当然，Node.js 的文档里写得很清楚，在 Chrome 浏览器中访问 <a href="https://www.chromium.org/developers/how-tos/trace-event-profiling-tool"><code>chrome://tracing</code></a> 即可以可视化的方式加载追踪日志。然而，我没有 Chrome 浏览器，那可怎么办呢？</p><p>经过在网上搜索，我找到了谷歌写的一个网站 <a href="https://ui.perfetto.dev/">Perfetto UI</a>，与 <a href="https://www.chromium.org/developers/how-tos/trace-event-profiling-tool"><code>chrome://tracing</code></a> 有着同样的功能。有了这个网站，我成功完成了 IO 性能的分析。</p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CacheLib 学习笔记</title>
      <link href="/articles/cachelib/"/>
      <url>/articles/cachelib/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="CacheLib-解决的问题"><a href="#CacheLib-解决的问题" class="headerlink" title="CacheLib 解决的问题"></a>CacheLib 解决的问题</h1><table><thead><tr><th>挑战</th><th>方案</th></tr></thead><tbody><tr><td>需要大容量缓存系统</td><td>DRAM 与 flash 混合式存储</td></tr><tr><td>存储对象规模差异大</td><td>根据对象规模采取不同策略</td></tr><tr><td>不加特殊控制，容易 OOM</td><td>动态监控并管理系统资源</td></tr><tr><td>无法高效缓存空结果</td><td>提供 negative caching 支持</td></tr><tr><td>更新结构化对象字段较麻烦</td><td>支持直接更新结构化对象字段</td></tr><tr><td>服务重启影响缓存性能</td><td>支持热重启</td></tr></tbody></table><h1 id="CacheLib-基本概念"><a href="#CacheLib-基本概念" class="headerlink" title="CacheLib 基本概念"></a>CacheLib 基本概念</h1><h2 id="Item-与-Handle"><a href="#Item-与-Handle" class="headerlink" title="Item 与 Handle"></a><code>Item</code> 与 <code>Handle</code></h2><p><code>Item</code> 是表示缓存对象的逻辑单元，占据一定的内存空间。为了防止 <code>Item</code> 被访问时失效（被删除、逐出等），CacheLib 禁止直接访问 <code>Item</code>，而是要求通过 <code>Handle</code> 对 <code>Item</code> 进行访问，且对 <code>Item</code> 进行引用计数。只有一个 <code>Item</code> 被引用的次数为 0 时，它才有可能被删除或逐出。</p><p>每个 <code>Item</code> 存储时，均需附加 32 字节的元信息。</p><p><code>Slab</code> 是缓存分配的物理单元，大小为 4MB。因此，每个 <code>Item</code> 所需空间不得超过 4MB。<code>Item</code> 可以串联起来，用来存储更大的对象。</p><p>代码：<code>allocator/Handle.h</code></p><h2 id="MemoryPool"><a href="#MemoryPool" class="headerlink" title="MemoryPool"></a><code>MemoryPool</code></h2><p>CacheLib 允许将 Cache 划分为不超过 64 个 <code>MemoryPool</code>。每个 <code>MemoryPool</code> 可以根据应用场景，分别存放不同种类的对象。因为缓存对象的替换只会发生在 <code>MemoryPool</code> 内部，<code>MemoryPool</code> 之间则是相互隔离的，所以可以起到提升命中率的作用。</p><p>此外，相比于用一整块 Cache 存储各类对象，让每个 <code>MemoryPool</code> 内部存放大小相近的对象，在提高空间利用率、减少内存碎片方面也有好处。</p><h2 id="HybridCache"><a href="#HybridCache" class="headerlink" title="HybridCache"></a>HybridCache</h2><p>HybridCache 将缓存从 DRAM 存储扩展到 NVM 存储。由于 NVM 存储设备价格一般比 DRAM 低，且通常能提供更大规模的存储，通过 HybridCache，系统可以在扩大缓存空间的同时，控制甚至降低设备成本。</p><p>尽管 HybridCache 将缓存分为两个层级，但只有处于 DRAM 中的 <code>Item</code> 才允许由外界直接访问。按照 CacheLib 的设计，NVM 的存储细节应当对用户透明。<code>MemoryPool</code> 等设计也只在 DRAM 存储层级内适用。</p><p>这一设计思想很像操作系统中 memory swapping 的设计。</p><h2 id="Navy"><a href="#Navy" class="headerlink" title="Navy"></a>Navy</h2><p>Navy 是一个缓存引擎，为 HybridCache 服务，旨在基于 SSD 的物理特性做针对性的优化。SSD 最大的特点在于块式存储，且擦除次数有限，因此 Navy 应避免频繁写入，且需要做好磨损均衡。</p><p>为此，Navy 需要对小 <code>Item</code> 与大 <code>Item</code> 采用不同的存储策略。Navy 内部分为两个引擎：Small Item Engine 与 Large Item Engine，并根据 <code>Item</code> 的大小选择合适的引擎分别处理。</p><p>一个 SSD 页面的大小为 4KB，而区分大小 <code>Item</code> 的界限为 2KB。对于小 <code>Item</code> 的缓存（SOC），一个页面中可以存放多个 <code>Item</code>。CacheLib 会根据 <code>Item</code> key 的哈希选择具体的页面，而在页面内采用 FIFO 的替换策略。此外，对于每个页面，CacheLib 会在 DRAM 内维护一个快速查询器（<code>BloomFilter</code>），用于在缓存缺失时避免不必要的文件读取，提高查询效率。对于大 <code>Item</code> 的缓存（LOC），CacheLib 会在 DRAM 中为每个 <code>Item</code> 维护一个索引。</p><p>此外，为提升 Navy 引擎的并发性，所有的请求都应是异步的。这就要求 Navy 内部实现一个异步调度器。</p><p><img src="https://cachelib.org/assets/images/navy_architecture-04f7e32f458b3c4cc0e9c708226bc448.png" alt="img"></p><h1 id="示例代码学习：Set-up-a-simple-dram-cache"><a href="#示例代码学习：Set-up-a-simple-dram-cache" class="headerlink" title="示例代码学习：Set up a simple dram cache"></a>示例代码学习：<a href="https://cachelib.org/docs/Cache_Library_User_Guides/Set_up_a_simple_cache">Set up a simple dram cache</a></h1><h2 id="类型梳理"><a href="#类型梳理" class="headerlink" title="类型梳理"></a>类型梳理</h2><ul><li><p>一共有四种 <code>CacheTrait</code>，每个 <code>CacheTrait</code> 由 <code>MMType</code>、<code>AccessType</code>、<code>AccessTypeLocks</code> 三个要素构成。</p></li><li><p><code>Cache = CacheAllocator&lt;CacheTrait&gt;</code></p></li><li><p><code>Cache::Config = CacheAllocatorConfig&lt;Cache&gt;</code></p><ul><li>可以从 <code>Cache::Config</code> 构造出 <code>Cache</code></li></ul></li><li><p><code>Cache::Item = CacheItem&lt;CacheTrait&gt;</code></p></li><li><p><code>Cache::Key = Cache::Item::Key</code></p><ul><li><code>Key</code> 实际上是 <code>folly::StringPiece</code> 的派生类，但重载了比较函数，目的是在短 key 的比较上取得优势</li></ul></li><li><p><code>Cache::NvmCache = NvmCache&lt;Cache&gt;</code></p></li><li><p><code>Cache::NvmCacheConfig = NvmCache::Config</code></p><ul><li>可以从 <code>Cache</code> 和 <code>NvmCacheConfig</code> 构造出 <code>NvmCache</code></li></ul></li><li><p><code>NvmCache::Item = Cache::Item</code></p></li><li><p>我认为 CacheLib 如此依赖模板来实现静态多态的目的是，尽可能提升运行时效率。</p></li></ul><h2 id="接口梳理"><a href="#接口梳理" class="headerlink" title="接口梳理"></a>接口梳理</h2><ul><li><p><code>ReadHandle find(Key key)</code>：读 Cache</p></li><li><p><code>WriteHandle allocate(PoolId poolId, Key key, u32 size, u32 ttlSecs = 0)</code>：分配一块缓存；分配得到的 <code>WriteHandle</code> 不会立刻生效，需要配合 <code>insert</code> 或 <code>insertOrReplace</code> 接口才能写入 Cache</p></li><li><p><code>bool insert(const WriteHandle &amp;handle)</code>：将 <code>WriteHandle</code> 写入 Cache；若 key 已存在，则拒绝写入，并返回失败</p></li><li><p><code>WriteHandle insertOrReplace(const WriteHandle &amp;handle)</code>：将 <code>WriteHandle</code> 写入 Cache；若替换了某个已有 <code>Item</code>，则将其以 <code>WriteHandle</code> 的形式返回</p></li><li><p><code>WriteHandle findToWrite(Key key)</code>：查找指定 key 的 <code>Item</code>，并返回可用于更新的 <code>WriteHandle</code></p></li></ul><h1 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h1><blockquote><p>对于每一个接口，都有非常多的情形和边界条件需要考虑。这里仅仅列出各接口的大致执行流程。</p></blockquote><h2 id="find"><a href="#find" class="headerlink" title="find()"></a><code>find()</code></h2><p><code>find()</code> 接口首先会调用 <code>findFastInternal()</code> 接口，在 DRAM 内快速查询目标 <code>key</code>。实施查询时，会采用该缓存实例的 <code>CacheTrait</code> 中定义的 <code>AccessType</code> 进行查询。（CacheLib 内置的四种 <code>CacheTrait</code> 的 <code>AccessType</code> 均为 <code>ChainedHashTable</code>。）</p><p>如果未能在 DRAM 中找到目标 <code>key</code>，且 HybridCache 可用，则调用 <code>NvmCache</code> 的 <code>find</code> 接口进一步查询。需要注意的是，由于 NVM 查询的异步性，这种情况下返回的 <code>Handle</code> 是一个 Future。</p><p><img src="https://cachelib.org/assets/images/Hybrid_Cache_find-ff4b025b03a1b7e43197062810d5c574.png" alt="img"></p><h2 id="allocate"><a href="#allocate" class="headerlink" title="allocate()"></a><code>allocate()</code></h2><p>CacheLib 会根据 <code>Item</code> 的大小，将 <code>Item</code> 划入相应的 <code>AllocationClass</code>。</p><p><code>allocate()</code> 接口首先会尝试在 <code>MemoryPool</code> 内寻找空闲内存。若内存已满，则会尝试调用 <code>findEviction()</code> 接口，逐出某个现有 <code>Item</code>。</p><p>如果成功分配了空闲内存，CacheLib 就会用这块内存封装出一个 <code>WriteHandle</code>，供上层使用。</p><p>若启用 HybridCache，分配操作的流程如下图所示。</p><p><img src="https://cachelib.org/assets/images/Hybrid_Cache_allocate-b198d86843a876795fc2b398ea42a936.png" alt="img"></p><h2 id="insertOrReplace"><a href="#insertOrReplace" class="headerlink" title="insertOrReplace()"></a><code>insertOrReplace()</code></h2><blockquote><p>由于 HybridCache 场景下，<code>insert()</code> 接口不可用，所以这里只分析 <code>insertOrReplace()</code> 接口的实现。</p><p>注意，由于内存不足而发生的逐出发生在 <code>allocate()</code> 接口中。这里的 replace 指的是插入同 key <code>Item</code> 时的替换。</p></blockquote><p>CacheLib 的插入过程有两步要做：</p><ul><li><p>更新内存管理（memory management）信息（例如，如果采用 LRU 策略管理缓存，那就需要更新对应的 <code>LruList</code>，见 <code>allocator/MMLru.h</code> 相关代码）</p></li><li><p>将 <code>Item</code> 写入缓存（实际的插入操作）</p></li></ul><p>在将 <code>Item</code> 写入缓存时，如果有某个同 key <code>Item</code> 被替换出来，那也需要在内存管理信息中将这个被替换出来的 <code>Item</code> 记录去掉。</p><p>如果被替换出来的 <code>Item</code> 在 NVM 中也有一份副本，那么需要将它在 NVM 中的那份副本也删掉。</p><h2 id="findToWrite"><a href="#findToWrite" class="headerlink" title="findToWrite()"></a><code>findToWrite()</code></h2><p><code>findToWrite()</code> 接口的实现与 <code>find()</code> 的基本一样，缺省表现是会额外调用一次 <code>invalidateNvm()</code> 接口，使其在 NVM 中失效。</p><h1 id="Kangaroo"><a href="#Kangaroo" class="headerlink" title="Kangaroo"></a>Kangaroo</h1><h2 id="核心目标"><a href="#核心目标" class="headerlink" title="核心目标"></a>核心目标</h2><p>Kangaroo 的核心目标是，对于在 flash 上缓存海量小 <code>Item</code> 的场景，针对 flash 设备的物理特性，对缓存系统进行优化，从而在 DRAM 使用量和 flash 写次数之间达成平衡。</p><p>Kangaroo 的思路是，将 log-structured 和 set-associative 缓存设计结合使用，取长补短。前者的优势在于降低 flash 的写次数，后者的优势在于降低 DRAM 的使用量。</p><p>Kangaroo 构造了一个三级缓存架构：DRAM Cache（全部在内存中，容量&lt;1%）、KLog（数据在 Flash 中，索引在内存中，容量≈5%）、KSet（数据在 Flash 中，容量≈95%）。查询和插入操作的流程如下图所示。</p><p><img src="/images/kangaroo-1.png" alt="img"></p><p><img src="/images/kangaroo-2.png" alt="img"></p><p>为了降低 flash 的写次数，Kangaroo 还使用了以下技巧：</p><ul><li><p>批量写入——从 KLog 逐出一项数据到 KSet 时，会顺带将 KLog 中所有属于同一组的数据一并搬到 KSet 中</p></li><li><p>选择性接纳——为 KSet 一次接纳的数据量设定下限，若 KLog 一次无法提供足够多的数据，则 KSet 会拒绝这次写入</p></li><li><p>RRIParoo——将 RRIP 策略应用于 KSet 的设计中，从而提升缓存命中率</p></li></ul><p>尚未在 CacheLib 主分支中找到 Kangaroo 相关代码。</p><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><h2 id="基本设计"><a href="#基本设计" class="headerlink" title="基本设计"></a>基本设计</h2><p>内存管理的代码主要位于 <code>allocator/memory</code> 目录下。</p><p>每个 <code>MemoryPool</code> 内部独立管理内存，每个 <code>MemoryPool</code> 可指定一组 <code>AllocationClass</code>。</p><p>进行内存分配时，首先在 <code>MemoryPool</code> 的 <code>AllocationClass</code> 当中找到一个刚好能分配目标空间的一级。这里，CacheLib 保证维护的 <code>AllocationClass</code> 规模列表是有序的，从而可以二分查找。找到合适的 <code>AllocationClass</code> 后，即可进行内存分配。</p><p><code>Slab</code> 是内存管理的基本单元。一个 <code>Slab</code> 内可以有多个 allocations。<code>AllocationClass</code> 的最小规模为 64B，最大规模为 4MB。</p><h2 id="Slab-管理与回收——AllocationClass-视角"><a href="#Slab-管理与回收——AllocationClass-视角" class="headerlink" title="Slab 管理与回收——AllocationClass 视角"></a><code>Slab</code> 管理与回收——<code>AllocationClass</code> 视角</h2><p><code>AllocationClass</code> 内维护了以下成员：</p><ul><li><p><code>freeSlabs_</code>，空 <code>Slab</code> 列表。<code>AllocationClass</code> 本身无法构造 <code>Slab</code>，因此这些空 <code>Slab</code> 是由上层的 <code>MemoryPool</code> 添加的。</p></li><li><p><code>allocatedSlabs_</code>，已分配的 <code>Slab</code> 列表。一个 <code>Slab</code> 被分配后，它的地址就会写入 <code>allocatedSlabs_</code> 中。当出于 rebalance 或 resize 的原因，需要从 <code>AllocationClass</code> 释放空间时，<code>allocatedSlabs_</code> 中的 <code>Slab</code> 可能被删除。</p></li><li><p><code>freedAllocations_</code>，已回收的 allocations 列表。一个 allocation 被回收后，就会记录在 <code>freedAllocations_</code> 中。下次分配 allocation 时，会首先尝试回收利用 <code>freedAllocations_</code> 中的 allocation。</p></li><li><p><code>currSlab_</code>，当前活跃的 <code>Slab</code>。<code>Slab</code> 是切成一份一份 allocations 之后提供给上层的。在分配 allocation 的过程中，一个 <code>Slab</code> 可能还没消耗完。这时，这个 <code>Slab</code> 就处于活跃状态，下次分配 allocation 时也将从该活跃的 <code>Slab</code> 下手。</p></li><li><p><code>currOffset_</code>，当前活跃 <code>Slab</code> 已切分的偏移量。下次分配 allocation 时，就从当前活跃 <code>Slab</code> 的 <code>currOffset_</code> 偏移处开始分配。</p></li><li><p><code>slabReleaseAllocMap_</code>，维护将被释放的 <code>Slab</code> 内仍存留的有效 allocations 的下标，用于辅助 <code>Slab</code> 释放的过程。原则上，只有当一个 <code>Slab</code> 内不存在有效 allocation 时，这个 <code>Slab</code> 才能真正意义上被删除。因此，这是一个“异步”的过程，需要引入一些成员变量来维护。</p></li></ul><p>一个典型的生命周期如下所示：</p><ol><li><p>系统启动时，<code>AllocationClass</code> 内尚无可用空间，<code>MemoryPool</code> 将一个 <code>Slab</code> 添加到该 <code>AllocationClass</code> 的 <code>freeSlabs_</code> 中。</p></li><li><p><code>AllocationClass</code> 从 <code>freeSlabs_</code> 中取出一个 <code>Slab</code>，添加到 <code>allocatedSlabs_</code> 中，并将其标记为 <code>currSlab_</code>。</p></li><li><p><code>AllocationClass</code> 从 <code>currSlab_</code> 中切出一段 allocation，用于给上层系统分配 <code>Item</code>，同时更新 <code>currOffset_</code>。</p></li><li><p>上层系统删除 <code>Item</code> 时，<code>AllocationClass</code> 也将对应的 allocation 回收，放入 <code>freedAllocations_</code> 中，以供未来复用。</p></li><li><p>上层系统对 <code>MemoryPool</code> 进行 rebalance 或 resize 时，<code>AllocationClass</code> 会从 <code>freeSlabs_</code> 和 <code>allocatedSlabs_</code> 中删掉一些 <code>Slab</code>。如果 <code>Slab</code> 中仍存在有效的 allocation，<code>AllocationClass</code> 会告知上层系统。</p></li></ol><h2 id="多级-freeSlabs-设计"><a href="#多级-freeSlabs-设计" class="headerlink" title="多级 freeSlabs_ 设计"></a>多级 <code>freeSlabs_</code> 设计</h2><p><code>SlabAllocator</code>、<code>MemoryPool</code> 和 <code>AllocationClass</code> 均有 <code>freeSlabs_</code> 这一成员，用于维护当前可分配的空闲 <code>Slab</code> 列表。每一级只能支配属于自己的 <code>freeSlabs_</code>，具体而言：</p><ul><li><p><code>AllocationClass</code> 只能支配 <code>AllocationClass</code> 内部的空闲 <code>Slab</code>。如果当前 <code>freeSlabs_</code> 为空，该 <code>AllocationClass</code> 将无法分配新的 <code>Slab</code>。</p></li><li><p><code>MemoryPool</code> 可以从自己的 <code>freeSlabs_</code> 中拿出一些空闲 <code>Slab</code>，加入其下属 <code>AllocationClass</code> 的 <code>freeSlabs_</code> 中，也可以利用自己的 <code>freeSlabs_</code> 列表在 <code>AllocationClass</code> 之间进行<a href="https://cachelib.org/docs/Cache_Library_Architecture_Guide/slab_rebalancing/">重平衡</a>操作。</p></li><li><p><code>SlabAllocator</code> 直接管理系统内的所有 <code>Slab</code>，也可以从自己的 <code>freeSlabs_</code> 中取出一些 <code>Slab</code> 加入某个 <code>MemoryPool</code> 的 <code>freeSlabs_</code> 中。此外，<code>SlabAllocator</code> 还可以通过自己的 <code>freeSlabs_</code> 在 <code>MemoryPool</code> 之间重新分配空间。</p></li></ul><p>我认为这一设计有如下优势：</p><ul><li><p>每一级有自己的空闲 <code>Slab</code> 列表，能够较为灵活地调整内部空间分配。</p></li><li><p>当上级存储要求下级存储释放一些空间时，如果下级存储的 <code>freeSlabs_</code> 中有空闲 <code>Slab</code>，可直接释放。</p></li></ul><h2 id="动态调整流程分析"><a href="#动态调整流程分析" class="headerlink" title="动态调整流程分析"></a>动态调整流程分析</h2><p>CacheLib 会定时对 <code>MemoryPool</code> 中的 <code>AllocationClass</code> 进行重平衡的操作。用户也可能手动调整 <code>MemoryPool</code> 的大小。这些动态调整内存分配的行为均有可能触发 <code>SlabRelease</code> 操作。</p><p><code>SlabRelease</code> 会直接要求某个 <code>AllocationClass</code> 让出一个 <code>Slab</code>，具体的情形如下：</p><ul><li><p>若 <code>freeSlabs_</code> 中就有空闲 <code>Slab</code>，则直接提供。</p></li><li><p>否则，在 <code>allocatedSlabs_</code> 中随机选择一个 <code>Slab</code>，准备将其释放。原则上，只有当一个 <code>Slab</code> 内不存在有效 allocation 时，这个 <code>Slab</code> 才能被释放。因此，需要执行以下流程（代码实现见 <code>AllocationClass::pruneFreeAllocs()</code> 和 <code>CacheAllocator::releaseSlabImpl()</code>）：</p><ul><li>根据该 <code>AllocationClass</code> 的 <code>freedAllocations_</code> 列表，标记出该 <code>Slab</code> 内还存有哪些 <code>activeAllocations</code>；</li><li>对于这些 <code>activeAllocations</code>，首先尝试在 <code>MemoryPool</code> 内部重新分配空间，将这些旧的 allocations 重新写入缓存；</li><li>如果不成功，则将其逐出缓存。</li></ul></li></ul><p>由于 b. 的存在，这一流程对缓存中的内存碎片进行了整理，提升了内存空间的利用率。</p><h2 id="侵入式-SList-与高效的-CompressedPtr"><a href="#侵入式-SList-与高效的-CompressedPtr" class="headerlink" title="侵入式 SList 与高效的 CompressedPtr"></a>侵入式 <code>SList</code> 与高效的 <code>CompressedPtr</code></h2><blockquote><p>这是我第一次知道侵入式链表的概念，颠覆了我对链表的传统观念。</p></blockquote><p><code>AllocationClass</code> 内使用一个侵入式链表来维护已回收的 allocations。采用侵入式链表可以直接在待回收的内存上<strong>原地</strong>存储下一节点的地址，能够节省空间并提高效率，是非常巧妙的设计。</p><p>用于表示 allocation 的地址也不采用原始指针，而是重新定义了一个 <code>CompressedPtr</code>，采用一个 32 位整数表示 <code>Slab</code> 编号和 allocation 编号两部分信息。这里做一个简单的计算：一个 <code>Slab</code> 内最多分配 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.739ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 6956.7 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"></path><path data-c="42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z" transform="translate(917,0)"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2125,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2625,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3625,0)"><g data-mml-node="mi"><path data-c="42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z"></path></g></g><g data-mml-node="mo" transform="translate(4610.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(5666.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container> 个 allocations，那就可以用余下的 16 位整数表示 <code>Slab</code> 编号。一个 <code>Slab</code> 的大小为 4MB，这样就能表示 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="20.281ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 8964.1 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="4D" d="M132 622Q125 629 121 631T105 634T62 637H29V683H135Q221 683 232 682T249 675Q250 674 354 398L458 124L562 398Q666 674 668 675Q671 681 683 682T781 683H887V637H854Q814 636 803 634T785 622V61Q791 51 802 49T854 46H887V0H876Q855 3 736 3Q605 3 596 0H585V46H618Q660 47 669 49T688 61V347Q688 424 688 461T688 546T688 613L687 632Q454 14 450 7Q446 1 430 1T410 7Q409 9 292 316L176 624V606Q175 588 175 543T175 463T175 356L176 86Q187 50 261 46H278V0H269Q254 3 154 3Q52 3 37 0H29V46H46Q78 48 98 56T122 69T132 86V622Z"></path><path data-c="42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z" transform="translate(917,0)"></path></g></g><g data-mml-node="mo" transform="translate(2347.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(3347.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(4915.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5971.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1000,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7471.1,0)"><g data-mml-node="mi"><path data-c="47" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q401 658 376 654T316 633T254 592T205 519T177 411Q173 369 173 335Q173 259 192 201T238 111T302 58T370 31T431 24Q478 24 513 45T559 100Q562 110 562 160V212Q561 213 557 216T551 220T542 223T526 225T502 226T463 227H437V273H449L609 270Q715 270 727 273H735V227H721Q674 227 668 215Q666 211 666 108V6Q660 0 657 0Q653 0 639 10Q617 25 600 42L587 54Q571 27 524 3T406 -22Q317 -22 238 22T108 151T56 342Z"></path><path data-c="42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z" transform="translate(785,0)"></path></g></g></g></g></svg></mjx-container> 范围的缓存地址。因此，这种表示方式非常高效。</p><h2 id="Slab-与-SlabHeader"><a href="#Slab-与-SlabHeader" class="headerlink" title="Slab 与 SlabHeader"></a><code>Slab</code> 与 <code>SlabHeader</code></h2><p>每个 <code>Slab</code> 需要维护自身的 <code>poolId</code>、<code>classId</code> 等元信息，这些元信息用一个 <code>SlabHeader</code> 结构存储。CacheLib 的策略是，将整块内存分为两部分，前面一小部分依次存放各个 <code>SlabHeader</code>，剩余部分用于分配 <code>Slab</code>。</p><p>这就要求 <code>SlabAllocator</code> 在构造时就估计好这个切分的界限。由于 <code>Slab</code> 与 <code>SlabHeader</code> 的大小都是已知的（分别为 4MB 和 7B），只要知道内存总量，这一估计并不困难，具体实现见 <code>SlabAllocator::computeSlabMemoryStart()</code>。</p><p><code>SlabHeader</code> 结构在定义时注明了 <code>__attribute__((__packed__))</code>，从而能更紧凑地利用内存空间。</p><h1 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h1><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><p>每个 <code>Item</code> 所占空间不得超过一个 <code>Slab</code> 的大小（4MB）。为了支持更大对象的存储，CacheLib 引入链式存储机制，通过串联多个 <code>Item</code> 的方式实现这一需求。</p><p>CacheLib 的设计是，让一个普通的 <code>CacheItem</code> 充当祖先节点，另外一些 <code>CacheChainedItem</code> 串成一个单链表，“接在”这个祖先节点之后。每个 <code>CacheChainedItem</code> 均需存储祖先节点的地址，以便知道自己祖先是谁，也要存储后继节点的地址，以实现链表的功能。整个缓存系统内还要维护一张大表（使用 <code>CacheTrait::AccessType</code> 指定的容器实现），用于根据祖先节点查找链表的起点。</p><p><img src="/images/chained.png" alt="img"></p><h2 id="CacheChainedItem-内存布局"><a href="#CacheChainedItem-内存布局" class="headerlink" title="CacheChainedItem 内存布局"></a><code>CacheChainedItem</code> 内存布局</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">| --------------------- |</span><br><span class="line">| AccessHook            |</span><br><span class="line">| MMHook                |</span><br><span class="line">| RefCountWithFlags     |</span><br><span class="line">| creationTime_         |</span><br><span class="line">| expiryTime_           |</span><br><span class="line">| --------------------- |</span><br><span class="line">|  K | size_            |</span><br><span class="line">|  A | ---------------- |</span><br><span class="line">|  l |       | keyData  | &lt;-- sizeof(CompressedPtr)</span><br><span class="line">|  l |       | -------- |</span><br><span class="line">|  o |       | P | hook | &lt;-- sizeof(SlistHook&lt;ChainedItem&gt;)</span><br><span class="line">|  c | data_ | a | data |</span><br><span class="line">|  a |       | y |      |</span><br><span class="line">|  t |       | l |      |</span><br><span class="line">|  i |       | o |      |</span><br><span class="line">|  o |       | a |      |</span><br><span class="line">|  n |       | d |      |</span><br><span class="line">| --------------------- |</span><br></pre></td></tr></table></figure><p><code>CacheChainedItem</code> 与 <code>CacheItem</code> 在内存布局上大体相同，都有五个元信息字段，都使用 <code>KAllocation</code> 维护对象数据。</p><blockquote><p>在这里简单补充一下 <code>KAllocation</code> 的结构和优化细节。</p><p><code>KAllocation</code> 需要维护两部分内容：<code>Item</code> 的 key 与 <code>Item</code> 的 payload。两者均为可变长数据，且连续地存储在 <code>data_</code> 字段内，这就需要 <code>KAllocation</code> 额外维护两者的数据长度。</p><p><code>KAllocation</code> 巧妙地使用一个 32 位整数字段维护两个长度：用前 8 位表示 key 的长度，后 24 位表示 payload 的长度，以达到压缩空间的目的。</p></blockquote><p>和普通的 <code>CacheItem</code> 不同之处在于：</p><ul><li><p><code>CacheChainedItem</code> 将祖先节点的指针作为 key，从而可以根据祖先节点的地址找到 <code>CacheChainedItem</code>；</p></li><li><p><code>CacheChainedItem</code> 需要利用 payload 的前几个字节存储后继节点的指针，以实现链表的功能。</p></li></ul><p>以上两个指针均用 <code>CompressedPtr</code> 实现，用于减小空间开销。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p><code>CacheItem</code> 内有一个字段 <code>ref_</code>，用来维护该 <code>CacheItem</code> 的引用计数等信息，用一个 32 位整数表示。这里也用到了压位技巧，此处不展开。</p><p>以下两种情形会计入引用：</p><ul><li><p>通过 <code>ReadHandle</code> 或 <code>WriteHandle</code> 被用户使用；</p></li><li><p>作为 <code>CacheChainedItem</code> 被父节点引用。</p></li></ul><p>这张表格描述了引用计数更新的规律：</p><table><thead><tr><th>场景</th><th>提供给用户使用</th><th>父节点引用</th></tr></thead><tbody><tr><td>计数增加</td><td><code>Handle</code> 构造时</td><td><code>Item</code> 进入链表时</td></tr><tr><td>计数减少</td><td><code>Handle</code> 析构时</td><td><code>Item</code> 离开链表时</td></tr></tbody></table><h2 id="Handle-做到的与没做到的"><a href="#Handle-做到的与没做到的" class="headerlink" title="Handle 做到的与没做到的"></a><code>Handle</code> 做到的与没做到的</h2><p>根据 CacheLib 代码注释的描述（见 <code>allocator/CacheItem.h</code>），<code>Handle</code> 的作用是保证引用计数的正确性，类似 <code>std::shared_ptr</code>。可仔细阅读代码后，我发现 <code>Handle</code> 并不如智能指针那样“智能”。首先，当 <code>Item</code> 进入和离开链表时，<code>Item</code> 的引用计数还是要由上层的 <code>CacheAllocator</code> 手动更新。其次，<code>Handle</code> 也不会在构造时自动将 <code>Item</code> 的引用计数加一，还是需要交由上层接口自行控制。</p><blockquote><p>参见 <code>CacheAllocator::acquire()</code>，<code>CacheAllocator</code> 的其他接口如果想要从 <code>Item</code> 构造 <code>Handle</code>，应当通过这一方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CacheTrait&gt;</span><br><span class="line"><span class="keyword">typename</span> CacheAllocator&lt;CacheTrait&gt;::WriteHandle</span><br><span class="line">CacheAllocator&lt;CacheTrait&gt;::<span class="built_in">acquire</span>(Item* it) {</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">UNLIKELY</span>(!it)) {</span><br><span class="line">    <span class="keyword">return</span> WriteHandle{};</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  SCOPE_FAIL { stats_.numRefcountOverflow.<span class="built_in">inc</span>(); };</span><br><span class="line"></span><br><span class="line">  <span class="built_in">incRef</span>(*it);</span><br><span class="line">  <span class="keyword">return</span> WriteHandle{it, *<span class="keyword">this</span>};</span><br><span class="line">}</span><br></pre></td></tr></table></figure></blockquote><p>当然，<code>Handle</code> 还是做到了一些事情的。比如，<code>Handle</code> 确实会在析构时将 <code>Item</code> 的引用计数减一。另外，<code>Handle</code> 禁用了拷贝构造和拷贝赋值，避免拷贝造成引用计数的管理混乱。对 CacheLib 内部实现而言，<code>Handle</code> 也许并不够“智能”。但对用户而言，<code>Handle</code> 确实做到了用户透明的引用计数控制。</p><h1 id="结构化存储——以-Map-为例"><a href="#结构化存储——以-Map-为例" class="headerlink" title="结构化存储——以 Map 为例"></a>结构化存储——以 <code>Map</code> 为例</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>Map</code> 基于链式存储实现。CacheLib 用一个祖先节点存储映射关系（采用哈希表），用剩余的后继节点存储映射值，映射关系里只存储映射值的地址。整个 <code>Map</code> 构成一个大的 CacheLib 存储对象。</p><p><img src="https://cachelib.org/assets/images/hashtable-bbb7241416549634ca94eacf582a764a.png" alt="img"></p><p>CacheLib 引入了一个 <code>BufferManager</code>，用于管理 Value Storage 部分可分配的空间。需要注意的是，<code>BufferManager</code> 并不拥有内存，也不占据存储空间，而更像是一个工具类，辅助 <code>Map</code> 进行内存空间的使用。</p><p><code>Map</code> 有两个重要字段：<code>hashtable_</code> 与 <code>bufferManager_</code>。接下来两节将分别介绍这两个字段的实现细节。</p><h2 id="映射关系"><a href="#映射关系" class="headerlink" title="映射关系"></a>映射关系</h2><p><code>hashtable_</code> 用于维护这个 <code>Map</code> 的映射关系，它存储于祖先节点的内存空间中。<code>hashtable_</code> 的类型为 <code>TypedHandle&lt;HashTable&gt;</code>，这意味着它与一般的 <code>Handle</code> 本质相同，只是内存被解释为 <code>HashTable</code> 类型，方便编程。</p><p><code>HashTable</code> 采用了一个开放地址的实现方式，只用一段连续的地址空间即可完成。<code>HashTable</code> 的主体数据部分为一个 <code>Entry[]</code>，每个 <code>Entry</code> 表示一个键值映射，定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Key&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FOLLY_PACK_ATTR</span> Entry {</span><br><span class="line">  Key key{};</span><br><span class="line">  BufferAddr addr{<span class="literal">nullptr</span>};</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">isNull</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> addr == <span class="literal">nullptr</span>; }</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setNull</span><span class="params">()</span> </span>{ addr = <span class="literal">nullptr</span>; }</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p><code>Key</code> 可以是自定义类型，前提是长度固定，且不能引用堆上数据（意味着不能用 <code>std::string</code>）。</p><p><code>BufferAddr</code> 用来描述值在 Value Storage 中的地址，同样采用了压位的技巧，前 22 位用于表示在 <code>Buffer</code> 内的位置（0～4MB），后 10 位用于表示在第几块 <code>Buffer</code> 内。</p><p>当 <code>Handle</code> 存储空间用满时，<code>HashTable</code> 会尝试在 <code>MemoryPool</code> 内重新申请一个空间，并将现有的映射关系重哈希、迁移过去。</p><p>其余部分实现与传统的 <code>HashTable</code> 差不多，此处不再展开。</p><h2 id="BufferManager"><a href="#BufferManager" class="headerlink" title="BufferManager"></a><code>BufferManager</code></h2><p><code>BufferManager</code> 内保存了指向 <code>CacheAllocator</code> 实例以及祖先节点的指针，此外还有一个 <code>std::vector&lt;Item*&gt; buffers_</code>，依次存放每块 <code>Buffer</code> 所对应的 <code>Item</code> 的指针。</p><p>当 <code>Map</code> 需要添加一组新的键值对时，<code>BufferManager</code> 首先会遍历每一块 <code>Buffer</code>，询问是否有足够的空间。若有，则写入对应的值，并更新映射关系。若没有，<code>Map</code> 会让 <code>BufferManager</code> 申请一块新的 <code>CacheChainedItem</code> 后，重新给出一个可分配的地址，写入待添加的值，并由 <code>Map</code> 更新映射关系。</p><p>由于每次需要分配的空间长度并不固定，<code>Buffer</code> 内采用了较为简单的分配策略：直接在上一次分配的地址之后分配下一个地址。即使因删除而存在空洞，也不会直接复用，而只有在必要的情况下才会重新整理压缩 <code>Buffer</code> 内分配的空间。</p><h1 id="Navy-异步调度器"><a href="#Navy-异步调度器" class="headerlink" title="Navy 异步调度器"></a>Navy 异步调度器</h1><h2 id="设计层次"><a href="#设计层次" class="headerlink" title="设计层次"></a>设计层次</h2><p>Navy 引擎中，数据主要存放于 SSD 上，因此数据的读写是一个异步的过程。为此，Navy 需要实现一个异步调度器。</p><p>Navy 引入了一个 <code>Driver</code> 层，向上提供一系列异步接口，向下对接存储部件，并负责控制异步调度器。</p><p>在异步调度器的部分，Navy 定义了一个抽象类 <code>JobScheduler</code>，系统中默认使用的是派生类 <code>OrderedThreadPoolJobScheduler</code>，实现细节之后分析。</p><p>在 <code>Driver</code> 层之下，就是具体的存储引擎。由于 <code>Driver</code> 层已经处理好异步调度，存储引擎的代码都是在线程池中执行的，因此只需按同步的方式实现存储引擎接口即可。</p><p><img src="https://cachelib.org/assets/images/navy_architecture-04f7e32f458b3c4cc0e9c708226bc448.png" alt="img"></p><blockquote><p>一例看懂 <code>Driver</code>、<code>JobScheduler</code> 与 <code>Engine</code> 的关系（注意代码中的注释）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Driver 向上提供异步接口</span></span><br><span class="line"><span class="function">Status <span class="title">Driver::lookupAsync</span><span class="params">(HashedKey hk, LookupCallback cb)</span> </span>{</span><br><span class="line">  lookupCount_.<span class="built_in">inc</span>();</span><br><span class="line">  <span class="built_in">XDCHECK</span>(cb);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Driver 将异步任务传给 JobScheduler</span></span><br><span class="line">  scheduler_-&gt;<span class="built_in">enqueueWithKey</span>(</span><br><span class="line">      [<span class="keyword">this</span>, cb = std::<span class="built_in">move</span>(cb), hk, skipLargeItemCache = <span class="literal">false</span>]() <span class="keyword">mutable</span> {</span><br><span class="line">        <span class="comment">// 该函数将在新线程上执行 </span></span><br><span class="line">        Buffer value;</span><br><span class="line">        Status status{Status::NotFound};</span><br><span class="line">        <span class="keyword">if</span> (!skipLargeItemCache) {</span><br><span class="line">          <span class="comment">// largeItemCache_ 是一个 Engine 实例</span></span><br><span class="line">          <span class="comment">// Driver 驱动下层引擎执行 IO 任务</span></span><br><span class="line">          status = largeItemCache_-&gt;<span class="built_in">lookup</span>(hk, value);</span><br><span class="line">          <span class="keyword">if</span> (status == Status::Retry) {</span><br><span class="line">            <span class="keyword">return</span> JobExitCode::Reschedule;</span><br><span class="line">          }</span><br><span class="line">          skipLargeItemCache = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (status == Status::NotFound) {</span><br><span class="line">          <span class="comment">// smallItemCache_ 是另一个 Engine 实例</span></span><br><span class="line">          <span class="comment">// Driver 驱动下层引擎执行 IO 任务</span></span><br><span class="line">          status = smallItemCache_-&gt;<span class="built_in">lookup</span>(hk, value);</span><br><span class="line">          <span class="keyword">if</span> (status == Status::Retry) {</span><br><span class="line">            <span class="keyword">return</span> JobExitCode::Reschedule;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cb) {</span><br><span class="line">          <span class="comment">// 通过回调函数通知异步任务完成</span></span><br><span class="line">          <span class="built_in">cb</span>(status, hk, std::<span class="built_in">move</span>(value));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">updateLookupStats</span>(status);</span><br><span class="line">        <span class="keyword">return</span> JobExitCode::Done;</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"lookup"</span>,</span><br><span class="line">      JobType::Read,</span><br><span class="line">      hk.<span class="built_in">keyHash</span>());</span><br><span class="line">  <span class="keyword">return</span> Status::Ok;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></blockquote><h2 id="JobScheduler"><a href="#JobScheduler" class="headerlink" title="JobScheduler"></a><code>JobScheduler</code></h2><p><code>JobScheduler</code> 是异步调度器的抽象类，任何一个具体的异步调度器，都需要实现 <code>JobScheduler</code> 定义的五个抽象方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JobScheduler</span> {</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">JobScheduler</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Uses @key to schedule job on one of available workers. Jobs can be</span></span><br><span class="line">  <span class="comment">// ordered by their key based on their enqueue order,  if the scheduler</span></span><br><span class="line">  <span class="comment">// supports it.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">enqueueWithKey</span><span class="params">(Job job,</span></span></span><br><span class="line"><span class="params"><span class="function">                              folly::StringPiece name,</span></span></span><br><span class="line"><span class="params"><span class="function">                              JobType type,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="type">uint64_t</span> key)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enqueue a job for execution. No ordering guarantees are made for these</span></span><br><span class="line">  <span class="comment">// jobs.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">enqueue</span><span class="params">(Job job, folly::StringPiece name, JobType type)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// guarantees that all enqueued jobs are finished and blocks until then.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">finish</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// visits each available counter for the visitor to take appropriate action.</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">getCounters</span><span class="params">(<span class="type">const</span> CounterVisitor&amp; visitor)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br></pre></td></tr></table></figure><p>其中，最关键的接口是 <code>enqueueWithKey</code> 与 <code>enqueue</code>，它们将 <code>job</code> 加入调度队列中，交给对应的线程池执行。</p><p>Navy 实现了两个派生类：<code>ThreadPoolJobScheduler</code> 与 <code>OrderedThreadPoolJobScheduler</code>。下面分别介绍这两个派生类。</p><blockquote><p>如果只想知道 <code>JobScheduler</code> 的总体设计，而不关心具体实现细节，建议去看<a href="https://cachelib.org/docs/Cache_Library_Architecture_Guide/navy_architecture_overview#job-scheduler">官方教程</a>。那里对两个不同的派生类做了模糊处理（压根就没提），虽然有些事实性错误，但更容易理解一些。</p></blockquote><h3 id="ThreadPoolJobScheduler"><a href="#ThreadPoolJobScheduler" class="headerlink" title="ThreadPoolJobScheduler"></a><code>ThreadPoolJobScheduler</code></h3><p><code>ThreadPoolJobScheduler</code> 为读和写任务分别创建了一个线程池（<code>ThreadPoolExecutor</code>）。每当有新任务加入时，<code>ThreadPoolJobScheduler</code> 就会根据任务的类别，将其移动到对应的线程池中。</p><p>默认设置下，每个线程池有 32 个线程。每个线程都有对应的 <code>JobQueue</code> 实例，用于维护自己需要处理的任务队列。</p><p>线程池拿到任务后，就会选择一个线程，将任务加入它的 <code>JobQueue</code> 实例中，交给该线程执行。</p><p>这里补充交代一些细节：</p><ol><li><p>线程池选择线程的依据是，如果是用 <code>enqueueWithKey</code> 接口添加的任务，那就根据 <code>key</code> 的模选择，否则就轮流；</p></li><li><p>部分类型的任务（<code>JobType::Reclaim</code> 和 <code>JobType::Flush</code>）可以“插队”，从而优先被线程执行；</p></li><li><p>为保证线程安全，在需要变更任务列表时，<code>JobQueue</code> 会用互斥锁进行保护；</p></li><li><p>为避免线程空转，<code>JobQueue</code> 引入一个 <code>std::condition_variable</code>，在任务执行完毕时陷入阻塞状态，等到下一个任务被加入时重新唤醒。</p></li></ol><h3 id="OrderedThreadPoolJobScheduler"><a href="#OrderedThreadPoolJobScheduler" class="headerlink" title="OrderedThreadPoolJobScheduler"></a><code>OrderedThreadPoolJobScheduler</code></h3><p><code>OrderedThreadPoolJobScheduler</code> 在满足 <code>ThreadPoolJobScheduler</code> 的<strong>一切特性</strong>的同时，保证了 <code>key</code> 相同的任务执行时的有序性。</p><p>它的核心想法是，引入一个“缓冲带”，在接受一个新任务之前，检查是否有同样 <code>key</code> 的任务正在执行或等待执行中。如有，将其追加到该 <code>key</code> 的缓冲队列中。否则，直接交给线程池去执行。</p><p>为了高效实现这一机制，<code>OrderedThreadPoolJobScheduler</code> 引入大量桶（默认值为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.919ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1290.1 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></g></g></svg></mjx-container> 个）。每个桶内维护一个缓冲队列，根据 <code>key</code> 的模选择对应的桶。</p><h2 id="兼容新的存储介质"><a href="#兼容新的存储介质" class="headerlink" title="兼容新的存储介质"></a>兼容新的存储介质</h2><p>Navy 引入 <code>Driver</code> 层的这一设计，让我们能够进行扩展以兼容新的存储介质。</p><p>还是以 <code>Driver::lookupAsync</code> 这一接口为例，注意它加入调度器的具体任务：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Driver::lookupAsync</span><span class="params">(HashedKey hk, LookupCallback cb)</span> </span>{</span><br><span class="line">  lookupCount_.<span class="built_in">inc</span>();</span><br><span class="line">  <span class="built_in">XDCHECK</span>(cb);</span><br><span class="line"></span><br><span class="line">  scheduler_-&gt;<span class="built_in">enqueueWithKey</span>(</span><br><span class="line">      [<span class="keyword">this</span>, cb = std::<span class="built_in">move</span>(cb), hk, skipLargeItemCache = <span class="literal">false</span>]() <span class="keyword">mutable</span> {</span><br><span class="line">        Buffer value;</span><br><span class="line">        Status status{Status::NotFound};</span><br><span class="line">        <span class="keyword">if</span> (!skipLargeItemCache) {</span><br><span class="line">          status = largeItemCache_-&gt;<span class="built_in">lookup</span>(hk, value);</span><br><span class="line">          <span class="keyword">if</span> (status == Status::Retry) {</span><br><span class="line">            <span class="keyword">return</span> JobExitCode::Reschedule;</span><br><span class="line">          }</span><br><span class="line">          skipLargeItemCache = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (status == Status::NotFound) {</span><br><span class="line">          status = smallItemCache_-&gt;<span class="built_in">lookup</span>(hk, value);</span><br><span class="line">          <span class="keyword">if</span> (status == Status::Retry) {</span><br><span class="line">            <span class="keyword">return</span> JobExitCode::Reschedule;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cb) {</span><br><span class="line">          <span class="built_in">cb</span>(status, hk, std::<span class="built_in">move</span>(value));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">updateLookupStats</span>(status);</span><br><span class="line">        <span class="keyword">return</span> JobExitCode::Done;</span><br><span class="line">      },</span><br><span class="line">      <span class="string">"lookup"</span>,</span><br><span class="line">      JobType::Read,</span><br><span class="line">      hk.<span class="built_in">keyHash</span>());</span><br><span class="line">  <span class="keyword">return</span> Status::Ok;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>它大体上进行了这样的流程：先查找 <code>largeItemCache_</code>，如果未命中再查找 <code>smallItemCache_</code>，如果仍未命中则报告未找到。</p><p>假如我们希望引入新的存储介质，如 S3，那么只需自行实现该介质的相应接口，并在 <code>Driver</code> 层相应的执行流程中调用即可（例如，若 SSD 缓存中无法命中，则前往 S3 缓存进一步查找）。</p>]]></content>
      
      
      <categories>
          
          <category> 代码控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直博推免复盘</title>
      <link href="/articles/tuimian/"/>
      <url>/articles/tuimian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今年的推研算是告一段落了，我最大的感受是，不知道有哪些时间节点，需要做些什么。通知总是提前两三天发出，让我心里总数没数。</p><p>为此，我在这里记录一下，我今年推研的一系列关键节点，供以后的同学参考。</p><h2 id="系统报名"><a href="#系统报名" class="headerlink" title="系统报名"></a>系统报名</h2><p>8月16日至8月31日是系统报名阶段，需要登录研究生申请服务系统，填报自己的个人信息、申请志愿、相关经历等。此外，还需要提交一份简单的个人陈述。相关材料需要打印、手签并扫描上传。因此，最好预留一两天的时间，不要等到截止点前再提交。</p><p>如果你打算申请直博，原则上需要在系统报名截止之前，找好老师并完成双向确认。</p><p>今年计算机系引入了一些新的机制，用来给学生排名并确定推免资格。提交相关材料的时间点也在这一阶段。</p><p>总体而言，这一阶段时间较为宽裕。</p><blockquote><p>关于志愿填报</p><p>报名系统允许你填三个志愿，辅导员会建议同学们用好三个志愿，比如说填一个博士、一个硕士、一个网研院，这样三个方向的面试你都有机会参加，作为兜底策略。</p><p>我填了两个博士志愿，最后系统只保留了一个，另一个则告诉我“材料资格评审不通过”。</p></blockquote><h2 id="复试准备"><a href="#复试准备" class="headerlink" title="复试准备"></a>复试准备</h2><p>计算机系推免复试由机试和面试组成。今年的成绩构成为：机试（20%）+专业面试（75%）+综合面试（5%）。</p><p>机试由三道题组成：简单题、工程题、算法题，可以根据自己的情况和目标加以练习。</p><p>机试允许带纸质资料，可以提前准备好。</p><p>如果你是本系考生，机试成绩没有那么重要。最好不要爆零。</p><p><strong>机试次日就是本校直博面试，因此请不要忘了提前准备面试。</strong> 面试的具体内容放到下一节再讲。</p><h2 id="机试"><a href="#机试" class="headerlink" title="机试"></a>机试</h2><p>本学期9月13日开学，而机试的时间就是9月13日晚上。</p><p>机试的电脑上装有 Visual Studio Code 等软件，不熟悉的同学建议提前一天参加试机。</p><p>机试不限制解题语言。</p><p>第二题，科学记数法规范化，主要考察字符串处理和大整数加减。我的做法是，使用 Python 完成，用正则对输入数据进行解析，然后根据不同的情况分类讨论，最后输出结果。大约用了一小时。</p><p>第一题，不知道什么类型题目，我写了个朴素的 DFS，混了 88 分。好久没写 DFS 的代码了，竟有些不熟练。</p><p>最后做了第三题，只剩半个小时了，是一道计算几何题。我挑了其中 10 分的子任务点，混到了分。</p><p>今年的题目比往年都难。</p><h2 id="专业面试"><a href="#专业面试" class="headerlink" title="专业面试"></a>专业面试</h2><p>9月14日上午10:12，是我的专业面试时间。</p><p><strong>面试前，请先打印若干份自我陈述，可以采用简历的形式。</strong> 面试时，志愿者会将你的自我陈述分发到各个老师手上。</p><p>专业面试需要准备约 5 分钟的 PPT，介绍自己科研相关的经历。随后，评委老师会针对你 PPT 上的内容进行自由提问，<strong>主要是询问科研经历的细节以及创新点</strong>。</p><p>系统和应用方向由两个不同的评委组分开面试。</p><p>面试对服装没有要求。大约一半的同学穿了正装。</p><blockquote><p>自由提问复盘</p><ol><li>具体阐述图数据库实习期间做的事情，使用了哪些优化手段，取得了怎样的效果。</li><li>讲解用户态中断在中断优先级方面的实现细节，以及在多用户场景下是怎样表现的。</li><li>讲一讲 Saiblo 评测机的物理特性，主要介绍 NUMA 相关的特性。</li><li>介绍一下 THUInfo APP 的相关内容。</li></ol></blockquote><h2 id="综合面试"><a href="#综合面试" class="headerlink" title="综合面试"></a>综合面试</h2><p>9月14日下午，我参加了综合面试。</p><p>综合面试只有 6 位老师。<strong>面试前，请先打印若干份自我陈述。面试时，需要将你的自我陈述分发到各个老师手上。</strong></p><p><strong>请预先准备好中英文自我介绍。</strong></p><blockquote><p>综合面试复盘</p><ol><li>请用英文进行自我介绍。</li><li>你在平时有哪些兴趣爱好？（这个问题是基于我在个人陈述上对“个人兴趣”的描述：计算机系统、并行计算。）</li><li>你有体育方面的兴趣爱好吗？</li><li>你的项目经历里写到“大模型预训练的系统优化”，这和你的其他系统项目有什么关联？</li><li>你的社工经历很丰富，你是如何平衡社工、学业与科研的？</li><li>你遇到过哪些挫折？</li><li>你对博士的毕业要求和毕业年限相关问题有了解吗？</li><li>THUInfo 是什么？</li><li>简历上写到，你在海致仅仅实习了一个月，就完成了那么多工作，你能解释一下吗？</li></ol></blockquote><h2 id="结果确认"><a href="#结果确认" class="headerlink" title="结果确认"></a>结果确认</h2><p>9月19日下午，我收到了初步录取结果，并在系统上进行了确认。</p><p>接下来，就要准备迎接新的学术生涯啦。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年9月5日见闻</title>
      <link href="/articles/news-9-5/"/>
      <url>/articles/news-9-5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>清北高材生从大厂辞职创业。</p><p>发往 thuinfo.net 的出流量被校园网阻断。</p><p>我去小店理发。</p><p>旁边座位的理发师：大家都不容易，尤其是疫情当前。</p><p>背景里的新闻播报：西北工业大学遭美国网络攻击，中方强烈谴责。</p><p>一个家庭的顶梁柱因疫情防控错过了手术的黄金时期。</p><p>四川地震。</p><p>某小区：居家隔离期间不得下楼避险。</p><p>核酸检测的动作越来越轻描淡写。</p><p>人啊，总是喜欢自己给自己找麻烦。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云古风歌单备份</title>
      <link href="/articles/netease-gufeng/"/>
      <url>/articles/netease-gufeng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前几天我备份了一下自己的纯音歌单。今天我偶然重新听了一遍自己的古风歌单，想着要不也备份一下。</p><blockquote><p>最喜欢的排在前面，其次的排在最后，中间的乱排。<br>最前面的几首，每一首带着一个故事。</p></blockquote><p>这是我创建歌单时写的介绍。不过那些故事，好多也记不清了呢～</p><p>这两年我几乎没听新的古风歌曲，所以这份歌单应该未来也不会有什么改变了。</p><hr><h2 id="歌单"><a href="#歌单" class="headerlink" title="歌单"></a>歌单</h2><ol><li><a href="https://music.163.com/song?id=469744795">山僧</a></li><li><a href="https://music.163.com/song?id=233692">盛唐夜唱</a></li><li><a href="https://music.163.com/song?id=28496172">山鬼</a></li><li><a href="https://music.163.com/song?id=28188386">谓我</a></li><li><a href="https://music.163.com/song?id=28798308">一身诗意千寻瀑</a></li><li><a href="https://music.163.com/song?id=504685848">灼</a></li><li><a href="https://music.163.com/song?id=446945324">清明上河图</a></li><li><a href="https://music.163.com/song?id=469699897">大梦</a></li><li><a href="https://music.163.com/song?id=1298042469">易水诀</a></li><li><a href="https://music.163.com/song?id=101116">命悬一线</a></li><li><a href="https://music.163.com/song?id=571534645">何以歌</a></li><li><a href="https://music.163.com/song?id=482933652">涉川</a></li><li><a href="https://music.163.com/song?id=28138493">锦鲤抄</a></li><li><a href="https://music.163.com/song?id=412911546">狐言（cover 河图、洛天依）</a></li><li><a href="https://music.163.com/song?id=516997458">白石溪（Cover 洛天依 &#x2F; 乐正绫）</a></li><li><a href="https://music.163.com/song?id=469744792">何而安</a></li><li><a href="https://music.163.com/song?id=30352891">牵丝戏</a></li><li><a href="https://music.163.com/song?id=538400968">知与君同</a></li><li><a href="https://music.163.com/song?id=293407">宿命</a></li><li><a href="https://music.163.com/song?id=233687">又何用</a></li><li><a href="https://music.163.com/song?id=233695">倾尽天下</a></li><li><a href="https://music.163.com/song?id=27571858">江山此夜</a></li><li><a href="https://music.163.com/song?id=28798354">忘川</a></li><li><a href="https://music.163.com/song?id=28828196">墨衣</a></li><li><a href="https://music.163.com/song?id=432464509">九歌·东皇太一</a></li><li><a href="https://music.163.com/song?id=504686851">春笺</a></li><li><a href="https://music.163.com/song?id=233689">风姿物语.李煜.青莲雪</a></li><li><a href="https://music.163.com/song?id=101085">为龙</a></li><li><a href="https://music.163.com/song?id=550995874">千秋令</a></li><li><a href="https://music.163.com/song?id=459437308">窗前明月光</a></li><li><a href="https://music.163.com/song?id=474218266">念奴娇·赤壁怀古</a></li><li><a href="https://music.163.com/song?id=493285796">谢却荼蘼</a></li><li><a href="https://music.163.com/song?id=109051">菩萨蛮(男声珍藏版)</a></li><li><a href="https://music.163.com/song?id=233691">云荒.只如初见</a></li><li><a href="https://music.163.com/song?id=428391773">永遇乐·京口北固亭怀古</a></li><li><a href="https://music.163.com/song?id=469699900">雨打芭蕉</a></li><li><a href="https://music.163.com/song?id=5280196">月满西楼</a></li><li><a href="https://music.163.com/song?id=27591735">滚滚长江东逝水</a></li><li><a href="https://music.163.com/song?id=92279">唐宋元明清</a></li><li><a href="https://music.163.com/song?id=28765208">松烟入墨</a></li><li><a href="https://music.163.com/song?id=101079">如花</a></li><li><a href="https://music.163.com/song?id=519251960">江南梦</a></li><li><a href="https://music.163.com/song?id=28188426">腐草为萤</a></li><li><a href="https://music.163.com/song?id=28188378">归零</a></li><li><a href="https://music.163.com/song?id=30284102">浮生若梦</a></li><li><a href="https://music.163.com/song?id=27731392">荔枝春</a></li><li><a href="https://music.163.com/song?id=27571861">山河永慕</a></li><li><a href="https://music.163.com/song?id=469744799">清平误</a></li><li><a href="https://music.163.com/song?id=28188382">上邪</a></li><li><a href="https://music.163.com/song?id=529255842">见南山</a></li><li><a href="https://music.163.com/song?id=101118">白衣</a></li><li><a href="https://music.163.com/song?id=28493377">相见欢</a></li><li><a href="https://music.163.com/song?id=28188429">Zodiac~黄道十二宫</a></li><li><a href="https://music.163.com/song?id=36117196">月出</a></li><li><a href="https://music.163.com/song?id=101109">不见长安</a></li><li><a href="https://music.163.com/song?id=469744797">醉世客</a></li><li><a href="https://music.163.com/song?id=28288202">参商</a></li><li><a href="https://music.163.com/song?id=504686860">秋水</a></li><li><a href="https://music.163.com/song?id=29771070">故城</a></li><li><a href="https://music.163.com/song?id=481495239">离骚</a></li><li><a href="https://music.163.com/song?id=28188380">剑心(藏剑)</a></li><li><a href="https://music.163.com/song?id=101106">风起天阑</a></li><li><a href="https://music.163.com/song?id=462391069">长生诀</a></li><li><a href="https://music.163.com/song?id=421137682">不老梦</a></li><li><a href="https://music.163.com/song?id=36895537">采茶纪</a></li><li><a href="https://music.163.com/song?id=469699895">九歌</a></li><li><a href="https://music.163.com/song?id=443967375">短歌行</a></li><li><a href="https://music.163.com/song?id=29771069">雁书</a></li><li><a href="https://music.163.com/song?id=29771073">曲终人未散</a></li></ol><blockquote><p>最喜欢的歌：从《山僧》到《命悬一线》</p><p>比较喜欢的歌：在后半段分布得比较多</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云纯音歌单备份</title>
      <link href="/articles/netease/"/>
      <url>/articles/netease/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在我的网易云音乐歌单里，我播放纯音歌单的次数最多，没事就开列表循环，当背景音乐。</p><p>听了这么多年，我对目前歌单里曲目的顺序感到最为舒适。</p><p>还记得几年前，我有一次手抖，把歌单顺序打乱了，让我很难受。</p><p>为此，我专门开了这篇博客，就当备份一下自己目前的歌单。</p><hr><p>2024.1.8：热烈祝贺我的歌单里所有灰色的歌曲都恢复了。</p><hr><h2 id="歌单"><a href="#歌单" class="headerlink" title="歌单"></a>歌单</h2><p>（加粗的是让我心动的曲目。）</p><ol><li><strong><a href="https://music.163.com/song?id=498637">TEARS OF THE DRAGON</a></strong></li><li><a href="https://music.163.com/song?id=27579056">Imaginary Kiss</a></li><li><a href="https://music.163.com/song?id=519604416">Dusky World</a></li><li><a href="https://music.163.com/song?id=29734857">Cornfield Chase</a></li><li><a href="https://music.163.com/song?id=16846088">Journey</a></li><li><a href="https://music.163.com/song?id=28461163">Take Flight</a></li><li><a href="https://music.163.com/song?id=26127161">In Love</a></li><li><a href="https://music.163.com/song?id=1338174742">米津玄師-打上花火（Ayasa绚沙 remix）</a></li><li><a href="https://music.163.com/song?id=451319227">City</a></li><li><a href="https://music.163.com/song?id=1474525203">Undersea Respite (feat. Octopi)</a></li><li><a href="https://music.163.com/song?id=466327445">China-O</a></li><li><a href="https://music.163.com/song?id=1471560603">He Called Hex (Youth Choir Version)</a></li><li><a href="https://music.163.com/song?id=32717172">青空</a></li><li><a href="https://music.163.com/song?id=27579055">Downpours Everywhere</a></li><li><strong><a href="https://music.163.com/song?id=1309394520">Pale Court</a></strong></li><li><a href="https://music.163.com/song?id=527778">Two, Only Two.</a></li><li><strong><a href="https://music.163.com/song?id=1341338801">Scattered and Lost</a></strong></li><li><a href="https://music.163.com/song?id=28906014">Raindrops on Your Face</a></li><li><a href="https://music.163.com/song?id=29744086">Flying Drone</a></li><li><a href="https://music.163.com/song?id=421885589">花 が とぶ 飛ぶ</a></li><li><a href="https://music.163.com/song?id=1416988415">Starlight</a></li><li><a href="https://music.163.com/song?id=1474522835">Static Sands (feat. Thegur90)</a></li><li><strong><a href="https://music.163.com/song?id=1410404879">Autumn Romance</a></strong></li><li><a href="https://music.163.com/song?id=27579049">Dream or Dream</a></li><li><a href="https://music.163.com/song?id=1297940270">逆流</a></li><li><a href="https://music.163.com/song?id=1304920086">China-E</a></li><li><a href="https://music.163.com/song?id=28907015">Into Your Daydream (Intro)</a></li><li><strong><a href="https://music.163.com/song?id=1959716213">04 - 警視庁から各局</a></strong></li><li><a href="https://music.163.com/song?id=29734868">Coward</a></li><li><a href="https://music.163.com/song?id=29744091">Imperfect Lock</a></li><li><a href="https://music.163.com/song?id=29771117">No Time for Caution</a></li><li><strong><a href="https://music.163.com/song?id=1342552174">Old Site (Black Moonrise Mix)</a></strong></li><li><a href="https://music.163.com/song?id=36897723">风居住的街道（Piano ver） (翻自 磯村由紀子）</a></li><li><strong><a href="https://music.163.com/song?id=1448242718">Lace</a></strong></li><li><a href="https://music.163.com/song?id=22741700">ふたり</a></li><li><strong><a href="https://music.163.com/song?id=1448241713">Bonebottom</a></strong></li><li><a href="https://music.163.com/song?id=25731432">what for?</a></li><li><strong><a href="https://music.163.com/song?id=2015567179">550W &#x2F; Moss</a></strong></li><li><a href="https://music.163.com/song?id=29460371">Final Frontier</a></li><li><strong><a href="https://music.163.com/song?id=39227624">Undertale</a></strong></li><li><a href="https://music.163.com/song?id=26672926">Nothing To Fear</a></li><li><a href="https://music.163.com/song?id=27579053">Warm Winter</a></li><li><a href="https://music.163.com/song?id=36924524">Red Dawn (a)</a></li><li><a href="https://music.163.com/song?id=1321297488">跟太阳系说再见</a></li><li><strong><a href="https://music.163.com/song?id=1434293522">First Steps (Piano Only)</a></strong></li><li><a href="https://music.163.com/song?id=28907017">Frozen World</a></li><li><a href="https://music.163.com/song?id=509720124">夜、萤火虫和你</a></li><li><a href="https://music.163.com/song?id=1431593851">故乡的风</a></li><li><strong><a href="https://music.163.com/song?id=26234317">La Boîte à Musique</a></strong></li><li><strong><a href="https://music.163.com/song?id=16139381">3055</a></strong></li><li><a href="https://music.163.com/song?id=29734859">Day One (Interstellar Theme)</a></li><li><a href="https://music.163.com/song?id=29850085">仄暗い穴ぐらの底から</a></li><li><a href="https://music.163.com/song?id=27579052">Rosa Rubus</a></li><li><a href="https://music.163.com/song?id=1862594073">05 - 伊吹藍</a></li><li><a href="https://music.163.com/song?id=1309394525">Haunted Foes</a></li><li><a href="https://music.163.com/song?id=28907016">Illusionary Daytime</a></li><li><a href="https://music.163.com/song?id=439142564">和煦的糖果风</a></li><li><a href="https://music.163.com/song?id=28302231">Still…</a></li><li><a href="https://music.163.com/song?id=27579059">Awaking</a></li><li><a href="https://music.163.com/song?id=476904385">雨季和你 (2020ver.)</a></li><li><strong><a href="https://music.163.com/song?id=1931568150">【Animenz】声嘶力竭 - 家有女友 OP 钢琴改编</a></strong></li><li><strong><a href="https://music.163.com/song?id=2015570898">单程票</a></strong></li><li><a href="https://music.163.com/song?id=994052">Lily’s Theme</a></li><li><strong><a href="https://music.163.com/song?id=1394601255">浮光 (The History)</a></strong></li><li><a href="https://music.163.com/song?id=28411051">結ばれませ、さすれば…。</a></li><li><a href="https://music.163.com/song?id=539200858">Biting Rain</a></li><li><a href="https://music.163.com/song?id=28287116">Silent express</a></li><li><a href="https://music.163.com/song?id=1915516154">♾️（《开端》心动bgm）</a></li><li><a href="https://music.163.com/song?id=477310237">晴天的周末在去学校补课的路上遇见了喜欢的人</a></li><li><a href="https://music.163.com/song?id=508722653">年轮时雨</a></li><li><a href="https://music.163.com/song?id=27579058">Breathless</a></li><li><strong><a href="https://music.163.com/song?id=1341359820">Madeline and Theo</a></strong></li><li><strong><a href="https://music.163.com/song?id=1341338797">Starjump</a></strong></li><li><strong><a href="https://music.163.com/song?id=481001412">lit(var)(piano ver.)</a></strong></li><li><a href="https://music.163.com/song?id=38019092">Lifeline</a></li><li><a href="https://music.163.com/song?id=406232">Luv Letter</a></li><li><a href="https://music.163.com/song?id=492390949">星茶会</a></li><li><a href="https://music.163.com/song?id=425137440">ロック风アレンジ</a></li><li><a href="https://music.163.com/song?id=22807216">Million Mind</a></li><li><strong><a href="https://music.163.com/song?id=31010767">Climbing the Ginso Tree</a></strong></li><li><a href="https://music.163.com/song?id=430685732">Rain after Summer</a></li><li><strong><a href="https://music.163.com/song?id=1474530267">Agust (feat. Octopi)</a></strong></li><li><strong><a href="https://music.163.com/song?id=836298">やくさいながし</a></strong></li><li><a href="https://music.163.com/song?id=29744085">First Step</a></li><li><a href="https://music.163.com/song?id=554308724">Ephemeral Memories</a></li><li><strong><a href="https://music.163.com/song?id=1396315147">Beyond the Heart</a></strong></li><li><a href="https://music.163.com/song?id=479494742">夏之风</a></li><li><a href="https://music.163.com/song?id=491489972">雨</a></li><li><a href="https://music.163.com/song?id=1426503">Time</a></li><li><a href="https://music.163.com/song?id=27579050">Forget That Summer</a></li><li><a href="https://music.163.com/song?id=497209228">花火</a></li><li><a href="https://music.163.com/song?id=27646215">彩虹山</a></li></ol><hr><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><ul><li>我基本上不会收录从头到尾都特别燃的曲目，而更偏向于那些能随着旋律的发展，逐渐获得力量的音乐。</li><li>歌曲之间也是如此。对于情感基调比较高昂的那些音乐，我会用之前的几首音乐逐步铺垫情绪，甚至不惜“欲扬先抑”（例如我对 Climbing the Ginso Tree 和 Beyond the Heart 以及它们之前曲目的安排）。</li><li>这份歌单里面有几首歌我绝对不会拆，因为它们本身就是连在一起的：<ul><li>Coward、Imperfect Lock、No Time for Caution；</li><li>Madeline and Theo、Starjump。</li></ul></li><li>我对歌单里心动的音乐还是有些喜新厌旧的，因此也一直期待着偶遇新的音乐。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三下学期小结</title>
      <link href="/articles/summary-3-2/"/>
      <url>/articles/summary-3-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>贵系生活转眼就度过了三年，许多声音提醒着我本科毕业的临近。在毕业之前，完成学业、推免等事项十分重要，因为这关乎个人未来，希望一切能顺利进行。而另一方面，我在本科期间也参与了不少课外工作。临近毕业，也该考虑这些工作的交接与传承了。我想，一项工作的成果如果只能昙花一现，那完成这项工作的意义又何在呢。因此，我也希望这些工作能够长久地传承下去。</p><p>在这里，我想简单记录一下我过去参与过的工作，也当作是在做一些简单的梳理吧。</p><hr><h1 id="工作梳理"><a href="#工作梳理" class="headerlink" title="工作梳理"></a>工作梳理</h1><h2 id="Saiblo"><a href="#Saiblo" class="headerlink" title="Saiblo"></a>Saiblo</h2><p>我参与 Saiblo 开发已有一年多的时长，主要负责评测端的开发维护，对平台也有一些个人的理解与构想。</p><p>关于评测机的具体细节我在此不加介绍。我认为目前评测机最大的改进空间在于<strong>性能</strong>和<strong>可维护性</strong>，这也是我过去这一学期工作的重心。在性能方面，通过与学长交流讨论以及实际验证，我对评测机的性能进行了一定的改进。在可维护性方面，我对现有代码进行了一定的重构，并配备了教程文档，希望能提升项目的规范性，并降低后续维护者的学习成本。</p><p>在使用体验方面，我的希望是，能够<strong>构建一套完整的工具链</strong>，无论是上传 AI，还是发起对局，乃至游戏开发者测试游戏，都能通过一套命令行工具完成。目前这三者分别有对应的工具（<code>saiblo-upload</code>、<code>saiblo-local-judger</code>、<code>saiblo-dev-tools</code>），但较为零散，且重复逻辑较多。我希望有一天，它们能够整合起来，进而为用户带来更流畅的使用体验。</p><p>另一个目标是，我希望<strong>降低用户开发游戏的门槛</strong>，从而能够为网站带来更多新游戏。这一点有几个方面可以优化。首先，网站需要允许普通用户创建新游戏，当然游戏是否公开可以由管理员审核。其次，我们最好为游戏开发者提供带文档的 SDK 或框架，让他们能够方便地完成游戏的开发。最后，平台的安全性与稳定性（主要是评测机方面）需要相应地完善。</p><p>目前，下一届 Saiblo 接班人已招募完成，我也期待着 Saiblo 能够越做越好。</p><h2 id="THUInfo"><a href="#THUInfo" class="headerlink" title="THUInfo"></a>THUInfo</h2><p>我对 THUInfo 没有太多特别的想法，最大的愿望是，这款软件能够一直传承下去，并且能够在同学们当中普及开来。</p><p>至于短期内的开发规划，我们正规划采用一套全新的 UI 来开发下一版 APP，由专业的同学帮我们设计，理想情况下将在今年暑假开发完成，让二字班的同学们刚入学即可用上新版 THUInfo。从接班人方面，我们也邀请到了很靠谱的同学来接替我们的工作。总之，我祝愿 THUInfo 这款 APP 能够发展得越来越好。</p><hr><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="每周主题复盘"><a href="#每周主题复盘" class="headerlink" title="每周主题复盘"></a>每周主题复盘</h2><table><thead><tr><th align="center">周数</th><th align="center">主题</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">学无止境</td><td align="center">学习实验室项目相关知识</td></tr><tr><td align="center">1</td><td align="center">并行计算</td><td align="center">优化 Saiblo 评测性能</td></tr><tr><td align="center">2</td><td align="center">回环</td><td align="center">感叹人际关系中环路之多</td></tr><tr><td align="center">3</td><td align="center">画饼</td><td align="center">为 Saiblo 未来规划画饼（Project 9）</td></tr><tr><td align="center">4</td><td align="center">（丢包）</td><td align="center">貌似是在忙智能体比赛</td></tr><tr><td align="center">5</td><td align="center">传承</td><td align="center">Saiblo 接 GitLab 项目开发</td></tr><tr><td align="center">6</td><td align="center">赶路</td><td align="center">os 大作业中期检查</td></tr><tr><td align="center">7</td><td align="center">盘点</td><td align="center">存档点</td></tr><tr><td align="center">8</td><td align="center">纯粹</td><td align="center">取“纯粹容器”中“纯粹”一词</td></tr><tr><td align="center">9</td><td align="center">复苏</td><td align="center">取《蔚蓝》第二章章节名称；开发下一代评测机</td></tr><tr><td align="center">10</td><td align="center">交接</td><td align="center">进行 Saiblo 和 THUInfo 的交接工作</td></tr><tr><td align="center">11</td><td align="center">修整</td><td align="center">五一假期；将往届智能体播放器迁移到网页端</td></tr><tr><td align="center">12</td><td align="center">探索</td><td align="center">进行一个探索性的实验室项目</td></tr><tr><td align="center">13</td><td align="center">见证</td><td align="center">取《空洞骑士》成就“见证”一词</td></tr><tr><td align="center">14</td><td align="center">变幻</td><td align="center">疫情形势变幻莫测</td></tr><tr><td align="center">15</td><td align="center">追踪</td><td align="center">修 bug（实验室项目以及 os 大作业）</td></tr><tr><td align="center">16</td><td align="center">静心</td><td align="center">一动不如一静</td></tr><tr><td align="center">17</td><td align="center">测验</td><td align="center">期末考试</td></tr></tbody></table><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>这学期的课业比较水，再加上疫情政策（允许 2 门 P&#x2F;F），所以课内学习方面没什么值得记录的。</li><li>第 7~9 周是我本学期的低谷期。《蔚蓝》第九章的音乐给了我很大动力。</li><li>我的本科心路历程像《蔚蓝》第七章的音乐。</li></ul><hr><blockquote><p>一定要看到花开</p><p>一定等燕子归来</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三上学期小结</title>
      <link href="/articles/summary-3-1/"/>
      <url>/articles/summary-3-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>贵系大三生活就这样过去了一半。回顾过去的一个学期，似乎无论是交友、情感，还是社工、学业，都与从前一样。</p><p>不过，平静的表面下也有些许波澜与变化。正是这些点缀，让这段时光更有意义，更值得铭记。</p><p>这学期的心态变化又是非常经典的<strong>起步—攀登—低谷—重新振作</strong>。有学期初的迷茫与错乱，也有学期中的热情与期待。有造机时的疲惫与忧郁，也有云破日出时的希望与振奋。总的来说，虽然一切都未曾改变，但内心收获了不少成长。</p><hr><h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><blockquote><p>假期、小学期与大作业</p></blockquote><p>这个暑假又是与新冠相伴的一个假期。南京、扬州先后遭受疫情影响，我的生活节奏也被打乱。为了躲避疫情，我甚至比原定计划提前半个月返校。合算下来，我的暑假竟然不满一个月。</p><p>小学期也有些一言难尽。汇编<del>（应改名为计算机系统概论）</del>这门课没认真学，到小学期期末考前也没学明白，好在秋季学期全搞懂了。Java 这门课看似课改了，但今年的大作业非常阴间，需要基于一系列阴间的接口和一台阴间的服务器，实现一些模糊不清的伪需求。最后输在了美工上。我还选了门叫做<strong>量子计算研讨课</strong>的限选课，一堂课都没听，也没学明白什么知识，但因为论文写得好，最后居然拿了 A+。看来在你系，拿 A+ 往往需要一些特殊手段。</p><p>总之，整个小学期充满了混沌与错愕。带着这份混乱的思绪，我踏上了大三上学期的旅程。</p><hr><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><blockquote><p>遗留事项与新的起点</p></blockquote><p>首先，是解决一系列遗留事项，包括但不限于小学期课程论文、<a href="https://github.com/saiblo/saiblo-dev-tools"><code>saiblo-dev-tools</code></a>、<a href="https://github.com/UNIDY2002/THUInfo"><code>THUInfo</code></a>。接着，准备迎接新的课程，熟悉这些课程都在干什么，并配一些基本的环境。所有的课程实验均能在 Linux 系统下跑通，我很开心。此外，这学期进了组，所以也要有所跟进。这学期我还担任了科协智能体部副主席，需要准备这一届的智能体大赛。从选定策划到组织开发，还是有一波事情要做的。</p><p>虽然学期初往往有各种琐事，但一项一项处理，总能做完。</p><hr><h2 id="攀登"><a href="#攀登" class="headerlink" title="攀登"></a>攀登</h2><blockquote><p>课程作业、社工与大饼</p></blockquote><p>前两周草草了结一些事项之后，就正式进入学期的日常学习生活了。</p><p>在众多课程作业中，组成原理的存在感最强，每两周一个实验，隔段时间来个书面作业。相比之下，信号处理原理的存在感就比较弱，平时作业不用花费太多时间。编译原理的课程实验让我做起来最舒服，这门课我也比较喜欢。其他课程作业都很水。但当所有课程的作业相继出现时，一种紧张感也油然而生。</p><p>智能体比赛也是整个学期过程中一段不可忽视的旋律。今年的开发直接废弃了祖传的本地评测脚本，上真机测试，力求保证开发环境与线上环境的一致性。今年的播放器采用网页播放器，力求让选手可以直接在网站上进行操作，省去下载播放器的麻烦。此外，今年的调试工具也有了新的设计，选手理论上可以使用调试器进行本地调试。这些改变都很令人心动。</p><p>让我学期中充满热情与期待的还有许多大饼。THUInfo 计划进行一次 UI 的大升级，我们还有一位专业设计师。虽然这学期咕咕咕了，但寒假可以开干。我对 Saiblo 评测机也有一些新的构想，打算针对当前的问题进行一次重构，可以寒假到下学期开干……还有一系列大饼在此不加赘述。</p><p>整个学期中的感受就是，虽然各种事项很多，但有着明确的目标和动力，过程中也充满了正反馈，所以斗志昂扬，进展得也很顺利。</p><hr><h2 id="低谷"><a href="#低谷" class="headerlink" title="低谷"></a>低谷</h2><blockquote><p>停摆与恢复</p></blockquote><p>很快就迎来了<strong>奋战三星期</strong>的造机挑战。在造机过程中，其他事项全部停摆。临近验收时，还有几天的通宵工作。这项工作本身也很辛苦，过程中充满了疲惫。</p><p>可怕的事情在于停摆后的恢复。仔细数来，这三星期的停摆让我错过了很多，例如组里的工作、科协的开发。此外，在三星期之前，我的每项作业都能提前若干天完成。然而三星期之后，我感到了一种无数作业追着赶的压迫感。另外，还有一门网安考试摆在眼前。这段时间内，我也好久没有和女朋友见面了，想她。</p><p>那是一段充满压抑的日子。担忧、焦虑、失眠、疲惫纷纷袭来，仿佛要将我吞噬，拖入谷底。我只知道，只有不畏挫折，勇敢面对，才能挣脱迷雾。</p><p>也正是那段时间，我接触了 Celeste <del>（正好打折）</del>。可以说，它在一定程度上给了我力量。当我看着 Madeline 登上山顶时，内心也充满了决心。</p><hr><h2 id="挣脱"><a href="#挣脱" class="headerlink" title="挣脱"></a>挣脱</h2><blockquote><p>希望、振奋与期末</p></blockquote><p>十二月是本学期社工最后一个可以工作的时段。经过两三个月的打磨，智能体部的工作成果已经初现雏形，各方面的宣传工作也正紧锣密鼓地开展着。与去年鱼洋陷役同期工作进度相比，目前的进展是可喜的。</p><p>清空了眼前所有作业之后，我也顿时感到一身轻松，仿佛突然看到了天空与未来。这段多出的时间里，我可以做自己喜欢的事，学习喜欢的知识，准备期末的考试，眼前也浮现出了新的希望。</p><p>陈康老师在我们班的主体团日上进行了一次讲座。他提到，大家三星期的工作对自己的未来一点作用都没有。我顿时感觉自己像个小丑。当然，这次讲座也让我清楚，计算机系的职责与使命到底在哪里。至少芯片问题绝对轮不到计算机系的同学去解决。似乎这也很符合现代社会的分工原则。</p><p>这段日子也让我更加坚信，凡所经历，皆有意义。当然此处不进行举例。静心沉思之后，我也明白，之前的恐惧大多只是来自自己的内心。只要保持内心的平和，与自己和解，恐惧也将无处可逃。</p><p>一转眼就是期末了。我可以很得意地说，我将每门课的知识都学明白了，也确实收获了不少知识。无论最后结果如何，那都是可以接受的。</p><hr><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><blockquote><p>辞旧迎新</p></blockquote><p>2022 年已经到来。有人说，过去一年全世界都过得一般，所以也少有人展望新的一年。诚然，新的一年必将充满新的挑战，但我还是坚信，守得云开见月明，终能走向更美好的未来。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二下学期小结</title>
      <link href="/articles/summary-2-2/"/>
      <url>/articles/summary-2-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这个学期我过得整体来说还是挺快乐的，主要原因是自己课选得比较少<del>（把大物实验退了）</del>，课业压力小一些，也暂时没有科研压力，所以自己心态比较好。此外，女朋友的陪伴、好朋友的相助，也为我这学期保持乐观平稳的心态起到了很大的作用。</p><p>我不太能为这学期梳理出一条明确的主线<del>（或许是因为我这学期比较佛吧）</del>，所以请允许我用碎片化的方式讲一讲自己这学期都经历了些什么。</p><hr><h1 id="Saiblo"><a href="#Saiblo" class="headerlink" title="Saiblo"></a>Saiblo</h1><p>如果要概括这一个学期，<a href="https://www.saiblo.net/">Saiblo</a> 无疑会成为贯穿始终的主题。</p><h2 id="网页播放器开发"><a href="#网页播放器开发" class="headerlink" title="网页播放器开发"></a>网页播放器开发</h2><p>在开发日麻网页播放器的过程中，我对 H5 游戏的开发技术获得了较为直接的理解，并结识了 <a href="https://playcanvas.com/">PlayCanvas</a> 框架。<strong>这个框架与 Unity 有着相似的核心概念，且开发工具为网页应用，更轻量。它的产物能够更方便地与 Saiblo 对接。</strong>总之，这个框架有一系列优点，有潜力成为智能体 3D 网页播放器的首选开发框架。</p><p>为了能在测试站对网页播放器进行测试，Papersnake 整了个 WebDAV 共享目录。这一操作完美地解决了开发者在 Saiblo 上测试网页播放器的需求，也同时让我大开眼界，学到了很多。</p><p>开发网页播放器还需要处理与 Saiblo 平台对接的相关事宜。接口的设计和消息传递的方式都很好，只是缺个文档。我在摸索的过程中，顺便把它补好了。（这一定很符合奇主席的纲领吧x）</p><h2 id="前端新功能施工"><a href="#前端新功能施工" class="headerlink" title="前端新功能施工"></a>前端新功能施工</h2><p>我对 Vue 不是那么感兴趣，Saiblo 又恰恰是用 Vue 写的，所以我施工了两个智能体相关的前端需求后就溜了。</p><p>一个是，随着多人游戏入驻 Saiblo，<strong>多人游戏的快速人机对战</strong>也应有所支持。我对着代码一通魔改之后实现了功能，但引入了 bug，后来多亏 Papersnake 及时修好。</p><p>另一个是，智能体决赛需要现场抽奖，我施工了一个<strong>简单的抽奖页面</strong>，也包括一个简单的抽奖服务器。不过我把姓名的输入框放在了页面底部，引来了吐槽。</p><p>不过反正我对 Vue 不感兴趣，所以，溜了溜了（x</p><h2 id="接手评测端"><a href="#接手评测端" class="headerlink" title="接手评测端"></a>接手评测端</h2><p>我个人感觉 Saiblo 现在的评测有点难用，对开发者不够友好。为此，我决定接手评测端，对部分功能进行一些翻新操作。不过这项工作还没正式开始，应该会是我这个暑假的一个主要计划。</p><hr><h1 id="技能学习"><a href="#技能学习" class="headerlink" title="技能学习"></a>技能学习</h1><p>学习不局限于课内，也不由某个考核指标决定学习的效果。</p><h2 id="硬件编程"><a href="#硬件编程" class="headerlink" title="硬件编程"></a>硬件编程</h2><p>我这学期选修了数字逻辑设计，<strong>通过在 FPGA 上编写代码完成硬件设计，体会了硬件编程的奥秘</strong>。我和队友 scpointer 合作完成的是一个混音器的项目，个人感觉还不错，也挺有收获的。这让我对下学期计组大实验有了一些信心。<del>（不过感觉还是经常把硬件描述语言写得像软件串行代码。）</del></p><p>不过有一个地方让我不太理解。既然计组使用的是 Vivado 平台，为什么数字逻辑课程还是用 Quartus 呢？</p><h2 id="打破语言隔阂"><a href="#打破语言隔阂" class="headerlink" title="打破语言隔阂"></a>打破语言隔阂</h2><p>事情起源于我写日麻播放器的时候，想要在 JavaScript 前端代码中复用 C++ 逻辑代码。经过一番调研，我找到了 <a href="https://emscripten.org/">emscripten</a>。它能将 C++ 代码编译为某种可在浏览器中执行的 JavaScript 字节码，另一方面也用 C++ 实现了一个 JavaScript 运行时，从而能够<strong>实现 C++ 与 JavaScript 代码的互调用</strong>。当然，我只用到它在 JavaScript 环境中执行 C++ 代码的部分。</p><p>这让我明白了两件事。一个是<strong>两个不同语言之间的沟通是完全可行的</strong>，大致有预先编译和使用目标语言实现一个运行时两种途径。另一个是，当我想到 React Native 项目也是一个典型的跨语言交互的例子时，当我之后又看到 C++ 与 C#、Python之间相互转译的工具时，我意识到，所有主流语言之间，大概都有途径能够相互连通。这意味着，<strong>从理论层面上讲，所有主流语言之间都应当能相互交流</strong>。这一想法让我大受震撼。当然，这背后离不开编译理论的支持。</p><hr><h1 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h1><h2 id="尽力而为"><a href="#尽力而为" class="headerlink" title="尽力而为"></a>尽力而为</h2><p>互联网本身只能提供尽力而为的服务。上层应用无法突破网络不可靠的现实困境，只能在这一约束下，尽最大努力给出可靠的交付。</p><p>这学期的考试安排还是比较折磨的，要想保证每门课都冲着 100 分复习，对于我来说啊，应该是做不到的。不如尽力而为，也算是尽最大努力呈现出自己的最高水平了。</p><h2 id="图个乐子"><a href="#图个乐子" class="headerlink" title="图个乐子"></a>图个乐子</h2><p>大学生活不仅仅是肝各种作业和锅锅锅，还需要多图乐子。利用每周富余的时间，外出放松，陪一陪自己所珍视的人，或是休闲摸鱼，打一打鱼洋陷役，都是对生活有益的调剂。</p><h2 id="听从内心"><a href="#听从内心" class="headerlink" title="听从内心"></a>听从内心</h2><p>评估各个选项，做出抉择，有时是件很费神的事。精心权衡做出的选择，最终或许也会事与愿违。在这种情况下，听从直觉里最想要的选项，或者跟随命运的抉择，不要去计较得失，或许是更合适的策略。</p><hr><h1 id="迎接挑战"><a href="#迎接挑战" class="headerlink" title="迎接挑战"></a>迎接挑战</h1><p>大三秋季学期将是充满挑战的一个学期。</p><h2 id="课内学习"><a href="#课内学习" class="headerlink" title="课内学习"></a>课内学习</h2><p>我还没有考虑过下学期的选课，不过可以确定的是，我有<strong>《信号原理》《编译原理》《计算机组成原理》</strong>等课程要修。这些课可以说都不简单。</p><h2 id="科协工作"><a href="#科协工作" class="headerlink" title="科协工作"></a>科协工作</h2><p>下一年将是智能体大赛转型的重要一年，有很多工作要做。转型的结果会是什么样，我们可谓一无所知。<strong>智能体部下一年的工作本身就是不小的挑战</strong>。</p><h2 id="科研准备"><a href="#科研准备" class="headerlink" title="科研准备"></a>科研准备</h2><p>一转眼已经要到大三了，升学成为了不得不纳入考虑的问题。下学期我大概会找个实验室干活，为后续科研做做准备。</p><hr><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="每周主题复盘"><a href="#每周主题复盘" class="headerlink" title="每周主题复盘"></a>每周主题复盘</h2><table><thead><tr><th align="center">周数</th><th align="center">主题</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">决战</td><td align="center">举办鱼洋陷役决赛</td></tr><tr><td align="center">2</td><td align="center">速成</td><td align="center">速成网页游戏开发</td></tr><tr><td align="center">3</td><td align="center">新起点</td><td align="center">为播放器开发引入新模式</td></tr><tr><td align="center">4</td><td align="center">小试牛刀</td><td align="center">尝试使用 PlayCanvas 框架</td></tr><tr><td align="center">5</td><td align="center">全力出击</td><td align="center">集中精力开发日麻播放器</td></tr><tr><td align="center">6</td><td align="center">永无止境</td><td align="center">对前端美观的需求是永无止尽的</td></tr><tr><td align="center">7</td><td align="center">点亮数字人生</td><td align="center">初识硬件描述语言</td></tr><tr><td align="center">8</td><td align="center">蓄势待发</td><td align="center">进行一系列准备工作</td></tr><tr><td align="center">9</td><td align="center">测验</td><td align="center">期中考试</td></tr><tr><td align="center">10</td><td align="center">清算</td><td align="center">清理各类长短期作业</td></tr><tr><td align="center">11</td><td align="center">转变</td><td align="center">从图乐子状态转入肝作业状态</td></tr><tr><td align="center">12</td><td align="center">飞越悬岛</td><td align="center">举办智能体嘉年华</td></tr><tr><td align="center">13</td><td align="center">玩转 RIP</td><td align="center">完成网原课程实验二阶段</td></tr><tr><td align="center">14</td><td align="center">万马千军</td><td align="center">完成高性能课程实验</td></tr><tr><td align="center">15</td><td align="center">我们联合！</td><td align="center">完成网原课程实验三阶段、数设课程实验</td></tr><tr><td align="center">16</td><td align="center">时分复用</td><td align="center">同时应对多门课程的期末</td></tr><tr><td align="center">17</td><td align="center">决战</td><td align="center">期末考试</td></tr><tr><td align="center">18</td><td align="center">新起点</td><td align="center">科协招新，暑期开始</td></tr></tbody></table><h2 id="每学期核心收获复盘"><a href="#每学期核心收获复盘" class="headerlink" title="每学期核心收获复盘"></a>每学期核心收获复盘</h2><table><thead><tr><th align="center">学年学期</th><th align="center">核心收获</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">大一秋</td><td align="center">适应环境</td><td align="center">萌新入学，需要适应这个计算机系</td></tr><tr><td align="center">大一春</td><td align="center">寻找支点</td><td align="center">通过 THUInfo 收获了成就感</td></tr><tr><td align="center">大二秋</td><td align="center">磨砺意志</td><td align="center">整个学期挺压抑的，个人感觉挺磨人的</td></tr><tr><td align="center">大二春</td><td align="center">转变心态</td><td align="center">初步见到了更广阔的计算机系生活</td></tr></tbody></table><h2 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h2><ul><li>UNIDY 一直说要给这个网站备案，但一直咕咕咕。这一计划将于近期完成。</li><li>UNIDY 于寒假曾计划实现 <a href="http://localhost:4000/articles/summary-2-1/#UnTeX-UnTeX%E2%80%99s-not-TeX">UnTeX</a>（但当时咕咕咕了），这一计划因 <a href="https://github.com/Keldos-Li/typora-latex-theme">typora-latex-theme</a> 的推出而终止。</li><li>至这篇文章之前，UNIDY 的所有博文均不符合在中英文文本之间插入空格的规范。这一问题从本文开始得到解决。</li><li>至大二春季学期，UNIDY 的所有组队课程作业中，队友主体均为 UNIDY 当时完全不熟悉的同学。这一情形将从下学期开始改变。</li></ul><hr><p><img src="/images/sast-question.png" alt="现在你真的热爱着这个学科吗"></p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨平台fetch</title>
      <link href="/articles/cross-fetch/"/>
      <url>/articles/cross-fetch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>JavaScript与其说是一门语言，不如说是一套协议。<strong>只是各大宿主平台恰好都按照这一协议实现了对应的接口。</strong>至于怎么实现，ECMA委员会并不管，也管不了。所以JavaScript没有标准库。如果某个平台上的某个实现有问题，那也绝对是平台的特性，绝不可能甩锅给JavaScript。</p><p>这与Java的跨平台属性有着显著的不同。JVM提供了一个完全抽象的层次，开发者理论上不必关心同一段代码在不同平台上的表现问题。<strong>JavaScript则将这一责任移交给开发人员</strong>，各大宿主平台仿佛只是读代码的机器，读到一半很任性地抛给你一个<code>xxx is not implemented</code>都是意料之中的（没错，<a href="https://github.com/facebook/react-native/blob/master/Libraries/Blob/FileReader.js#L83">说的就是你</a>）。开发者需要自己进行兼容与缝合。</p><p>网络库就是一大坑——它天然与宿主平台相关。<strong>尽管有统一的<code>Fetch API</code>接口规范，但各大平台对<code>fetch</code>的实现情况都不尽理想。</strong><a href="https://www.npmjs.com/package/cross-fetch"><code>cross-fetch</code></a>是一个很优秀的库，它基本实现了node、browser和react-native三端统一的<code>fetch</code>功能，可惜它对不同字符集编码解析的跨平台支持有些无能为力。</p><p>针对这一问题，我在项目中基于<code>cross-fetch</code>定制了一个更加通用的<code>uFetch</code>，并在此加以记录。</p><hr><blockquote><p>Talk is cheap. Show me the code.</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">&quot;cross-fetch&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cookies</span>: &#123;[<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Clear the cookies.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">clearCookies</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(cookies).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> <span class="keyword">delete</span> cookies[key]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the response data from the given `url`, with a specified `referer` if</span></span><br><span class="line"><span class="comment"> * provided.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If param `post` is provided, a `POST` request with the given post form will</span></span><br><span class="line"><span class="comment"> * be sent. Otherwise, a `GET` request will be sent.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The `timeout` is `60000` by default, in milliseconds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> uFetch = <span class="keyword">async</span> (</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    referer?: <span class="built_in">string</span>,</span><br><span class="line">    post?: <span class="built_in">object</span> | <span class="built_in">string</span>,</span><br><span class="line">    timeout = <span class="number">60000</span>,</span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; =&gt; &#123;</span><br><span class="line">    <span class="comment">// Prepare request headers</span></span><br><span class="line">    <span class="keyword">const</span> defaultHeaders = &#123;</span><br><span class="line">        <span class="comment">// Setup content-type and user-agent</span></span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="variable constant_">CONTENT_TYPE_FORM</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="variable constant_">USER_AGENT</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> headersWithCookies = <span class="variable language_">global</span>.<span class="property">FileReader</span> === <span class="literal">undefined</span> ? &#123;</span><br><span class="line">        ...defaultHeaders,</span><br><span class="line">        <span class="comment">// Cookie should be manually set in Node.js</span></span><br><span class="line">        <span class="title class_">Cookie</span>: <span class="title class_">Object</span>.<span class="title function_">keys</span>(cookies).<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;cookies[key]&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&quot;;&quot;</span>),</span><br><span class="line">    &#125; : defaultHeaders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add referer to header if specified</span></span><br><span class="line">    <span class="keyword">const</span> headers =</span><br><span class="line">        referer === <span class="literal">undefined</span></span><br><span class="line">            ? headersWithCookies</span><br><span class="line">            : &#123;...headersWithCookies, <span class="title class_">Referer</span>: referer&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle timeout abortion</span></span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">    <span class="keyword">const</span> timeoutEvent = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        controller.<span class="title function_">abort</span>();</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">    <span class="keyword">const</span> defaultInit = &#123;</span><br><span class="line">        <span class="attr">headers</span>: headers,</span><br><span class="line">        <span class="attr">signal</span>: controller.<span class="property">signal</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Switch method to `POST` if post-body is provided</span></span><br><span class="line">    <span class="keyword">const</span> init =</span><br><span class="line">        post === <span class="literal">undefined</span></span><br><span class="line">            ? defaultInit</span><br><span class="line">            : &#123;</span><br><span class="line">                ...defaultInit,</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">                <span class="attr">body</span>: <span class="keyword">typeof</span> post === <span class="string">&quot;string&quot;</span> ? post : <span class="title function_">stringify</span>(post),</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Perform the network request</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, init);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Manage cookies</span></span><br><span class="line">        response.<span class="property">headers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key === <span class="string">&quot;set-cookie&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> segment = value.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">const</span> [item, val] = segment.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">                cookies[item] = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Detect charset based on content-type</span></span><br><span class="line">        <span class="keyword">const</span> contentType = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> base64 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> charset = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (contentType) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contentType.<span class="title function_">includes</span>(<span class="string">&quot;application/octet-stream&quot;</span>)) &#123;</span><br><span class="line">                base64 = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="regexp">/charset=(.*?);/</span>.<span class="title function_">test</span>(contentType + <span class="string">&quot;;&quot;</span>);</span><br><span class="line">                charset = <span class="title class_">RegExp</span>.<span class="property">$1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">global</span>.<span class="property">FileReader</span>) &#123;</span><br><span class="line">            <span class="comment">// For browser and react-native</span></span><br><span class="line">            <span class="keyword">const</span> blob = <span class="keyword">await</span> response.<span class="title function_">blob</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;((<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// Use FileReader to read blob data</span></span><br><span class="line">                <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">                reader.<span class="property">onloadend</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> reader.<span class="property">result</span> === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (base64) &#123;</span><br><span class="line">                            <span class="comment">// Simply return the string data with the MIME header removed</span></span><br><span class="line">                            <span class="title function_">resolve</span>(reader.<span class="property">result</span>.<span class="title function_">substr</span>(<span class="string">&quot;data:application/octet-stream;base64,&quot;</span>.<span class="property">length</span>));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// The value stored in `reader.result` has already been parsed with the correct encoding</span></span><br><span class="line">                            <span class="title function_">resolve</span>(reader.<span class="property">result</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// This should not happen</span></span><br><span class="line">                        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Blob parsing error.&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// Read and transform</span></span><br><span class="line">                <span class="keyword">if</span> (base64) &#123;</span><br><span class="line">                    reader.<span class="title function_">readAsDataURL</span>(blob);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reader.<span class="title function_">readAsText</span>(blob, charset);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// For node.js</span></span><br><span class="line">            <span class="keyword">const</span> arrayBuffer = <span class="keyword">await</span> response.<span class="title function_">arrayBuffer</span>();</span><br><span class="line">            <span class="comment">// Use iconv-lite to transform arrayBuffer into string</span></span><br><span class="line">            <span class="keyword">return</span> iconv.<span class="title function_">decode</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(arrayBuffer), charset);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// We have to clear the timeout</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeoutEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这份代码并没有太多不平凡的地方，交代几个细节即可。</p><h3 id="利用global-FileReader判断平台"><a href="#利用global-FileReader判断平台" class="headerlink" title="利用global.FileReader判断平台"></a>利用<code>global.FileReader</code>判断平台</h3><p>RN和浏览器环境实现了<code>FileReader</code>，Node.js没有，因此<code>global.FileReader === undefined</code>等价于平台为Node.js。</p><p>有两处需要用到这一判定。一是cookie相关。Node.js环境下开发者需要自己管理cookie，而浏览器和RN环境会自动进行管理。二是解析响应数据相关。RN环境没有实现将响应数据以<code>arrayBuffer</code>的形式加载——这对于使用指定编码解析数据的需求是致命的。因此，只能先取得<code>blob</code>形式的数据，再使用<code>FileReader</code>的<code>readAsText</code>方法进行解析。</p><h3 id="编码的判定"><a href="#编码的判定" class="headerlink" title="编码的判定"></a>编码的判定</h3><p>借助响应头的<code>Content-Type</code>字段进行判断。需要注意的是，如果<code>Content-Type</code>包含<code>application/octet-stream</code>，那么直接返回<code>blob</code>中的<code>base64</code>编码数据即可。</p><p>（最后，为啥我这网页的代码高亮又崩了hhh）</p>]]></content>
      
      
      <categories>
          
          <category> 代码控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二上学期小结</title>
      <link href="/articles/summary-2-1/"/>
      <url>/articles/summary-2-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这是我第一次这么晚写学期小结——甚至拖到了出分之后。这让我在构思这份小结的时候有些矛盾。熟悉我的人应该知道，我过去的这学期过得其实不太好。但出分之后，我在一些四学分的课程<del>（马原、大物）</del>上意外地收获了比预期高的成绩。因此从结果上看，过去这学期我过得也绝不差。</p><p><strong>细思之，或许本就不应该用好坏两极来评价过去的一学期。</strong>毕竟，采用不同的尺度，好坏的评价结果可能有着天壤之别。真正有意义的，大概是盘点一下，在这悲喜交织的一学期里，我到底收获了些什么吧。</p><hr><h1 id="成就"><a href="#成就" class="headerlink" title="成就"></a>成就</h1><h2 id="THUInfo"><a href="#THUInfo" class="headerlink" title="THUInfo"></a>THUInfo</h2><p>自国庆节正式在全平台发布<a href="https://github.com/THUInfo">THUInfo</a>以来，这款APP的总下载量已经破万，平均活跃用户已经破千，峰值（即查成绩那几天）活跃用户达到2000，截止目前已收到171条有效用户反馈。<strong>从数据上看，THUInfo是一款成功的APP，也是我这学期最具成就感的作品。</strong></p><p>写这款APP还给我带来了一些别的，比如我在软工课小组内负责移动端开发，直接选择了React Native作为框架，复用了不少THUInfo的代码，节省了大量上手时间。</p><p>此外，由于React Native背后是一个正在活跃生长的开源生态，我在项目中又用了很多开源库，因此我在各种修bug的过程中对GitHub的运用日益娴熟，并开始为开源生态做做自己的贡献。我给第三方JS库写过类型标注，反馈过bug，提过PR。虽然好些石沉大海，但我还是觉得这样的行为是颇有意义的。</p><hr><p>来点有意思的。<strong>我们于12月24日上线了图书馆座位插座情况显示的功能<del>（而据我所知，学校快到考试周结束了才官方支持这一功能）</del>，使用的是自己的免费LeanCloud服务</strong>，因此我也能顺便得到同学们在考试周对图书馆座位需求的变化情况。</p><p>下图记录的是考试周内每日访问选座页面的人次数。</p><p><img src="/images/lib-chart.png" alt="每日访问选座页面的人次数"></p><p><del>（顺便，是什么力量让贵九同学坚持到1月10日才考完……）</del></p><hr><h2 id="科协"><a href="#科协" class="headerlink" title="科协"></a>科协</h2><p>这学期，我在科协智能体部负责<a href="https://saiblo.net/game/6">鱼洋陷役</a>游戏播放器的开发，虽然工作过程很辛苦，让我在学期中获得了周日凌晨赶ddl的阴间作息——</p><p><img src="/images/yyxy-clown-is-myself.jpg" alt="小丑竟是我自己"></p><p>也让我明白了即使这样赶也还是会跟不上预期的进度，不如躺平了，等考<del>（kai）</del>完<del>（sai）</del>试<del>（hou）</del>再肝。</p><p><strong>不过也正是这样的经历，让我真切地体会到了进度把控的重要性；也正是在肝锅的过程中，让我结识了不错的朋友；也非常感谢给力的队友，帮忙做了不少开发工作。</strong></p><p>总之，这一学期在科协干活的经历，虽然多少有些阴间，但也十分值得。</p><blockquote><p><del>#引战 C#是什么辣鸡语言啊，大括号换行的都是异端，以后不用了……</del></p></blockquote><hr><h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><p>这学期我也从事了一些软件开发的工作，并且一度沉迷于让自己软件开发的流程自动化与现代化。这一点，我在THUInfo的开发和维护的过程中已经有了初步的实现。</p><p>不过，我后来对业界软件开发和维护的操作有了粗浅的了解，意识到自己现在对软件运维的认识还非常浅薄。</p><hr><h1 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h1><p>虽说上学期有了些许自己还算满意的成就，但细细想来，过去的半年里，低谷的时刻还是比较多。</p><p>感谢我的神仙女朋友，这一学期以来一直都陪着我，鼓励我。</p><p>“命比纸薄，心比天高。”马原邹广文老师在讲解人的灵与肉的冲突时，曾反复提到这一俗语。</p><p>套用这句话，<strong>力比纸薄，心比天高</strong>，或许就是我过去这半年的状态吧。</p><p>学期中，我想做的事有很多：完善THUInfo、做好播放器、好好听课、多去答疑坊服务、做点科研、多提几个PR、绩点苟住……到头来，这些事也没能全部实现。我不禁思考，过去这一学期到底发生了什么。</p><hr><h2 id="时间都去哪了"><a href="#时间都去哪了" class="headerlink" title="时间都去哪了"></a>时间都去哪了</h2><p>这是一个颇为重要的问题。在过去的这半年里，我似乎每天都在忙，但不知从何时起，事情开始做不完了。这让我很苦恼。</p><p>我后来复盘了一下，发现<strong>我学期中有几周，几乎所有空余时间都在用于写实验报告</strong>——包括周一的大物、模电、马原等课上——这让我后半学期这些课都没好好听。再兼之那段时间129活动的加成，我每周的时间规划开始恶性循环。也正是这一点，让我萌生了写一个能够快速生成漂亮实验报告的工具的想法。</p><hr><h2 id="什么样的事是有意义的"><a href="#什么样的事是有意义的" class="headerlink" title="什么样的事是有意义的"></a>什么样的事是有意义的</h2><p>对啊，什么呢？</p><p>绩点？应该是有一些意义的。毕竟绩点如果爆炸了，日子会很难过。但绩点也不是大学的全部。</p><p>开发一些实用软件？既然是实用导向，如果真的做成了，那也应该有一定的意义。不过这样的事意义也有限。</p><p>学一些新技术？提升自身技能储备，这个确实有长远的意义，不过注意不可赶一时之时髦而学。</p><p>为开源社区做贡献？这个应该也是有一定意义的，或许还能刷刷存在感。</p><p>拓展一些其他领域的兴趣爱好？这个自然也有其意义。</p><p>但回顾过去半年，我深刻地意识到，<strong>这一学期里我并没有做太多具备意义的事情，倒是在一些一两学分的课上折腾了太多</strong>。这让我一度很苦恼。</p><hr><h2 id="矛盾吗？"><a href="#矛盾吗？" class="headerlink" title="矛盾吗？"></a>矛盾吗？</h2><p>自然是矛盾的。<strong>想要做出点有意义的事，却又困于各种现实情形的束缚。</strong></p><p>但我又想起邹广文老师的“命比纸薄，心比天高”——人总是会面临灵与肉的冲突的，正是在这种冲突的情况下，如何选择才更为关键吧。<strong>我们或许身陷各种限制，但这不妨碍我们拥有更高的期待。</strong></p><p>也正是在过去的这一学期里，我明白了，要想实现某件事，有时不得不放弃些别的。关键在于取舍。不过我过去这一学期里放弃的睡眠时间比较多，这多少有些不健康，希望之后能有所改善。</p><hr><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p><del>没错，又到了立flag的时候了。</del></p><h2 id="UnTeX-UnTeX’s-not-TeX"><a href="#UnTeX-UnTeX’s-not-TeX" class="headerlink" title="UnTeX: UnTeX’s not TeX"></a>UnTeX: UnTeX’s not TeX</h2><p>受够了上学期用LaTeX写实验报告的经历，想着下学期还是躲不过实验报告的洗礼，遂决定做一个<strong>用着Markdown语法就能渲染出LaTeX风格实验报告的工具</strong>。</p><p>经过前期调研，我了解到Pandoc已经可以实现各种标记语言相互转化的基本功能。因此，<strong>我决定基于Pandoc进行一些定制，让它能够更好地适应书写实验报告的需求</strong>。</p><p>抄一下学期中定下的思路吧。</p><blockquote><p>基础目标：使用md写出TeX格式的实验报告</p><p>拓展目标：安装简便，易于学习，能够针对原生tikz作图的痛点进行优化</p><p>技术选型：基于pandoc提供的filter接口，采用类似中间件的形式，实现语义的拓展；为了便于安装，最好以单个可执行文件的形式生成产物，故应采用和原仓库一致的语言——Haskell——实现filter</p><p>可行性分析：此处略</p><p>功能亮点：能够更方便易学地实现各类作图</p><p>开发难点：对Haskell不熟悉</p><p>开发计划：</p><ul><li>学期中：佛系学Haskell</li><li>寒假：着手实现</li></ul></blockquote><p>不过现在寒假只剩一个月了，Haskell我还没开始学，不知道还能不能做成呢。</p><hr><h2 id="开源社区"><a href="#开源社区" class="headerlink" title="开源社区"></a>开源社区</h2><p>这一学期以来，我意识到给开源社区做贡献是一件有点意义的事情，毕竟你写的代码是可能真正流入千千万万同行的项目中的<del>（并且可能被更多人看到）</del>，而不是止于课程作业或是学校以内。</p><p>在过去的开发中，我和React Native框架打交道比较多，认为RN社区是个充满活力而蓬勃发展的。我打算之后进一步为RN社区做出自己的贡献<del>（先从写类型标注文件开始）</del>，甚至可以看看他们这段时间来正重点关注的<code>JSI</code>、<code>JSC</code>、<code>TurboModules</code>等更底层的问题，做点有意义的事。</p><hr><h2 id="志愿、社工与科研"><a href="#志愿、社工与科研" class="headerlink" title="志愿、社工与科研"></a>志愿、社工与科研</h2><p>上一学期，我个人忙碌的事情太多，答疑坊那里并没有输出太多精力，希望自己下学期能在答疑坊多做些志愿服务。</p><p>社工嘛，就是科协那边。上学期暴力摸了半年鱼，下学期打算真·摸鱼，要么去网络部转转，要么去联创转转，反正下学期不呆在智能体了（暴论</p><p>最后，上学期科研无果，下学期继续努力。</p><hr><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p><strong>英语文学中的中国形象</strong>真是一门好课，RW+文核+外语课，我这学期自己看了看培养方案完成情况才注意到。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见，Travis-CI！</title>
      <link href="/articles/goodbye-travis/"/>
      <url>/articles/goodbye-travis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>事情起源于这样一篇文章：<a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing">The new pricing model for travis-ci.com</a></p><p><strong>我横竖睡不着，仔细看了半夜，才从字缝里看出字来，满篇都写着两个字：“收费”。</strong></p><p>表面上，这篇文章写得很客气：我们的free plan转为credit模式啦，你有10K的免费credit，blah blah blah。可我仔细核算了一下，<strong>这10K的额度，至多够我的项目苟3天</strong>。付费计划又显然太贵。因此，<strong>我亟需找到一个新的免费CI平台</strong>。</p><p>我将目光转向GitHub Actions。</p><hr><p>用了GitHub Actions后，我最大的感受是：<strong>真香</strong>。</p><ul><li>GitHub<strong>原生支持</strong>，上传artifacts，生成release，<strong>均可丝滑地实现</strong>；</li><li>开源社区<strong>提供大量即插即用式的Action</strong>，<strong>构建workflow非常灵活</strong>；</li><li><strong>充分发挥自己的想象力，还能完成更多功能</strong>（我打算整一个自动化的Release文案编写，甚至触发<a href="https://thuinfo.github.io/">thuinfo.github.io</a>的更新）。</li></ul><p>此外，GitHub Actions相比于Travis-CI，生命周期的设计更为简明，不过我目前Git Actions用得也不多，暂时无法充分评价其优劣。</p><p>还有一点发现：<strong>GitHub Actions的机器性能似乎优于Travis-CI的</strong>。在Travis-CI上，一次MacOS的构建需要30分钟，但在GitHub Actions上只需约10分钟——再也不要心焦地等MacOS的构建结果了。</p><p>Travis-CI的open-ssl也一直成谜——<strong>对同一个文件，使用相同的秘钥，本地解密和Travis的机器上解密的结果居然不一样</strong>。我当初配Travis-CI时，这一步折腾了好久。在GitHub Actions上全无此类问题。</p><p>……</p><p>想吐槽Travis的或许还有一些吧，暂时可能想不起来，但有一点感慨是确定的：</p><p><strong>为啥我不早点使用GitHub Actions呢 [问号脸] [问号脸]</strong></p><hr><p>在GitHub Actions之外，我还摸到了一个好东西：App Center。它是微软提供的应用测试托管平台，其中自动化真机测试服务是要钱的，但只是托管自己的应用程序则完全免费。</p><p>App Center也有相应的GitHub Actions支持，同样即插即用，体验极佳。因此，<strong>我决定使用App Center托管THUInfo的Android安装包，自动化部署的事也就顺带搞定了</strong>。</p><hr><p>摸爬滚打一天多，总算把THUInfo的CI&#x2F;CD从Travis-CI迁移到了GitHub Actions。如果要问我有什么想说的，那就是：</p><p><strong>微软NB！</strong></p><hr><p>附：配GitHub Actions的过程中参考了这篇超棒的博客——<a href="https://blog.usejournal.com/automate-react-native-builds-with-github-actions-af54212d26dc">Automate React Native builds with GitHub Actions</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一下学期小结</title>
      <link href="/articles/summary-1-2/"/>
      <url>/articles/summary-1-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>我怕不是上了个假大学……</p><span id="more"></span><p>众所周知，由于新冠疫情，我们不得不在家完成本学期的学业。在这一特殊的学期里，又有哪些值得分享的内容呢？<del>就让小编带大家来看一看吧！</del></p><hr><h1 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h1><h2 id="课程考核方式"><a href="#课程考核方式" class="headerlink" title="课程考核方式"></a>课程考核方式</h2><p>考核方式的变化可谓是大家最关心的，不少基础课程都因疫情做出了相应的调整。最主要的调整方式是<strong>取消期中考试，增加平时和期末的比重</strong>。比如我这学期选的李列明老师的大物课，甚至将期末比重调整为90%，<del>一个学期的分全靠最后两天挣。</del></p><p>体育课的考核方式变化最大，因为不少项目必须在学校进行测试。然而大家最终还是没等到返校，于是这些项目索性取消。</p><p>考核方式的变化也体现在<strong>最终期末考试的形式</strong>上。例如网上监考，一场微积分需要一台电脑和两部手机。高代则为了减轻监考难度，干脆开卷考试。其他课程则大多推迟到返校后考试，<del>这样就有两个月的充足预习时间了。</del>此外，我也听说改用大作业作为期末考核依据的课程。</p><p>不过，至于为什么考核方式会变成这样，我认为根源在于我们都带着学期结束前总能返校的期待，因此暂时进行不了的考核也不过推迟几周而已。没想到最后……假如我们早已做好一学期不返校的思想准备，或许一切基本还能如常。（当然我也不希望再有第二个这样的学期了。）</p><p><del>（以及为啥隔壁可以有那么多改P&#x2F;F的课……感觉好气啊……？）</del></p><h2 id="学习体验"><a href="#学习体验" class="headerlink" title="学习体验"></a>学习体验</h2><p>从我个人感觉来看，<strong>线上与线下的学习效果不见得有多么显著的差异</strong>。线上教学的好处就是环境更宽松一些，师生互动也多一些，有的课还能提供回放。不好的地方就是容易分心，而且不稳定的网络也可能带来负面影响。况且，如果说线上教学容易翘课或不听，难道线下课就没有这样的情况嘛（</p><p>线上教学倒是还有一个弊端，就是同学间的交流不那么方便了。比如想算法、找bug，当然还是面对面交流来得简单。又比如讲数学题，在屏幕上打字的体验也远不及现场演算。</p><h2 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h2><p>这学期的很多无法线上组织的活动都消失了，但也有不少顽强地存活了下来。比如一年一度的<strong>智能体大赛</strong>，以及**<code>THUAI</code>人工智能比赛**，由于对场地毫无要求，均得以正常举行。</p><p>活动场地对<strong>集体锻炼</strong>造成了极大的制约，原本一周三次的集体锻炼精简为一周一次线上集体锻炼和一次自主锻炼。不过集体锻炼最终还是坚持了下来，挺不容易的。</p><p><strong>此外，这学期一次锅都没吃成，遗憾。</strong></p><h2 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h2><p>毕业有关的内容都是我道听途说的只言片语。简而言之，今年的疫情和国际形势，对大三大四的学长带来了一定的挑战。虽然自己离毕业还很远，但了解一些也并没有什么坏处。</p><hr><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="THUInfo"><a href="#THUInfo" class="headerlink" title="THUInfo"></a>THUInfo</h2><p>这一学期，<a href="https://github.com/UNIDY2002/THUInfo">THUInfo</a>成了我个人的一大主题。整个项目从今年年初开始做，使用<code>Android+Kotlin</code>，花了一个寒假做出了第一个发布版（代码量其实堪比一个小学期了）。</p><p>最初的计划是，等寒假结束开学的时候推广一波。然而这开学的消息等了一个学期都没来，因此我也一直没能找到机会推广。</p><p>不过后来想想，这也未尝不是好事。<strong>毕竟第一个发布版还有诸多缺陷，这次疫情正好给了我更多时间加以完善。</strong>此外，到目前为止，THUInfo还不支持iOS，因此干脆再花一个暑假将它迁移到跨平台。</p><p>（虽然只能暂时告别最喜欢的<code>Kotlin</code>，而且<code>React Native</code>上手还有很多坑……）</p><p>在做这个APP的过程中，我也学到了很多东西，比如模拟登录和抓取网页的技术，数据库的使用，以及邮箱协议等。我还学到了很多设计理念和模式，代码能力也得到了一定程度的提高。总之，我认为整个过程还是挺值得的。</p><h2 id="Get-TsinghuaX"><a href="#Get-TsinghuaX" class="headerlink" title="Get-TsinghuaX"></a>Get-TsinghuaX</h2><p>带着THUInfo的劲头，我顺手做了个爬取学校慕课网字幕的<a href="https://github.com/UNIDY2002/Get-TsinghuaX">脚本</a>。</p><p>这个项目的灵感来源于上学期思修慕课考试，我写了个简单的字幕搜索脚本。不过当时字幕是我听慕课的时候手动下载下来的，这一次我打算加上自动下载的功能。</p><p>慕课网还是比Info网好爬得多，小半天就写好了核心功能，然后再封装成命令行交互界面，就好用了。唯一的缺陷就是模拟登录没弄好——我一直没看明白它是怎么登录的，所以只能用cookies登录，不太方便。</p><h2 id="K-plus-plus"><a href="#K-plus-plus" class="headerlink" title="K-plus-plus"></a>K-plus-plus</h2><p>最初的想法是在<code>C++</code>中写一个<a href="https://github.com/UNIDY2002/K-plus-plus"><code>Kotlin</code>标准库</a>，顺便练习练习有关知识。不过很明显，自己的水平还不够。而且，需要在一门不带<code>GC</code>的语言中实现自动管理内存，可是当时竟没想到智能指针，第一步就走错了。所以，这个项目也暂时放弃维护了。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h2><p>没错，就是这个博客。不过这学期也确实太忙了，这个博客几乎没添什么新内容，上学期总结时立的flag怕不是一条都没实现（</p><p>不知道接下来一学期会怎样呢。</p><h2 id="服务器与域名"><a href="#服务器与域名" class="headerlink" title="服务器与域名"></a>服务器与域名</h2><p>这件事说起来真的难受。</p><p>寒假的时候买了个<a href="https://unidy.cn/">域名</a>，买的时候就像逛淘宝一样方便，可是到手了实名认证却一直过不去。这太糟糕了。</p><p>我猜测可能的原因是，户口迁移到北京后，身份证上原本登记的住址过时了。因此我打算开学后回北京换个新的身份证。没想到……</p><p>然后没有域名的话服务器的能力也就比较有限了，因此就搁置了租服务器的计划。</p><p>那THUInfo的后端咋搞呢？<del>（首先，THUInfo目前没啥后端。）</del>鉴于目前主要的业务需求是统计一下用户手机的版本号，再加上bug反馈，我就把后端托付给<code>LeanCloud</code>来完成。<del>（况且现在不是流行所谓的Serverless么……）</del>目前来看也没啥问题。</p><p>不过感觉域名和服务器的问题迟早是要解决的。等开学吧……</p><hr><h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>最后说点感受吧。</p><p>这个学期一下新开了三个repo，再加上这个博客，明显感觉忙不过来。自己写项目的水平确乎有了一点点提升，但最终持续维护的其实也只有THUInfo，而且现在<a href="https://ashitemaru.github.io/">Ashitemaru</a>也在帮忙。感觉以后不太会开太多新坑了（谁知道呢）。</p><p>此外，选择可能是我这学期的另一个小主题。在这一学期，我开始面临一系列小的选择：历史选什么书，是否报名小教员，智能体大赛还是<code>THUAI</code>，还是好好过一个五一假期，要不要参与一次习题课分享，是否加入一个实验室项目，在答疑坊投入多少精力，在期末论文上又分别投入多少精力……这些选择其实都比较平凡，也比较容易处理，但至少让我意识到，<strong>未来的路不是线性往前的，并不只有唯一的终点</strong>，还是要靠自己摸索下去啊。</p><p>然后就是感觉疫情为平时不好好学习的我们留了个缓冲区。感觉学得不行的科目可以退掉，如果返校后考试的话还可以利用暑假重新做人。以后可就没有这么好的机会了。</p><p>不过，还是再给点建议吧。</p><ul><li>五一是提前完成一些ddl的好时机（虽然我自己并没有抓住这个时机）。</li><li>智能体大赛初赛还是提交一波好了，说不定你就进32强了呢，然后也能捞到点课程加分（虽然我也没提交）。</li></ul><p>最后，希望疫情早日结束，希望我们能够早日回到美丽的清华园。</p><p>希望未来的日子里一切都好。</p><h2 id="附：本学年所选文素课一览"><a href="#附：本学年所选文素课一览" class="headerlink" title="附：本学年所选文素课一览"></a>附：本学年所选文素课一览</h2><table><thead><tr><th align="center">选课学期</th><th align="center">课程名称</th><th align="center">授课老师</th><th align="center">课程类型</th><th align="center">考核方式</th></tr></thead><tbody><tr><td align="center">秋</td><td align="center">计算机系统研讨</td><td align="center">陈文光</td><td align="center">文核</td><td align="center">P&#x2F;F</td></tr><tr><td align="center">秋</td><td align="center">文化素质教育讲座（1）</td><td align="center">——</td><td align="center">文核</td><td align="center">P&#x2F;F</td></tr><tr><td align="center">春</td><td align="center">英语文学中的中国形象</td><td align="center">孙赛茵</td><td align="center">RW+文核+外语</td><td align="center">论文</td></tr><tr><td align="center">春</td><td align="center">实验室科研探究（1）</td><td align="center">——</td><td align="center">文核</td><td align="center">P&#x2F;F</td></tr></tbody></table><p>（不知不觉文核都快被我选满了……）</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于#include我想说的</title>
      <link href="/articles/include/"/>
      <url>/articles/include/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>本文首发于<a href="https://github.com/thunlp/OOP-THU/issues/39">github.com&#x2F;thunlp&#x2F;OOP-THU&#x2F;issues&#x2F;39</a></p></blockquote><p><code>#include</code><strong>其实并不是一个非常聪明的机制</strong>——直接全文复制，也不管包含了多少用不着的代码；你也不甚清楚你包含的代码中有什么牛鬼蛇神，会不会碰巧撞上了<code>math.h</code>中的<code>y1</code>；假如处理不当，还可能惹来重复定义等令人头秃的麻烦……</p><p>在此，我列举一些初次深入了解<code>#include</code>时可能遇到的困扰，并加以说明。</p><hr><h1 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h1><p>事情开始于这样的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;B.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    B b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;A.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    A *a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;A.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Do your thing...</span></span><br></pre></td></tr></table></figure><p>我们在类<code>A</code>中设置了<code>B</code>类型的成员变量，因此需要<code>#include &quot;B.h&quot;</code>。<strong>然而，出于某种需求，我们还希望在类<code>B</code>中保留对应的<code>A</code>的指针，因此还需<code>#include &quot;A.h&quot;</code>。</strong>看起来顺理成章。</p><p>可是，当我们编译时，g++报了错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B.h:6:5:error: &#x27;A&#x27; does not name a type</span><br><span class="line">     A *a;</span><br><span class="line">     ^</span><br></pre></td></tr></table></figure><p>是在<code>B.h</code>中报了找不到类型<code>A</code>的错。</p><p><strong>奇怪，我们明明在<code>B.h</code>中包含了<code>A.h</code>啊……</strong></p><hr><h2 id="探因"><a href="#探因" class="headerlink" title="探因"></a>探因</h2><p>我们将目光聚焦到<code>A.h</code>上——原来，<code>A.h</code>标上了<code>#pragma once</code>。也就是说，假如<code>A.h</code>之前已经被包含过了，那么这次就不会再包含它了。<strong>再一看<code>main.cpp</code>，确实，<code>A.h</code>早已被包含过了。</strong></p><p><strong>破案了！</strong></p><p>好，我们将<code>A.h</code>中的<code>#pragma once</code>去掉总行了吧？还不行，这次又报找不到类型<code>B</code>了。</p><p>那就把<code>B.h</code>中的<code>#pragma once</code>也去掉吧……停下来！不然那编译器的报错……太美……</p><p>不过，至此，这背后的原因已可见端倪——**套娃<code>include</code>**。C++的<code>include</code>最忌讳的就是套娃了。如果不加<code>#pragma once</code>等处理，则头文件就会永无止境地包含下去；如果加了，那你写代码时可能以为自己<code>include</code>过了，实际上却被编译器拦下了。</p><p><strong>总之，这种循环包含的行为是不可取的，在实际编程中应当避免。</strong></p><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>那么，应当如何修改代码，才能既满足需求，又不出现套娃的现象呢？</p><p><strong>在动手之前，先想想，是否真的需要在<code>B</code>中保留<code>A</code>的指针。</strong>因为，这种情况的发生，很有可能意味着你的代码设计时<strong>耦合度有些高</strong>，才会剪不断理还乱。如果能重新设计代码，让<code>B</code>干脆不依赖<code>A</code>，那是最好的。</p><p>不过，如果这一需求不可避免呢？那也有办法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>;  <span class="comment">// 声明类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    A *a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们在<code>B.h</code>中不去<code>#include &quot;A.h&quot;</code>，而是<strong>声明<code>class A</code>，供<code>B</code>使用</strong>，具体的细节则在<code>A.h</code>中给出。这样，既免去了循环包含，又能够在类<code>B</code>中用到类<code>A</code>。</p><p>至此，“套娃”的问题暂告一段落。下面，再简单提一下<code>#pragma once</code>和<code>#ifndef...</code>的事。</p><hr><h1 id="重复定义"><a href="#重复定义" class="headerlink" title="重复定义"></a>重复定义</h1><p>我们知道，在C++中，对同一个名称，<strong>声明可以多次，但定义只能一次</strong>。为此，我们需要引入一些保证单次包含的机制，来防止因多次包含同一头文件而造成的重复定义。</p><p><code>#pragma once</code>和<code>#ifndef...</code>的用法，在课件上都有写到。这里，对使用过程中可能遇到的疑惑和误区简单说明一下。</p><h2 id="ifndef-XXX含义的理解"><a href="#ifndef-XXX含义的理解" class="headerlink" title="#ifndef XXX含义的理解"></a><code>#ifndef XXX</code>含义的理解</h2><p><code>#ifndef XXX</code>和<code>#endif</code>配套，可以理解为<code>if not defined XXX</code>，则……，<code>end if</code>。而在解析……所示的代码之前，需要先<code>#define XXX</code>，从而下次解析到这一头文件时，因为宏定义过<code>XXX</code>了，<code>ifndef</code>条件不满足，就不再解析……部分的代码了，从而保证了单次包含。</p><h2 id="ifndef-XXX插入的位置"><a href="#ifndef-XXX插入的位置" class="headerlink" title="#ifndef XXX插入的位置"></a><code>#ifndef XXX</code>插入的位置</h2><p>合理的使用方法，应当是<code>#ifndef XXX</code>和<code>#define XXX</code>置于文件的开头而<code>#endif</code>置于文件的末尾，这样才能保证整个文件只被包含一次。</p><p>我之前见到过这样的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __HEADER__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HEADER__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这就违背<strong>保证整个文件只被包含一次</strong>的初衷了。假如这一头文件被包含多次，那也会造成<code>Test</code>的重复定义。</p><p>（当然，我个人以为出现这样的错误也与课件上只给了用法没给示例有关。）</p><h2 id="pragma-once和-ifndef-的区别"><a href="#pragma-once和-ifndef-的区别" class="headerlink" title="#pragma once和#ifndef...的区别"></a><code>#pragma once</code>和<code>#ifndef...</code>的区别</h2><p><code>#pragma once</code>可以<strong>简单快捷地</strong>保证物理上的这一文件只被包含一次，不过缺点在于一些编译器可能不支持。（当然，越来越多的编译器已经支持这一功能了。）</p><p><code>#ifndef XXX</code>则是从代码层面保证单次包含，且类似写法可以在其它场合有一些灵活的运用。缺点在于<strong>你需要保证不同头文件的<code>XXX</code>不要撞车</strong>，否则也会导致预期之外的结果。（当然，许多IDE会为新建的<code>.h</code>文件自动加上<code>#ifndef...</code>等语句，可以省去不少麻烦。）</p><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>读到这里，或许你对<code>#include</code>的机制<del>更加不理解了</del>还有一些困惑。也许，你很想亲自看到，编译器对这些带#的语句到底做了些什么。</p><p>这时，<strong>我们来了解一下g++的预编译指令</strong>。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -E main.cpp -o main.i</span><br></pre></td></tr></table></figure><p><code>-E</code>表示当前的任务是对<code>main.cpp</code>进行预编译。预编译的一个任务就是将这些带#的宏命令进行处理，比如<code>#include</code>的内容会在预编译时展开。这时，你就能看到那些头文件到底是谁先谁后了。</p>]]></content>
      
      
      <categories>
          
          <category> 代码控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THUInfo踩坑记录（一）</title>
      <link href="/articles/thui-a-1/"/>
      <url>/articles/thui-a-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>去年年底，我开始着手写<a href="https://github.com/UNIDY2002/THUInfo">THUInfo</a>。经过一个多月的磕磕绊绊，我也总算是做出了一点东西——虽然我也知道，这距离一个成熟的APP还有很长一段距离，更何况我也只做出了Android版本。</p><p>眼瞅着就要进入常规的学习状态了，各门课的老师未见其人，已见其任务，THUInfo的开发可以暂缓一段时间了。回顾这一个多月，编程水平不见得有多少提升，<strong>奇怪的知识倒是增加了不少</strong>。我觉得自己有必要将一些内容记录下来，即使没人看，也算是帮助自己温故而知新吧。<del>（实则突然找到可以写成博客的素材了）</del></p><hr><p><strong>我毕竟刚刚接触Android，很多认识也都停留在表面，没有太多接触源码的东西，因此我现阶段写下的内容，只管能用就行。</strong></p><p>第一部分，我打算写点当前少有教程提到的内容：页面导航（<code>Navigation</code>），以及可配套食用的顶部工具栏（<code>Toolbar</code>）、底部导航栏（<code>BottomNavigationView</code>）和侧边抽屉（<code>DrawerLayout</code>）。</p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p><code>Navigation</code>能做什么？</p><p><strong>我们经常需要处理页面之间的切换。</strong>以<code>THUInfo</code>为例，主页、动态、计划之间的切换就是基本操作。幸而，Google于2018年推出<code>Android Jetpack</code>，其中的<code>Navigation</code>模块可以帮助开发者<strong>使用少量代码轻松地实现这一需求</strong>。</p><p><strong>此外，我们的需求往往不止于三四个根页面之间的切换。</strong>例如，在主页页面之下，我们还要有教室资源、消费查询等子页面。<strong>并且，我们还希望，在这些子页面中，返回键能够得到正确的处理（即回到上级页面），屏幕左上角也要相应地设置一个虚拟的返回按钮。</strong>而这些需求，借助<code>Navigation</code>，均可轻松得到实现。</p><p>那么，<code>Navigation</code>到底是怎么一回事呢？<code>Navigation</code>最基本的思路就是，<strong>设定一个容器<code>fragment</code><strong>（注：新版<code>Navigation</code>推荐使用<code>FragmentContainerView</code>，不过我还没研究），</strong>将其标记为宿主（<code>NavHostFragment</code>），由<code>NavController</code>进行管理。实际运用时如要切换页面，只需替换掉该<code>fragment</code>填充的内容即可。</strong>此外，<code>NavController</code>切换页面时，会自动维护返回栈，从而可进一步实现返回键的处理。</p><p>从设计理念上讲，通过<code>Navigation</code>可以将不同的页面借助<code>fragment</code>进行关联，而无需创建更多的<code>activity</code>——这也符合了“一个APP只用一个<code>activity</code>”的理念。</p><hr><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="懒人模式"><a href="#懒人模式" class="headerlink" title="懒人模式"></a>懒人模式</h2><p>在<code>New Project</code>中选择<code>Bottom Navigation Activity</code>作为模板就可以了。</p><p>不过，看例程有可能看得云里雾里的，而且如果想把它迁移到已有项目中也要费一番周折，<strong>所以下面我来对其中的关键步骤进行分解，谈谈如何具体操作。</strong></p><h2 id="自己动手"><a href="#自己动手" class="headerlink" title="自己动手"></a>自己动手</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="添加Gradle依赖"><a href="#添加Gradle依赖" class="headerlink" title="添加Gradle依赖"></a>添加Gradle依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// For Java</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.navigation:navigation-fragment:2.2.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.navigation:navigation-ui:2.2.1&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// For Kotlin</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.navigation:navigation-fragment-ktx:2.2.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.navigation:navigation-ui-ktx:2.2.1&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="创建第一个页面"><a href="#创建第一个页面" class="headerlink" title="创建第一个页面"></a>创建第一个页面</h4><p>IDE为我们提供了图形化操作界面，可以帮助我们轻松创建一个页面。</p><p>在<code>res</code>下新建<code>navigation</code>目录，右击，新建一个<code>Navigation Resource File</code>（<code>root</code>为<code>navigation</code>），然后你应该会看见类似这样的代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/mobile_navigation&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着，进入<code>Design</code>或<code>Split</code>视图，你应该能看见<code>Click [icon] to add a destination</code>。点击它所指示的图标，你会看见<code>Create new destination</code>。点击，IDE会弹出<code>New Android Component</code>对话框。</p><p>在<code>Fragment Name</code>一栏中，填好相应的名称，例如<code>HomeFragment</code>。假如命名合理规范，下面的<code>Fragment Layout Name</code>一栏也会相应地变化，例如变成<code>fragment_home</code>。接下来，<code>Create layout XML?</code>勾上，<code>Include fragment factory methods?</code>不用勾，这样后续可以省很多事。</p><p>创建完成后，这一个导航文件的内容也会发生一些变化。你可以对它进行一些调整，例如<code>android:label</code>表示该<code>fragment</code>显示给用户的名称，可以根据需要改成其它值。</p><p>除此之外，你应该能在<code>res/layout</code>目录下发现多了一个<code>.xml</code>布局文件，你可以稍后对它进行修改。</p><p>而在代码部分，你应该会发现，多出了一个继承自<code>Fragment</code>的自定义类（可能是<code>HomeFragment</code>）。这个类将会负责管理你所创建的这个页面的生命周期。比如，你会重载<code>onStart</code>方法，从而设定这个页面启动时的行为。</p><hr><h4 id="设置导航菜单"><a href="#设置导航菜单" class="headerlink" title="设置导航菜单"></a>设置导航菜单</h4><p>在<code>res</code>下新建<code>menu</code>目录，在<code>menu</code>目录下创建一个<code>bottom_nav_menu.xml</code>（文件名随意，这里加<code>bottom</code>为了与之后的侧边抽屉区分）。里面的内容大概长这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/homeFragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_home_black_24dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;@string/title_home&quot;</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我觉得已经非常直白了，就不再赘述了。</p><p><strong>不过有一点，貌似这儿的<code>id</code>要和你在<code>navigation</code>文件中对应页面的<code>id</code>保持一致。</strong></p><hr><h4 id="去掉默认标题栏"><a href="#去掉默认标题栏" class="headerlink" title="去掉默认标题栏"></a>去掉默认标题栏</h4><p>Google为Android应用提供了默认的标题栏，但实践表明，预设的标题栏太丑了，且难以定制。因此，我们先要将其去掉，以便后面设置更加灵活的<code>Toolbar</code>。</p><p>方法很简单，找到<code>res/values/styles.xml</code>，将<code>AppTheme</code>的<code>parent</code>改成<code>Theme.AppCompat.Light.NoActionBar</code>即可。</p><p>接着，为设置<code>Toolbar</code>稍作准备，设置一下<code>Toolbar</code>的主题样式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">&quot;ToolbarTheme&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;colorControlNormal&quot;</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:textColorPrimary&quot;</span>&gt;</span>@android:color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">&quot;android:background&quot;</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>colorControlNormal</code>和<code>android:textColorPrimary</code>分别是工具栏按钮和标题文字的颜色，至于是<code>white</code>还是<code>black</code>取决于背景色。</p><hr><h4 id="添加宿主容器"><a href="#添加宿主容器" class="headerlink" title="添加宿主容器"></a>添加宿主容器</h4><p>我们一般会选择一个“模板页面”，腾出一块地方安排宿主容器。例如，在<code>THUInfo</code>中，我就将宿主容器放到了主页面<code>activity_main.xml</code>中（注意不是“主页”，“主页”“动态”“计划”是平行的三个模块）。</p><p>你的布局文件大概会像这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;?attr/actionBarSize&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">&quot;@style/ToolbarTheme&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_host_fragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/activity_vertical_margin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@id/toolbar&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@id/bottom_nav_view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/mobile_navigation&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/bottom_nav_view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;?android:attr/windowBackground&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:menu</span>=<span class="string">&quot;@menu/bottom_nav_menu&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>稍微提几点。</p><ul><li>第16行，<code>fragment</code>的<code>id</code>，会在之后指定<code>NavController</code>时用到。</li><li>第17行，作用在于将该<code>fragment</code>标记为宿主。</li><li>第19行，Google的例程有点问题，在<code>ConstraintLayout</code>下会自动填满整个屏幕。我把它改成了<code>0dp</code>，这样可以指定它竖直方向填充的上下限。</li><li>第21行，将其设定为<code>defaultNavHost</code>，这样<code>NavController</code>在处理返回键时，就能知道，是在对这一个<code>NavHost</code>进行操作。</li><li>第24行，指定该宿主执行相应<code>navGraph</code>中页面的切换。</li><li>第32行，将<code>menu</code>设置为刚刚设好的导航菜单。</li></ul><p>至此，准备工作已经就绪，下面就可以看代码了。</p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> appBarConfiguration: AppBarConfiguration</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> navController: NavController</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> toolbar: Toolbar</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> topLevelDestinationIds = setOf(R.id.homeFragment, R.id.newsFragment, R.id.scheduleFragment)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        toolbar = findViewById(R.id.toolbar)</span><br><span class="line">        setSupportActionBar(toolbar)</span><br><span class="line"></span><br><span class="line">        navController = findNavController(R.id.nav_host_fragment)</span><br><span class="line">        appBarConfiguration = AppBarConfiguration(topLevelDestinationIds)</span><br><span class="line">        setupActionBarWithNavController(navController, appBarConfiguration)</span><br><span class="line">        findViewById&lt;BottomNavigationView&gt;(R.id.bottom_nav_view).setupWithNavController(navController)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>（有机会整一个<code>Kotlin</code>的语法高亮……IDE里面五彩斑斓的，搬到网页上就全是黑的了……）</del></p><ul><li>第7行，将它们作为<code>top level destinations</code>拎出来，既能突出其特殊地位，也方便<code>NavController</code>进行处理。</li><li>第13、14行，设置<code>Toolbar</code>。</li><li>第16行，获取<code>NavController</code>。<strong>关于<code>findNavController</code>有一个注意点，后面再说。</strong></li><li>第17、18行，将<code>NavController</code>与标题栏（这里是<code>toolbar</code>）进行绑定。</li><li>第19行，将<code>NavController</code>与底部导航栏进行绑定。</li></ul><p>现在，假如一切顺利的话，程序应该就能跑起来了。</p><hr><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><p>讲到这里，我们已经可以在若干个<code>top level destination</code>之间进行切换了。<strong>不过，要在不同层级的页面之间进行切换，又该如何操作呢？</strong></p><p>这就需要用到<code>NavController</code>的<code>navigate</code>方法了。</p><p><strong><code>navigate</code>方法的签名如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">navigate</span><span class="params">(<span class="type">int</span> resId)</span></span><br></pre></td></tr></table></figure><p>它的一个作用是，提供一个目标的<code>resId</code>，从而让该<code>NavController</code>实例切换至这个目标。</p><p>这里有两个问题：目标的<code>resId</code>如何提供，以及<code>NavController</code>实例如何找到。</p><hr><h2 id="目标的resId如何提供？"><a href="#目标的resId如何提供？" class="headerlink" title="目标的resId如何提供？"></a>目标的<code>resId</code>如何提供？</h2><p>具体手法上与<a href="#%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2">#创建第一个页面</a>的操作类似，<code>resId</code>就是你所创建的对应页面的<code>id</code>，在此不再细讲。</p><h2 id="NavController实例如何找到？"><a href="#NavController实例如何找到？" class="headerlink" title="NavController实例如何找到？"></a><code>NavController</code>实例如何找到？</h2><p>在上面的示例代码中，我使用了<code>findNavController</code>方法来获取<code>NavController</code>实例。但仔细观察后，我们发现，这里的<code>findNavController</code>是<code>Activity</code>类的一个拓展方法。<strong>那么，当我们已经在某一个<code>fragment</code>中时，又该如何获取到<code>NavController</code>实例呢？</strong></p><p>这时，我们看到，<code>NavHostFragment</code>下也有一个<code>findNavController</code>方法。它的签名如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> NavController <span class="title function_">findNavController</span><span class="params">(Fragment fragment)</span></span><br></pre></td></tr></table></figure><p>具体而言，提供一个<code>fragment</code>，它会沿着这个<code>fragment</code>的<code>parent chain</code>，一直找到其对应的<code>NavController</code>。因此，在实际应用中，代码一般长这样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wentu_btn.setOnClickListener &#123;</span><br><span class="line">    NavHostFragment.findNavController(<span class="keyword">this</span>).navigate(R.id.wentuFragment)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>this</code>指代的是代码所处的<code>HomeFragment</code>类。</p><p>当然，方法不止这一种。我们同样可以用<code>Fragment</code>的<code>getActivity</code>方法，先获取到对应的<code>Activity</code>，再调用<code>Activity</code>的<code>findNavController</code>方法。不过这样就需要在<code>fragment</code>中用到宿主<code>fragment</code>的<code>id</code>，我个人认为这样写不利于降低模块间的耦合度。</p><hr><h2 id="处理虚拟返回键"><a href="#处理虚拟返回键" class="headerlink" title="处理虚拟返回键"></a>处理虚拟返回键</h2><p>有了<code>NavController</code>，我们发现，物理的返回键已经能够得到正确的处理，即返回上级页面。<strong>然而，屏幕左上角的虚拟返回键却丝毫没有响应。这是为什么呢？</strong></p><p>其实，这也不是什么怪事。<code>NavController</code>的文档中已经指出：</p><blockquote><p>You are responsible for calling <code>NavController.navigateUp</code> to handle the Navigation button.<br>Typically this is done in <code>AppCompatActivity.onSupportNavigateUp</code>.</p></blockquote><p>因此，我们需要自己重写<code>onSupportNavigateUp</code>方法。于是，我们回到<code>MainActivity</code>中，加上这样一行代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span></span> = navController.navigateUp(appBarConfiguration)</span><br></pre></td></tr></table></figure><p>简简单单的一句话，就能顺利解决问题。我想，这背后的魔力，就在于<code>NavController</code>的各种优秀的方法（例如这里的<code>navigateUp</code>）。</p><hr><h1 id="侧边抽屉"><a href="#侧边抽屉" class="headerlink" title="侧边抽屉"></a>侧边抽屉</h1><p>这里，同样也有懒人模式……在<code>New Project</code>中找到<code>Navigation Drawer Activity</code>就好了。</p><p>不过，鉴于我们需要将抽屉直接引入当前的项目，我们最好还是手动进行整合。</p><hr><h2 id="调整布局"><a href="#调整布局" class="headerlink" title="调整布局"></a>调整布局</h2><p>我们先来回顾一下<code>THUInfo</code>的抽屉。</p><p><img src="/articles/thui-a-1/drawer.png" alt="THUInfo抽屉布局"></p><p>有两个部分。上面是一个渐变色背景的<code>headerLayout</code>，下面是<code>menu</code>。</p><hr><h3 id="headerLayout"><a href="#headerLayout" class="headerlink" title="headerLayout"></a><code>headerLayout</code></h3><p>如何画出一个渐变色的背景，并不是我们的重点。可以直接看Google的例程，也可以直接看<code>THUI</code>的源代码（<a href="https://github.com/UNIDY2002/THUInfo/blob/master/app/src/main/res/layout/nav_header_main.xml">前景</a>、<a href="https://github.com/UNIDY2002/THUInfo/blob/master/app/src/main/res/drawable/side_nav_bar.xml">背景</a>）。</p><h3 id="menu"><a href="#menu" class="headerlink" title="menu"></a><code>menu</code></h3><p>与<a href="#%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95">#设置导航菜单</a>中的操作类似，不过要创建一个新的<code>menu</code>文件，比如说<code>side_nav_menu.xml</code>。而且还更简单，因为这里不需要设置<code>icon</code>了。</p><hr><h3 id="修改布局文件"><a href="#修改布局文件" class="headerlink" title="修改布局文件"></a>修改布局文件</h3><p>这里，我们就要对<code>activity_main.xml</code>大动干戈了。</p><p>其实改动也不大，主要是在外面套一层<code>DrawerLayout</code>，再添加一个<code>NavigationView</code>。</p><p>改完之后大概长这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:openDrawer</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Identical code omitted --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/side_nav_view&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">&quot;start&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:headerLayout</span>=<span class="string">&quot;@layout/nav_header_main&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:menu</span>=<span class="string">&quot;@menu/side_nav_menu&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基本上还是比较直白的，没有多少可说的。有一点，就是Google的例程上有两处<code>android:fitsSystemWindows=&quot;true&quot;</code>。有没有这句话的区别，这里主要体现在，程序进行绘制时是否算进系统顶部的透明状态栏。</p><hr><h2 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h2><p>下面，就是修改源代码了。主要有两处要改。</p><p>第一处，是将<code>appBarConfiguration = AppBarConfiguration(topLevelDestinationIds)</code>改成<code>appBarConfiguration = AppBarConfiguration(topLevelDestinationIds, findViewById(R.id.drawer_layout))</code>，从而将这一<code>DrawerLayout</code>绑定进去。</p><p>第二处，是要处理抽屉里的选项的点击指令。这里，我通过重写<code>onCreateOptionsMenu</code>方法来实现。（这一块我也没弄清楚为什么要在这里重载。）</p><p>具体而言：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    side_nav_view.setNavigationItemSelectedListener &#123;</span><br><span class="line">        <span class="keyword">when</span> (it.itemId) &#123;</span><br><span class="line">            <span class="comment">// Do something</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>// Do something</code>的部分对点击的选项进行处理。其中，<code>itemId</code>为刚刚添加的<code>menu</code>的项目对应的<code>id</code>。</p><hr><p>到此为止，运行程序，我们已经可以通过<code>Navigation</code>实现页面之间的切换，并能够配合<code>Toolbar</code>、<code>BottomNavigationView</code>和<code>DrawerLayout</code>一起食用。最后，我想关于定制<code>Toolbar</code>做一点补充。</p><h1 id="定制Toolbar"><a href="#定制Toolbar" class="headerlink" title="定制Toolbar"></a>定制<code>Toolbar</code></h1><p>在实际应用中，我们有时会希望<code>Toolbar</code>的标题文字和按钮图标能够动态地改变。这又该如何实现呢？</p><hr><h2 id="动态设置标题文字"><a href="#动态设置标题文字" class="headerlink" title="动态设置标题文字"></a>动态设置标题文字</h2><p>以<code>THUInfo</code>为例，在查询教室资源时，当用户进入了具体的教学楼页面（例如“六教”），标题栏也相应地变成了“六教”。<a href="https://github.com/UNIDY2002/THUInfo/blob/master/app/src/main/java/com/unidy2002/thuinfo/ui/home/ClassroomTableFragment.kt">代码</a>其实很简单：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(activity <span class="keyword">as</span>? AppCompatActivity)?.supportActionBar?.title = <span class="string">&quot;&#123;Your Title&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>此处，先获得<code>fragment</code>所在的<code>activity</code>，并将其转化为<code>AppCompatActivity</code>，因为<code>getSupportActionBar</code>是<code>AppCompatActivity</code>的方法。得到了<code>supportActionBar</code>后，获取到<code>title</code>，我们就可以动态地进行设置了。</p><hr><h2 id="动态设置按钮图标"><a href="#动态设置按钮图标" class="headerlink" title="动态设置按钮图标"></a>动态设置按钮图标</h2><p>在<code>THUInfo</code>中，当收到新邮件时，左上角的按钮图标会变成带小红点的三道杠。这又是如何实现的呢？</p><p>首先，我们当然是要先准备好新图标。<strong>这里比较重要的是，图标的大小要调整好，比如设置成24dp*24dp，因为<code>Toolbar</code>貌似不会对图标进行自动缩放。</strong></p><p>代码跟上面差不多，得到<code>supportActionBar</code>之后，设置<code>navigationIcon</code>属性，即可实现。</p><p>当然，这有点暴力修改的意味在里面。因此，要想显得不那么暴力，需要考虑一些问题。最主要的，就是设置<code>navigationIcon</code>的过程是一瞬间完成的，中间的过渡动画就没有了。</p><p>还有两个小问题。</p><ol><li><p>每30秒重新获取一次未读邮件情况，相应地也要刷新一下左上角的图标。然而，**我忘了还要判断当前页面是否为<code>top level destiniation</code>**，导致的结果是，明明左上角应该是一个返回键，突然就变成带小红点的三道杠了。<br>看一下修改之后的代码片段：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navController.currentDestination?.id <span class="keyword">in</span> topLevelDestinationIds) &#123;</span><br><span class="line">    <span class="comment">// Update badge</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然而，仅仅每30秒刷新一次显然不够——当用户重新来到<code>top level destination</code>时，也应刷新一次。这时，我们就要监听<code>NavController</code>的目标变化了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">navController.addOnDestinationChangedListener &#123; _, destination, _ -&gt;</span><br><span class="line">    <span class="keyword">if</span> (destination.id <span class="keyword">in</span> topLevelDestinationIds) refreshBadge()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><del>（所以，为什么不自己做一个<code>Toolbar</code>呢）</del></p><p><code>THUInfo</code>中处理小红点的<a href="https://github.com/UNIDY2002/THUInfo/blob/master/app/src/main/java/com/unidy2002/thuinfo/MainActivity.kt">详细代码</a>在<code>MainActivity.kt</code>中。</p><hr><p>好了，感觉自己也写了不少了，也算是把整个<code>Navigation</code>的来龙去脉都简单地梳理了一遍。</p><p>既然……我也不太会写结束语，那就，先这样结束吧~</p>]]></content>
      
      
      <categories>
          
          <category> 代码控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>30分钟入门PyCharm</title>
      <link href="/articles/intro-to-pycharm/"/>
      <url>/articles/intro-to-pycharm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><style>    .scrollblock{        position: relative;        margin: 0;        width: 100%;        padding-top: 50px;        padding-bottom: 50px;        text-align: center;    }    .block-welcome {        background-color: white;        color: black;    }    .block-welcome h1 {        font-size: 40px;    }    .block-welcome h2 {        font-size: 27px;    }    .block-welcome p {        font-size: 14px;        margin-top: 32px;        margin-bottom: 32px;    }    .block-setup{        background-color: #348FD4;        color: #06406C;        font-size: 13px;    }    .block-setup h1 {        font-size: 36px;    }    .block-setup a.simple {        color: lightblue !important;    }    .block-setup a.big {        color: white !important;        font-size: 22px;        font-weight: normal;        font-style: normal;        background-color: #06406c;        padding: 10px 15px !important;        margin: 8px !important;        border-radius: 10px;        text-decoration: none;        line-height: 70px !important;    }    .block-setup a.big:hover,    .block-setup a.big:focus {        border-bottom: none !important;        background-color: #003466 !important;    }    .block-setup a.normal {        color: white !important;        font-size: 15px;        font-weight: normal;        font-style: normal;        background-color: #FF4081;        padding: 8px 12px !important;        margin: 6px !important;        border-radius: 10px;        text-decoration: none;        line-height: 46px !important;    }    .block-setup a.normal:hover,    .block-setup a.normal:focus {        border-bottom: none !important;        background-color: #ff80ab !important;    }    .mdui-dialog-setup {        padding-top: 40px !important;        padding-bottom: 40px !important;        overflow-y: scroll;    }    .mdui-dialog-setup h3 {        font-size: 28px !important;    }    .mdui-dialog-setup h4{        font-size: 24px !important;    }    .mdui-dialog-setup p {        font-size:15px !important;        background-color: white !important;        line-height: 22px !important;    }    .mdui-dialog-setup small {        font-size: 12px !important;        color: gray !important;        line-height: 20px !important;    }    .block-config {        background-color: #FFC19F !important;        color: black !important;    }    .block-config h2 {        color: #CC4037 !important;        font-size: 25px;    }    .block-config h3 {        color: #CC4037 !important;        font-size: 20px;    }    .block-config code {        background-color: #ffb584 !important;        color: black !important;    }    .block-try {        background-color: black;        color: white;        font-size: 16px;        line-height: 30px !important;    }    .block-try h2 {        font-size: 32px !important;    }    .block-try code {        color: black !important;        margin: 6px !important;    }    .block-white {        font-size: 16px;        line-height: 30px !important;    }    .block-coding {        font-size: 15px;        background-color: #4C0D09;        color: #D3B2AF;    }    .block-coding code {        background-color: #6d4c41 !important;        color: black !important;        margin: 6px;    }    .block-coding .gutter pre {        color: #D3B2AF !important;        text-align: right !important;        /*font-family: consolas, monospace !important;*/    }    .block-coding .code pre {        text-align: left !important;        /*font-family: consolas, monospace !important;*/    }    .block-coding table {        margin-left: calc(50% - 131px) !important;    }    code {        /*font-family: consolas, monospace !important;*/    }    .block-DIY {        font-size: 16px;        background-color: #FFF8C9;        color: #615400;    }    .block-DIY code {        background-color: black !important;        color: white !important;    }    .block-DIY a.simple {        color: #21add4 !important;    }    .block-TabNine {        background-color: #CC4037 !important;        color: #4C0D09 !important;        font-size: 16px !important;    }    .block-TabNine code {        background-color: black !important;        color: white !important;    }    .block-TabNine code.big {        font-size: 22px !important;        line-height: 38px !important;    }    .block-TabNine a {        color: #ff501f !important;    }    .block-ending {        background-color: #FFC19F;        color: #CC4037;    }    .block-ending code {        background-color: #ffb584 !important;        color: black !important;    }    .block-ending p {        font-size:18px !important;        line-height: 28px !important;    }</style><div class="scrollblock block-welcome">    <h1>30分钟入门PyCharm</h1>    <h2>JetBrains家产品的配置根本不用怕</h2>    <p>        作者：UNIDY<br>        设计灵感来源：<a href="https://www.runoob.com/manual/git-guide/" target="_blank">https://www.runoob.com/manual/git-guide/</a><br>        实际入门时间可能与下载和安装速度有关<br>        如果遇到困难，欢迎在评论区指出<br>        帮我一起改进这份教程~<br>        <small>尚未进行网页的移动端适配（可能这辈子也不会做了……）</small>    </p>    <img src="/articles/intro-to-pycharm/arrow.png" alt></div><div class="scrollblock block-setup">    <h1>准备工作……</h1>    <p>        <a href="https://download.jetbrains.8686c.com/python/pycharm-community-2019.3.3.exe" target="_blank" class="big" onClick="alert('重要的事情说三遍：\n如果之前没装过Java环境，那么\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n（我在下一版块还会提醒你的。）\n（假如安装时没这个选项就不用管了）');">PyCharm <i class="fa fa-windows"></i></a>        <a href="javascript:" mdui-dialog="{target: '#setup-Windows'}" class="big">Python <i class="fa fa-windows"></i></a><br>        <a href="https://download.jetbrains.8686c.com/python/pycharm-community-2019.3.3.dmg" target="_blank" class="big" onClick="alert('重要的事情说三遍：\n如果之前没装过Java环境，那么\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n（我在下一版块还会提醒你的。）\n（假如安装时没这个选项就不用管了）');">PyCharm <i class="fa fa-apple"></i></a>        <a href="javascript:" mdui-dialog="{target: '#setup-Mac'}" class="big">Python <i class="fa fa-apple"></i></a><br>        <a href="https://download.jetbrains.8686c.com/python/pycharm-community-2019.3.3.tar.gz" target="_blank" class="big">PyCharm <i class="fa fa-linux"></i></a>        <a href="javascript:" mdui-dialog="{target: '#setup-Linux'}" class="big">Python <i class="fa fa-linux"></i></a>    <p>PyCharm和Python都要准备好，两者可同时下载<br>    <a href="javascript:" class="simple" mdui-dialog="{target: '#setup'}">我是CS专业的学生</a></p>    <div class="mdui-dialog mdui-dialog-setup" id="setup" style="display: none; top: 61px; height: 488px;">      <h3>你可以选择使用PyCharm专业版</h3>      <p><a href="/articles/intro-to-pycharm/features.png" target="_blank">按需选择——功能比较</a></p>      <p>PyCharm专业版是付费产品，但对学生免费<br>      如果你之前没有申请过JetBrains学生账号<br>      <a href="https://www.jetbrains.com/shop/eform/students" target="_blank">点击链接申请</a></p>      <p>        PyCharm专业版下载链接（不含Python）<br>        <a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2019.3.3.exe" target="_blank" class="normal" onClick="alert('重要的事情说三遍：\n如果之前没装过Java环境，那么\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n（我在下一版块还会提醒你的。）\n（假如安装时没这个选项就不用管了）');"><i class="fa fa-windows"></i></a>        <a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2019.3.3.dmg" target="_blank" class="normal" onClick="alert('重要的事情说三遍：\n如果之前没装过Java环境，那么\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n安装PyCharm时记得勾选Download and install JRE x86 by JetBrains\n（我在下一版块还会提醒你的。）\n（假如安装时没这个选项就不用管了）');"><i class="fa fa-apple"></i></a>        <a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2019.3.3.tar.gz" target="_blank" class="normal"><i class="fa fa-linux"></i></a><br>        你也可以选择回退到教程页面，继续下载PyCharm社区版      </p>    </div>    <div class="mdui-dialog mdui-dialog-setup" id="setup-Windows" style="display: none; top: 61px; height: 488px;">       <h3>请先确认电脑上是否安装过Python</h3>       <p>如果已经装有Python 3，就不用再安装了<br>       如果没有印象，那多半是没装过，请继续往下看</p>       <h4>你是Windows 10用户吗？</h4>       <p>那太好了！打开cmd（<a href="javascript:" onClick="alert('同时按住Windows徽标键和R键\n跳出“运行”提示框\n输入cmd确定即可')">如何打开？</a>），输入命令<code>python</code><br>       应该会跳出Microsoft Store，一键安装即可<br>       <small>cmd上打印出了Python的版本信息……？嘿，你明明已经安装过了！<br>       不过假如真这样，检查一下版本号，如果<code><3.5</code><br>       那还是要手动进入Microsoft Store，或使用下面的安装包，重装一下最新版哦~</small></p>       <h4>emm……好像并不是诶……</h4>       <p>没关系，我帮你准备好了<a href="https://www.python.org/ftp/python/3.8.1/python-3.8.1-amd64.exe">安装包</a>，手动安装也不难~<br>       安装时选中<code>Add Python 3.8 to PATH</code>，Install Now即可~</p>    </div>    <div class="mdui-dialog mdui-dialog-setup" id="setup-Mac" style="display: none; top: 61px; height: 488px;">       <h4>别急……先打开Mac终端</h4>       <p><code style="font-size:22px">$ python --version</code></p>       <p><small>等一等……终端是啥……<br>       莫慌！直接往下找到方案二，使用传统方式安装即可</small></p>       <p>如果打印出的版本号<code>≥3.5</code><br>       就代表你的Mac上已有版本合适的Python，不用再安装了<br>       否则，请继续往下看</p>       <h3>方案一：Homebrew快捷通道</h3>       <p>如果之前没有用过Homebrew，参见<a href="https://brew.sh/" target="_blank">官网</a><br>       找到Install Homebrew，把那串指令复制到终端中</p>       <p>Homebrew安装好后，输入指令<br>       <code>$ brew install python</code><br>       如果一切顺利，那么就大功告成啦~</p>       <h3>方案二：传统通道</h3>       <p>感觉这波操作好复杂？<br>       别紧张！<br>       我帮你准备好了<a href="https://www.python.org/ftp/python/3.8.1/python-3.8.1-macosx10.9.pkg">安装包</a>，使用传统方式安装即可~</p>    </div>    <div class="mdui-dialog mdui-dialog-setup" id="setup-Linux" style="display: none; top: 61px; height: 488px;">       <p>先留个坑</p>       <p>等我实测过了再回来补</p>    </div></div><div class="scrollblock block-config">    <h2>初始化PyCharm</h2>    <p>（假如有这个选项的话）别忘了安装PyCharm时要勾选<code>Download and install JRE x86 by JetBrains</code>哦~</p>    <p>PyCharm安装完成后是配置环节<br>    此处先按默认来，因为后面还可以改</p>    <h3>Import Settings</h3>    <p>选择<code>Do not import settings</code>即可</p>    <h3>Customize PyCharm</h3>    <p>左下角选择<code>Skip Remaining and Set Defaults</code>即可</p>    <h3>[专业版用户] PyCharm License Activation</h3>    <p>在<code>JetBrains Account</code>通道下<br>    输入申请学生账号用的邮箱和相应的JetBrains密码</p></div><div class="scrollblock block-try">    <h2>Hello, world!</h2>    <p>在电脑中选好一个位置，以后专门放PyCharm的项目</p>    <p>回到PyCharm<br>    点击<code>Create New Project</code><br>    在最上面<code>Location</code>一栏中<br>    填入你选好的位置<br>    并在后面加上<code>/项目名称</code><br>    例如：<br>    <code>D:/PyCharm-Projects/Hello-world</code><br>    初次使用先别急着<code>Create</code>，继续往下看</p></div><div class="scrollblock block-white">    <p>展开<code>Project Interpreter</code><br>    选择<code>New environment using Virtualenv</code><br>    这里的<code>Location</code>字段不用动<br>    点开<code>Base interpreter</code>一栏的下拉列表<br>    选择版本最新的那个<br>    然后就可以<code>Create</code>啦~</p></div><div class="scrollblock block-coding">    <h3>等PyCharm准备好之后</h3>    <p>在左侧你会看到项目文件管理窗口<br>    （虽然现在什么文件也没有）<br>    找到主文件夹（例如<code>Hello-world</code>）<br>    右击，<code>New->Python File</code><br>    （不要点成别的类型的File了）<br>    输入你想要的文件名</p>    <p>文件打开后，将下面的代码粘贴进去</p>    <figure class="highlight python">        <table>            <tr>                <td class="gutter">                    <pre><span class="line">1</span><br><span class="line">2</span></pre>                </td>                <td class="code">                    <pre><span class="line"><span class="built_in">print</span>(<span class="string">'Hello, world!'</span>)</span><br><span class="line"></span><br></pre>                </td>            </tr>        </table>    </figure>    <p style="font-size:18px; line-height: 28px">按下组合键：<br>    （ <i class="fa fa-windows"></i> / <i class="fa fa-linux"></i> ）<code>Ctrl+Shift+F10</code><br>    （ <i class="fa fa-apple"></i> ）<code>⌃⇧R</code><br>    （或在上方菜单栏中找到<code>Run->Run</code>）<br>    你就能在下方看到输出的<code>Hello, world!</code>啦~</p></div><div class="scrollblock block-DIY">    <h1>DIY时间到！</h1>    <p>以下两部分非必须<br>    所以不计入那30分钟（23333</p>    <p>左上角找到<br>    <code>File->Settings->Editor->Font</code><br>    右边第一个<code>Font</code>是英文字体，推荐Consolas<br>    <code>Fallback font</code>是非英文字体，挑个自己喜欢的<br>    （也都只是推荐，具体怎么调，完全由你而定）</p>    <p>然后回到左边，找到<code>Color Scheme->Python</code><br>    快乐的调色环节完全由你掌控！<br></p></div><div class="scrollblock block-TabNine">    <p>调色完成后，回到左边，收起<code>Editor</code><br>    然后进入<code>Plugins</code>，搜索<code>TabNine</code><br>    <code>Install</code>这款超棒的智能补全插件<br>    让它助你一臂之力吧！</p>    <p>不过需要注意的是<br>    TabNine的深度学习功能只有30天的试用期<br>    好在专业版目前免费<br>    TabNine安装完成后，<a href="https://tabnine.com/beta_signup" target="_blank">点击链接</a>申请专业版<br>    你会收到一封含有注册码的邮件</p>    <p>回到PyCharm<br>    在任一打开的代码文件的任一位置直接输入<br>    <code class="big">TabNine::config</code><br>    （不要复制粘贴）<br>    在跳出的页面中，找到<code>Activation key</code>一栏<br>    粘贴入注册码即可~</p></div><div class="scrollblock block-ending">    <h2>还想说的是……</h2>    <p>创建、移动、复制、粘贴、重命名、删除文件<br>    <strong>都在左侧的项目文件管理窗口中进行</strong><br>    其中，<strong>重命名和删除在<code>Refactor</code>下找</strong><br>    假如一不小心把那个窗口关掉了<br>    双击File...Edit...下面一排的路径条就能召唤回来~</p>    <h1>最后的最后，牢记这个快捷键</h1>    <h2>（ <i class="fa fa-windows"></i> / <i class="fa fa-linux"></i> ）<code>Ctrl+Alt+L</code><br>    （ <i class="fa fa-apple"></i> ）<code>⌘⌥L</code></h2>    <p>它可以帮你整理代码<br>    增强代码可读性</p>    <p>不过，由于Python的缩进风格<br>    <strong>建议每一行前的空格数自己调整好</strong><br>    以防PyCharm整理代码时出现意外<br>    （不过万一真出意外了，撤销回去就好~）</p></div><div class="scrollblock">    <h2>如果想学习更多Python的知识</h2>    <h3>欢迎查看我写的快速入门教程！</h3>    <p>然而并没有这种东西……</p>    <h3>所以……推荐另一个网站吧</h3>    <p><a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank">https://www.runoob.com/python3/python3-tutorial.html</a></p>    <p>也欢迎在评论区指出这份教程可以改进的地方<br>    或者对这个页面的直男配色提出合理化建议</p>    <p>最后，再次……</p>    <h3>祝学习愉快~</h3></div>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyCharm </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大一上学期小结</title>
      <link href="/articles/summary-1-1/"/>
      <url>/articles/summary-1-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>也希望能扫除一点弯路吧……</p><span id="more"></span><p>在贵系也算是度过了半年时光了，第一学期总是有着很多复杂的经历和感受。当然，具体的想法我应该不太会在这里写。我主要是想记录一些这半个学期来踩过的坑，按时间顺序排列一下。</p><hr><h1 id="入学"><a href="#入学" class="headerlink" title="入学"></a>入学</h1><h2 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h2><p>我认为最关键的一点：<strong>开学时真的真的真的少带点东西</strong>，三个礼拜军训用得到的就够了，不然整理内务简直是人间地狱。缺的东西可以等军训完了再补。</p><p>军理是开卷考试，倒也没多难，不过上课的时候最好大概听一点，至少知道讲的东西在哪里，不然找起来也挺费事的。大多数课在课前会给出思考题，如果给答案的话可以稍微记一记。</p><p>然后是军事技能，如果<strong>真的</strong>想冲刺满绩的话，一条路是可以考虑当排副（虽然这个好像不是自己能决定的），另一条路是报名国旗班。但是国旗班很辛苦，而且应该是需要你牺牲大量休息时间的。</p><p><strong>大部分人都是会选择正常训练的，这样基本都是3.6，表现好一点也可以4.0，女生的话给分会更慷慨一些。</strong>而且军事技能只有2学分，拿个3.6也不算心疼。</p><p>当然，如果你确实这方面不适合，或是身体协调能力较差，或是不擅长学习新动作什么的，或是表现得不积极，也可能拿到3.3，假如这样应该会挺心疼的。不过总之……2学分真的不必太在意（虽然辅导员应该都会强调要认真对待，但自己或许真的就做不好呢）。</p><p>透露一下我的成绩吧——我就是那个军事技能B的，4.0+3.3，查到成绩后也郁闷了一小会儿。</p><p><strong>军训苦不苦？</strong>我不太好说，因为我这一届是比较松的，但往届都挺严的，以后怎么样我也不知道。</p><hr><h2 id="秋学期选课"><a href="#秋学期选课" class="headerlink" title="秋学期选课"></a>秋学期选课</h2><p>（据说零字班开始培养方案又要调整了？）</p><p>具体的课怎么样我不打算在这里说，稍微笼统地写几点。</p><p><strong>建议的操作：</strong></p><ul><li>基本按照培养方案走，<strong>要求的课都选好，最好不要留到高年级。</strong></li><li><strong>小赌怡情，大赌伤身</strong>，把握好度。</li><li>微积分和线代这种公共课，可以试着选比较热门的老师，<strong>但如果是七八百中一百的那种课，要么别冲了，要冲就留好充足的预案（并且预案的变动不要太大……不要过分相信你补退选时的手速……）</strong>。</li><li>不过话说回来，这些课只要不选特别劝退的老师<del>（可以了解一下微积分W）</del>，<strong>毕竟第一学期最后的考卷基本上是统考的</strong>，所以应该不会有太大事。</li><li><strong>体育课是可以多选的</strong>，当然最后至多只会中一门，但掉课的概率小了。</li><li>如果想多选点课，可以选一到两门<strong>评价比较好的</strong>文素课，或者一些<strong>比较nice的新生研讨课</strong>。</li></ul><p><strong>需要当心的操作：</strong></p><ul><li>“体育还能留到大二大三再选吧？”<strong>由于体育课的特殊性，不要产生这种想法。</strong>（以后选的话貌似只能选重补修体育了……？反正我没试过……）</li><li>“或许可以选选高年级的课？”先确保自己这些课的先修知识没啥缺的。<strong>以及，如果想提前选的课是高年级的全校公共课程的话，其实大一选是比较吃亏的，因为比较好的老师都已经被高年级同学抢掉了。</strong>所以如果没有充足的把握，最好不要这样操作。</li><li>“课表好空啊，要不要再加点课？”这个因人而异，<strong>不过，对于大多数同学而言，27及以上学分已经算是比较累的了。而且后期可能会遇到各种各样的锅，所以课表不要太满。</strong></li><li>“<strong>计算机科学导论</strong>是个啥课呀？”不出意外，导员应该会推荐这门课。（不过估计这门课依然不在培养方案中……？）这门课的内容确实挺有启发意义的，但考试可能比较硬。<strong>如果你实力足够，那自然可以放心大胆地选；不过如果比较虚，也可以中期记P&#x2F;F的时候考虑一下</strong>；但假如真的怂了，那……也可以不选（反正这些知识高年级都会具体讲的）。</li></ul><p><strong>二级选课是个啥？</strong></p><p>其实大一上没多少需要二级选课的，主要是这两种情况：</p><ul><li>报名了<strong>游泳测试</strong>的，需要二级选课确定测试时间；</li><li>一些<strong>文素课</strong>需要二级选课确定具体选听的课次。</li></ul><p>二级选课实行先到先得的原则，所以有可能也需要蹲点抢课。</p><p><strong>一般情况下，微积分、线代不需要二级选课，请自行忽略网站提示。</strong>（当然不知道以后是不是也这样。）</p><p>传送门：<a href="/alpha/sem">一些选课的经验之谈</a></p><hr><h2 id="舞会"><a href="#舞会" class="headerlink" title="舞会"></a>舞会</h2><p>（嗯，我这篇文章写的也不全都是些坑，也会记录一些有意思的。）</p><p><strong>舞会一般是在国庆过后，如果要参加的话需要准备好正装，如果要跳舞的话九月份可以参加几次舞培。</strong>简单说几点：</p><ol><li><strong>舞会≠跳舞</strong>，就是去看看节目吃吃东西也行，也可以去分会场蹦迪（我个人觉得比舞会有意思多了）；</li><li><strong>舞伴可以为空</strong>（甚至可以是同♂性）；</li><li><strong>舞会会很挤</strong>，尤其是放送好吃的的地方；</li><li><strong>舞会不是必须</strong>，当然有机会最好还是参加一次好了。</li></ol><hr><h1 id="上课"><a href="#上课" class="headerlink" title="上课"></a>上课</h1><h2 id="一些规律"><a href="#一些规律" class="headerlink" title="一些规律"></a>一些规律</h2><ul><li>起床时间会越来越晚；</li><li>熬夜时间会越来越长；</li><li>事情一般会越来越多；</li><li>第一学期学校会安排各种活动；</li><li>别担心，中后期多数同学都会感到一些压力或沮丧。</li></ul><p>所以给一些小建议吧。</p><p>一个是<strong>趁着前半学期锅比较少的时候，提前完成一些事</strong>，比如思修小班讨论（如有）早点参加掉，思修慕课（如有）早点看掉，信概大报告可以早点开工，程设大作业避免拖到最后赶，能选前八周的课尽量别选后八周……</p><p>然后，假如真的有段时间发现自己学不下去了，实践表明颓废一两周并不一定会有多大危害，只要最后能恢复积极的学习状态即可。</p><hr><h2 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h2><p><strong>虽然体育是多数同学得分较低的科目，但在你t，体育挂科还是挺难的。</strong>毕竟体育最终成绩会由多个部分折合而成，有的部分也比较好拿分。<strong>当然，如果你本身身体素质就挺好的，肯定是建议冲一冲高分的。</strong>（说到底，虽说1学分，但如果分太低也会挺难受的。）</p><p><strong>开学体测占10%，只要参加就能得到5%，只要及格就能全部拿到。</strong>而且它是给补测的机会的，不过具体补测的要求是什么我没弄清楚，如果需要补测的话最好先问清楚。</p><p>**集体锻炼或阿甘占20%**，集体锻炼只要参加就能记一次，理论上讲你即使划水也行（但这自然要看助教管得严不严）。阿甘是有配速要求的，但要求不高，大概是八分多少一公里吧。</p><p><strong>立定跳远和跳绳各占10%，三千米占20%。</strong>其中三千米应该是相对最难的，不过好在如果坚持练的话成绩会有起色的。</p><p>**课堂专项30%**，这一块的要求可能会相对低一些，老师给分也应该会相对温柔一些，所以只要是认真上课的，其实不至于体育挂科。</p><p><strong>不要缺勤。</strong>体育课是最不能缺勤的，缺勤倒扣分，缺一次扣的分好像还挺狠。</p><hr><h2 id="数学习题课"><a href="#数学习题课" class="headerlink" title="数学习题课"></a>数学习题课</h2><p>我个人对以下几种方式稍微排了个序：</p><ol><li><strong>自己做习题课的题目，自己校对并研究答案</strong>（前提是老师会发答案，自己会认真对，且习题课不记考勤）</li><li><strong>自己做习题课的题目，听习题课</strong>（总之没有自己对答案效率高，而且题目多了习题课也未必讲得完）</li><li><strong>翘习题课</strong>（这个显然因人而异，作为自己定夺的分界线）</li><li><strong>浏览一遍题目，认真听习题课</strong>（自然是少了自己练习的机会，毕竟好些题目，尤其是微积分的，是要有熟练度的）</li><li><strong>不做题，只听习题课</strong>（这简直是对青春的浪费啊……而且习题课有的题会很怪很难，这样只会让人沮丧……）</li></ol><p>总的来说，习题课的题目最好还是利用好，毕竟很可能除了这些题目和课后作业，自己再也不会找其他题目做了（</p><hr><h1 id="后半学期"><a href="#后半学期" class="headerlink" title="后半学期"></a>后半学期</h1><p>后半学期，可能会比较忙，比较累，事也比较多，但也有值得期待的地方。</p><h2 id="春学期选课"><a href="#春学期选课" class="headerlink" title="春学期选课"></a>春学期选课</h2><p>春学期选课一般会于十二月开始，这时候就有志愿了，赌起来也更有意思。</p><p>首先志愿排序规则需要弄清楚：<strong>必一＞必二＞必三＞限一＞限二＞限三＞任优＞任一＞任二＞任三</strong>，以及<strong>一志愿可以砸一门课，二志愿可以砸两门课</strong>。</p><p>恰好，贵系必修三门，限选三门。</p><p><strong>然而，即便如此，最后的结果也不一定就会比秋学期的理想。</strong>具体而言，事情会出在限选课上。<strong>因为限选课开的班少，扎堆选某一个老师的课的情况比较容易出现；</strong>而<strong>假如掉了限选课，换一个老师很可能就意味着换一个时间，也可能意味着其他的课都要让</strong>。所以选的时候要格外注意一点。（当然必选课也会有类似的问题。）</p><p>（不过，春学期选老师也是一个比较重要的因素，因为一些课的不同老师的上课形式甚至是考查方式都可能会差别比较大，所以最好还是多了解一些信息。）</p><p>还有一个现象，就是<strong>在中午十二点更新数据到下午四点截止之间，可能会有很大的变动</strong>，所以要权衡好。不要中午看以为自己稳了，结果出来了傻眼了。</p><p>所以……总的原则还是：<strong>小赌怡情，大赌伤身。</strong></p><p>至于什么时候出结果嘛……等吧，一般是要到正选前两天才会出。</p><h2 id="系学生节"><a href="#系学生节" class="headerlink" title="系学生节"></a>系学生节</h2><p><strong>贵系学生节应该是全校质量最高的学生节了</strong><del>（毕竟贵系有钱）</del>，而且不少系里的大佬都会认真筹划各项工作。当然，也不是每一个节目都非常好看，不过总体上还是很不错的。</p><p>我们这次学生节是在十二月中旬，在大礼堂举行。不过学生节前几天，<strong>主题曲和主题MV</strong>就发行了，还挺好听的。还有同名小程序，还可以制作学生节主题头像，<strong>学生节现场还可以发弹幕</strong>。</p><p><strong>我个人觉得，大一学生节有机会必然是要参加一次的，毕竟大二大三可能会更忙。</strong>整场演出的节目主要都是大一的，也有不少大二的，大三就出了一个<del>（看起来是忙于各种大作业……？）</del>。</p><h2 id="ddl"><a href="#ddl" class="headerlink" title="ddl"></a>ddl</h2><p>然后就是这个沉重的话题了……</p><p><strong>各种ddl的截止日期一般会在13~16周周末扎堆</strong>，大一的话，主要是：信概大报告、程设大作业、思修的各种任务以及一些其他课程的锅。然后好像对于大多数同学而言，光前两个就可以累得够呛。而且这段时间课的内容也会相对变难。<strong>所以还是建议不要从大一开始就把所有的任务都压到ddl之前赶。</strong></p><p><del>（虽然这话说起来容易）</del></p><h2 id="新年晚会"><a href="#新年晚会" class="headerlink" title="新年晚会"></a>新年晚会</h2><p><strong>首先……新年晚会是要有专门的途径去领票的，所以如果不关注相关信息的话，可能会错过领票的机会。</strong></p><p>新年晚会与系学生节是两种性质不同的活动，大概和军训结束的迎新晚会差不多，也是非常精彩的，然后零点前会有校长新年致辞。</p><p>（Orz…写不下去了……我就是那个后知后觉的，上面写的也都是道听途说的……）</p><h2 id="期末"><a href="#期末" class="headerlink" title="期末"></a>期末</h2><p>然后你就会发现这学期自己玩得太开心了，期末复习不完了（不是）</p><p><strong>其实贵系第一学期期末考的门数也不算多……必须要考的也就……微积分、线代、程设、离散。</strong></p><p>然后建议最好是找到往年的卷子拟合一下，毕竟这些基础科目期末的题目也不会太让人惊喜。</p><p><strong>但是切记：不要拿往年题的难度来预测这一年的。</strong>这个经常预测不准的。</p><p>以及……我一开始以为的期末考试：</p><blockquote><p>平时只要认真听、认真练习的话，应该能考好吧……</p></blockquote><p>后来才发现：</p><blockquote><p>这试卷怎么连做都做不完！</p></blockquote><p>所以看来你清第一学期的期末卷还是挺有水准的，就是不想让新生过个好年（x</p><p>主要是这两年好像自己系开的离散和程设，出的卷子都偏难。<strong>而且好像离散的期末比作业总是难一到两个数量级，所以不要用作业的难度来估计考试的难度。</strong></p><p><strong>出分？</strong>你清传统艺能：除夕前两天查分（这更是不让人过年了2333）。不过既然都考进来了嘛……如何通过别的途径提前预知分数，应该还是会的（x</p><p><strong>好了也不要太害怕了，基本上只要平时是认真学的，考前是认真准备的，也都能拿到比较理想的成绩（虽然多数同学会给自己更高的要求，这当然也更好）。</strong></p><hr><h1 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h1><p>既然是总结嘛，也应该来点承上启下的。</p><p><strong>简单回顾一下一开始立的flag吧：</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 维护个人博客</li><li><input checked="" disabled="" type="checkbox"> 多学几种语言</li><li><input checked="" disabled="" type="checkbox"> 掌握应用开发</li><li><input checked="" disabled="" type="checkbox"> 开源一个项目</li><li><input disabled="" type="checkbox"> 入门电子编曲（当初就对实现不抱太多希望）</li></ul><p>当时立这些flag的时候也只是笼统地定了一下，并没有想过具体会做什么。现在再来看（前四条），却发现它们其实是一气呵成、融会贯通的。比如正是维护了个人博客，我才去研究HTML&#x2F;CSS&#x2F;JS；也正是懂了点HTML，我才能比较顺利地做我打算写的APP（别问为什么），当然把这个项目放到GitHub上也是顺理成章的了。（而如果这个APP真的做好了，我应该也会把它回过来挂到博客上。）想想也挺神奇（x</p><p>总的来看，这些flag的完成度还算可以，这个学期过得也不算太差。</p><p>那下学期呢？其实……我现在也没太想好。<del>（当然首先是要好好学习，重新做人x）</del></p><hr><p><strong>不过可以先说一说我这个网站的一些愿望。</strong></p><p>从功能上，我打算造一些新的功能，目前能想到的是一个用户反馈页面。具体还会有什么功能……走着瞧呗，毕竟功能总是为内容服务的。</p><p>从内容上，我打算放一些教程（比如C++的和Python的），这些应该会在网站的独立的目录下出现（毕竟主Timeline东西不要太多）。然后我希望能有一些更有意思的内容（不能一天到晚都在写各种教程），虽然到底写啥我也不知道。最后，我下学期选了人智导，所以我打算整理一下课程的学习笔记放上来，供一些想自己捣鼓AI的（可能是非CS的）读者参考，不过这个估计是做不到同步更新的。</p><p>最后，十二地支又要转过一周，也祝愿在新的一年里一切都好！</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论区功能开启</title>
      <link href="/articles/comments/"/>
      <url>/articles/comments/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>由Valine提供支持。快来体验一下吧~</p><span id="more"></span><p>Valine评论插件非常轻巧，你无需拥有一个账号，即可发表评论。</p><p>也正是因为这一点，评论一旦发布，除了我以外任何人都没有直接修改或删除的权限。</p><p>当然，你也可以选择留下自己的昵称和&#x2F;或联系方式~</p><hr><p><strong>最后，发表评论时，请自觉遵守国家相关法律法规。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Toolbox带你飞</title>
      <link href="/articles/about-toolbox/"/>
      <url>/articles/about-toolbox/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一次性安利JetBrains家的所有产品……</p><span id="more"></span><blockquote><p>谁适合读这篇文章？</p><ol><li>已是JetBrains的忠实粉丝，使用了大量JetBrains家的产品；</li><li>有使用多种语言编程的需求，虽然还未完全入坑，但预感到自己会在JetBrains的道路上越走越远……</li></ol></blockquote><blockquote><p>注：本文适用于Windows用户，对于Mac和Linux用户情形可能会有或大或小的差异。</p></blockquote><hr><p>Toolbox是一款轻量级JetBrains产品集成管理工具，反正不吃内存，不占资源，不用白不用。最关键的，它是免费的。</p><p>当然，如果之前没有以任何形式注册过JetBrains账号，也可以考虑先<a href="https://account.jetbrains.com/login">注册</a>一个。</p><p>然后，就是<a href="http://www.jetbrains.com/toolbox-app/">下载链接</a>。</p><p>一路安装完，如有需要先登录一下，然后点击右上角的设置按钮，稍微设置一点。</p><p>我就说一下我的一些设置好了（仅供参考）：</p><ul><li>Update Toolbox App automatically</li><li>Run at login</li><li>Global shortcut to open Toolbox App（<code>Ctrl+Alt+T</code>）</li></ul><p>然后把之前所有Manually Installed的产品全都Install again（强迫症+烧流量……）</p><p>然后，然后……（咦，这篇文章有点水啊……）</p><hr><p>真的没了吗？</p><p>确实……谁叫Toolbox用起来这么轻巧（</p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JetBrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLion安装经验分享</title>
      <link href="/articles/intro-to-clion/"/>
      <url>/articles/intro-to-clion/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>热衷于安利JetBrains家的产品……</p><span id="more"></span><p>作为我的博客的第一篇正经文章，我打算安利一下CLion。毕竟……谁叫它是全宇宙第一的IDE呢！<del>（引战言论）</del></p><p><strong>有一款超棒的IDE是什么体验？相信我，CLion能让你从入门到上瘾……</strong></p><blockquote><p><strong>一起来改进这份教程~</strong></p><p>由于本文主要凭借记忆，写作前未经过实际验证，再加上互联网产品更新快，因此文中所描述的内容可能与实际情形不符。若有这种情况发生，请尽管在评论区中指出。如果你能够提供一些安装过程中的截图，那我也更加欢迎。</p></blockquote><blockquote><p>注：本文适用于Windows用户，对于Mac和Linux用户情形可能会有或大或小的差异。</p></blockquote><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>如果你的电脑上还没有MinGW，需要<a href="https://sourceforge.net/projects/mingw/files/">下载</a>MinGW安装包。并且，安装的时候留个心，记一下自己把MinGW安装到什么位置了（后面配置会用到）。</p><p><strong>然而，从MinGW官方下载地址安装MinGW过于魔鬼（我的个人体验如此），所以推荐“曲线救国”——先<a href="/downloads/softwares/Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup.exe">安装Dev-C++</a>（假如你没装过的话），它会顺带安装好MinGW，具体的位置应该在Dev-C++的安装目录下。</strong></p><blockquote><p>如何简易判断电脑上有没有MinGW？</p><p>打开cmd，输入命令<code>gcc -v</code>，如果可以打印出版本信息，就表示已有MinGW。</p></blockquote><p>下面安装CLion。</p><p>CLion是一款收费产品，不过对学生免费——只要你有自己的学校邮箱。所以，首先你要<a href="https://www.jetbrains.com/shop/eform/students">申请一个学生账号</a>。</p><p>然后，<a href="https://www.jetbrains.com/clion/download/#section=windows">下载</a>CLion安装包。（如果你有<a href="/articles/about-toolbox">Toolbox</a>，可以直接用Toolbox安装。）</p><p>安装完成后，运行CLion，然后就是激动人心的配置部分啦！</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>配置有多重要？一方面，如果不能正确配置，那你的CLion可能连用都用不了。另一方面，良好的配置可以大大提升你的使用体验。</strong></p><h3 id="正确配置"><a href="#正确配置" class="headerlink" title="正确配置"></a>正确配置</h3><p>启动CLion后，作为新用户，你估计会遇到一个<code>Customize CLion</code>的界面。</p><p>首先是<code>UI Themes</code>，就是界面颜色风格，这个挑自己喜欢的风格（好像黑色的比较受欢迎）。（不过后面会教你自定义一套自己喜欢的风格。）</p><p>然后是<code>Default plugins</code>和<code>Featured plugins</code>，直接点<code>Next</code>过去好了。</p><hr><p><strong>接下来，就是重中之重：<code>Toolchains</code>的配置。</strong>因为它非常重要，所以我也在后面配上了截图，可以对照着看，<strong>但一定要先读我写的文字说明！</strong></p><p><code>Environment</code>下方有个下拉菜单，选<code>MinGW</code>。</p><p>这时，IDE应该会自动帮你找寻MinGW的位置。<strong>但自动生成的东西有可能不靠谱，所以你先检查一下，它找的MinGW是不是你刚刚安装的那个。</strong></p><blockquote><p>假如之前安装了Dev-C++，这次就没装MinGW，怎么知道MinGW的位置呢？</p><p>找到Dev-C++的安装目录，下面应该有个名叫MinGW64文件夹，这就是你MinGW的位置了。</p></blockquote><p><strong>大部分情况下，这个空里的路径应该以<code>...\MinGW64</code>结尾。</strong></p><p>选择好之后，IDE就会自动帮你填完后面的几个空（这时它自动生成的基本上就是靠谱的了）。如果你看到没有小圈圈在转，也没有红色的感叹号，那就代表一切顺利。</p><blockquote><p>假如出现了异常……首先再次确认自己刚刚MinGW的位置有没有填对，是不是你刚刚安装的MinGW。如果还不行，那就参考下面的截图，自己想办法吧……（无奈脸）（或者……利用一下评论区……？虽然我很可能自己也不知道如何解决这些配置时的异常……）</p></blockquote><p><img src="/articles/intro-to-clion/001.png" alt="Toolchains配置完成截图参考"></p><hr><p>基本的配置完成后，需要激活一下。你既然已经有学生账号了，那就可以光明正大地选择<code>JetBrains Account</code>通道进行验证了。</p><p>现在，一切准备就绪，你可以开始编程啦。</p><p>在这里，建议你先在电脑中选好一个位置，以后就专门用来放CLion的项目。</p><p>先试着写一个Hello World吧。</p><p>在<code>New Project</code>的窗口中，选择<code>C++ Executable</code>，<code>Location</code>里面填自己选好的位置（例如<code>D:\CLion_Project\HelloWorld</code>），其中，地址的最后一段是这个项目的名称。</p><p><code>Language standard</code>是语言标准，如果刚刚学习C++不知道选什么就按它默认的来。</p><p><code>Create</code>之后，进入代码界面，它应该会默认提供一个Hello World的代码。<strong>先等一会儿，等右下角的进度条完成。</strong></p><p>进度条完成后，你有两种方法执行程序。</p><ol><li>右上角有一排绿色的按钮，有锤子（<code>build</code>）、三角（<code>run</code>）、虫子（<code>debug</code>）什么的，点<code>run</code>，稍微过一会儿就能看到运行结果了。</li><li>你的<code>main</code>函数左边应该也会有一个小三角，点击之后选择<code>run</code>同样可以运行。</li></ol><hr><p>如果到现在一切顺利，就代表你的CLion已经成功安装并配置，理论上讲以后都可以正常用了。不过，为了拥有更好的编程体验，可以再进行一些个性化的配置。</p><h3 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h3><p>左上角，找到<code>File</code>，下拉菜单里找到<code>Settings</code>，进行进一步的配置。</p><p>代码又细又淡的字体一定让你很讨厌吧！找到<code>Editor</code>，选择<code>Font</code>，把<code>Font</code>字段设置成<code>Consolas</code>。</p><p>接下来就是<code>Color Scheme</code>，也就是非常快乐的调颜色阶段。<del>（我曾经花了一下午调颜色……）</del></p><blockquote><p>为什么需要调颜色？</p><p>C++是一门拥有<del>过于</del>丰富特性的语言，不同的标志类型和语法特性可以通过不同的颜色清晰地体现出来。而默认的配色方案比较单调，这时就可以充分发挥你DIY的功力了。</p><p>而且屏幕上五彩斑斓（但不要调得太花了）的代码本身就会让你赏心悦目呢！</p><p>还有，配色不仅仅是上不同的颜色，还可以选择加粗、斜体或者加阴影。所以，可以发挥的空间很大呢。</p></blockquote><p>如果第一次使用，还比较陌生，可以照搬我当前用的配置。详见后文<strong>导入配色方案</strong>。</p><p>与C++关系比较大的，应该是<code>General</code>、<code>Language Defaults</code>和<code>C/C++</code>。调这些就行了。</p><hr><p>接下来，<strong>我强烈推荐一款插件：<code>TabNine</code>。</strong>它是一款利用机器学习进行代码补全的插件，可以有效提升编程体验。（当然这里只是推荐，并不是刚需，可以选择不装。<strong>在你还不太熟悉CLion时，也可以不急着装。</strong>）</p><p>这个东西介绍见<a href="https://tabnine.com/">官网</a>，不过其实也不用去看，只要知道它可以有效地对你接下来要输入的代码进行预测，并提供代码补全建议。</p><p>在屏幕左上角<code>File-&gt;Settings-&gt;Plugins-&gt;Marketplace</code>，进入插件市场，搜索<code>TabNine</code>，<code>Install</code>即可。</p><p>然后回到编程界面，<strong>照理应该</strong>可以用了。具体而言，敲代码的时候，它会给你提供补全建议。如果它给的第一条建议正好就是你想要的，那就直接按回车。如果是后面的某条建议，那就先按几次下键，然后再回车。</p><p>然而……<strong>初次使用的时候，需要先写几段代码，相当于训练一下你的TabNine，让它熟悉你的代码风格，所以一开始它不会给你提示（你这时候看到的代码补全其实是CLion预设的）。等用一段时间，你会发现TabNine变得越来越聪明了。</strong></p><p><del>还有一件比较重要的事，就是<strong>TabNine的深度学习功能默认只有30天的试用期，需要注册专业版获得永久使用权。</strong>专业版目前免费，点击链接（已失效）申请，它会向你的邮箱中发送注册码及配置说明，按照要求做即可。</del></p><p>可惜的是，专业版TabNine现在似乎需要付费了。不管怎么说，还是先把网址丢这儿：<a href="https://www.tabnine.com/trial/">网页链接</a></p><p><strong>TabNine有一个缺陷，就是比较占CPU（毕竟自带机器学习）。</strong>反正我敲代码比较快的时候会发现排风扇也在呼呼转。</p><p>然后可能会有一些小bug（习惯就好）。</p><p>如果需要停用&#x2F;卸载TabNine，屏幕左上角<code>File-&gt;Settings-&gt;Plugins-&gt;TabNine-&gt;Disable/Uninstall</code>。</p><p>额……说是进阶的配置，其实也就这些。不过，应该已经可以很好地提升编程体验了~</p><hr><h3 id="导入配色方案"><a href="#导入配色方案" class="headerlink" title="导入配色方案"></a>导入配色方案</h3><p>如果需要我自己用的配色方案，首先<a href="/downloads/themes/Splendid-CLion.icls">下载</a>。</p><p>然后，在<code>Settings</code>的<code>Editor</code>下<code>Color Scheme</code>主菜单中，有一个<code>Scheme</code>下拉列表，右边还有一个小齿轮的，点击小齿轮，<code>Import Scheme</code>，把外部配色方案导入IDE，应该就可以了。</p><p>当然，导入之后你也可以自己继续进行一定的微调。</p><p>那么……配置的部分，其实差不多了。</p><p>不过，我个人认为，<strong>我这篇博客最不可替代的部分，其实是接下来的技巧与注意事项</strong>。我希望它可以帮你更好地适应并使用CLion。</p><hr><h2 id="技巧与注意事项"><a href="#技巧与注意事项" class="headerlink" title="技巧与注意事项"></a>技巧与注意事项</h2><ol><li><p>CLion的代码以项目为单位，一个项目中可以有很多很多文件，它们之间可以相互引用。因此，坦诚地说，如果你只是为了完成<strong>一些</strong>小型程序而使用CLion，确实有点浪费电脑资源。</p><p>在这里，提供两种方案。一个，是如果这段代码只是用于测试，以后再也不会用了，那就<strong>把代码清空，不用再建新的项目</strong>。另一个，就是如果你还想保留当前的代码，那就<strong>把当前文件复制到项目中的另一个地方，当做备份，同样不用建新的项目</strong>。（复制粘贴的操作详见第4条。）</p></li><li><p><strong>熟练运用组合键<code>Ctrl+Alt+L</code>。</strong>它可以将你的代码格式化，增强代码可读性。（像我现在已经敲几行就整理一下代码了……简直过于方便……）</p></li><li><p>重视一下IDE给出的Warning(s)（虽然绝不以消除所有Warning(s)为目标）。CLion给的Warning质量还是普遍比较高的。首先，它会在右侧的滚动条处以黄色表示出来，方便你看看哪里还有需要注意的地方。然后，不同级别和类型的Warning会用不同的方式在代码中呈现出来<strong>（有些地方的代码会变成灰色，有些则是下划线或者高亮出来）</strong>，鼠标悬浮在上方就能看到具体的提示；当光标在Warning处时，使用组合键<code>Alt+Enter</code>可以看到一些修改建议（不过这些修改建议不一定管用，往往还是需要人工修改的）。<code>Clang-Tidy</code>类型的Warning可以选择忽略。</p><blockquote><p><code>Typo</code>类型的Warning表示拼写错误。虽然拼写错误并不会直接导致程序的错误，但还是尽量避免。</p><p>如果确实是单词拼错了，把光标放到那个单词处，按下组合键<code>Alt+Enter</code>，选择<code>Typo: Rename to...</code>，然后进行更正。它会把项目中这个所有出现这个变量的地方一起改好。</p><p>如果这个单词确实存在，只是IDE没有收录，还是<code>Alt+Enter</code>，把它保存到<code>project-level dictionary</code>。</p><p>如果你的变量名是多个单词的组合，请使用小驼峰命名法（<code>smallCamelCase</code>）、大驼峰命名法（<code>BigCamelCase</code>）、使用下划线分隔的小写字母命名法（<code>lower_case_with_underscores</code>）、使用下划线分隔的大写字母命名法（<code>UPPER_CASE_WITH_UNDERSCORES</code>）。</p><p>如果你的变量名是汉语拼音甚至是汉语拼音缩写……还是算了吧……请设想一下在别人的代码中看到<code>bt</code>、<code>wz</code>、<code>djadd</code>等名称时内心的崩溃感……</p><p><del>当然我不会告诉你最新的语言标准中允许真的用汉字做变量名……（试试<code>int 测试;</code>）</del></p></blockquote><p>利用好Warning提示可以有效地避免一些低级错误。试着在IDE中粘贴以下代码<strong>（不用去运行）</strong>，看看它给出了哪些Warning(s)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    cout &lt;&lt; n * m &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bar</span><span class="params">(<span class="type">int</span> x, <span class="type">bool</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            x = x + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x = x * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">culculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">foo</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">bar</span>(<span class="number">4</span>, <span class="literal">false</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>][<span class="number">10</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//Do something but forget to update the variable `k`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> baz[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (baz[i] = <span class="number">4</span>)</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;true&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">culculate</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;The end.&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当你的项目中<strong>有多个文件需要管理</strong>时，屏幕上方的文件路径条（例如<code>HelloWorld&gt;main.cpp</code>）可以比较简便地实现一些功能。点击一个文件夹（例如<code>HelloWorld</code>），你可以<strong>查看这个文件夹下的其他文件或子文件夹</strong>。右击一个文件夹或文件（例如<code>main.cpp</code>），你可以进行<strong>新建文件、复制粘贴文件、重命名文件、删除文件</strong>等更多操作。</p><blockquote><p>我们当然可以直接使用Windows系统的文件资源管理器来复制粘贴重命名，为什么还要用CLion进行这些操作呢？</p><p>设想，当你的项目中有多个相互关联的文件时，手动修改文件名等信息，难以保证其它用到这个文件的代码都在相应的位置得到更正。而使用CLion进行这些操作，IDE会自动找寻其它用到这个文件的位置，并进行调整和修改，这样就保证了项目的安全性。</p></blockquote></li><li><p>左侧的项目文件组织窗口同样可以用于文件管理，并且更加直观全面。不过，平时不常用的时候，可以点击<code>-</code>关掉。如果想把它再开出来，双击屏幕上方的文件路径条即可。</p></li><li><p>屏幕最左下角的那个按钮可以显示拓展功能框。比如说，如果一不小心把输出窗口关掉了，想再开出来，鼠标悬停在上面，点<code>Run</code>。<del>（前提当然是你得要先run过一遍当前的代码。）</del>[进阶内容]或者说有时想用到<code>Windows</code>系统的<code>cmd</code>，同样的方法，点<code>Terminal</code>。（如果想要定向到生成的<code>.exe</code>文件所在的目录，需要使用指令<code>cd cmake-build-debug</code>。参见下面的第7条。自行学习DOS命令有关内容。）</p></li><li><p><strong>如果程序中想用EOF来判断输入终止，但调试时在CLion的<code>Run</code>窗口中使用<code>Ctrl+Z</code>等没有效果</strong>，这时进行这一波操作：<code>Ctrl+Shift+A</code>，输入<code>registry</code>，进入<code>Registry..</code><del>（不是<code>Register</code>）</del>，把<code>run.processes.with.pty</code>后面的勾去掉。调试的时候，按下<code>Ctrl+D</code>，即可实现输入的终止。</p><blockquote><p>注意：这波操作可能会有副作用！</p><p>不得不承认，这确实是CLion的一个比较讨厌的bug，据说也一直有人向JetBrains反馈这个bug，不过不清楚什么时候会改过来。（或许你看到这篇博文时，这个bug已经解决了……？）</p></blockquote></li><li><p>如果想要使用Windows系统自带的黑框运行程序，或者是想找到项目生成的<code>.exe</code>文件，在哪找呢？在文件资源管理器中找到你这个项目代码的位置，接着找到<code>cmake-build-debug</code>文件夹，里面就能找到那个<code>.exe</code>文件了。</p><blockquote><p>还有一种“偏门左道”是，在代码中没有加入任何断点的情况下，点击<code>Debug</code>，它就会跳出黑框了。不过黑框中输出的信息不会保存下来。化解这一问题的办法是在代码结束之前加入<code>system(&quot;pause&quot;)</code>。</p></blockquote></li><li><p>还有一些有时比较实用的功能，比如<strong>代码比较</strong>，上方菜单栏<code>View-&gt;Compare With...</code>，后面应该不用多说了。此外，在代码比较对话框中进行的修改可以直接反映到原文件上。当然，有时也可以先<code>Ctrl+Alt+L</code>格式化一下再比较。</p></li><li><p>（未完待续……）</p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>JetBrains家的产品好是好，但是也有坏处，就是吃内存。所以有人说</p><blockquote><p>JetBrains：从入门到破产</p></blockquote><p><del>（因为你可能会为了提升JetBrains产品的使用体验而去买很多很多内存条……反正我还没这么干过）</del></p><p>JetBrains家的产品还有一个更大的坏处，就是一旦用了，就再也不想用其他家的IDE了，所谓</p><blockquote><p>JetBrains：从入门到上瘾</p></blockquote><p>不过，在我看来，JetBrains的IDE最大的坏处，就是一旦你用了它的一款IDE，就会接着安装它的其它语言的IDE。这不，我的电脑里，从<code>IntelliJ IDEA</code>到<code>CLion</code>，再到<code>PyCharm</code>，以及<code>WebStorm</code>……</p><p>有机会再写写JetBrains家别的产品的入坑教程，安利就要安利到底~</p>]]></content>
      
      
      <categories>
          
          <category> 技术宅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JetBrains </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="/articles/preface/"/>
      <url>/articles/preface/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p><strong>写在后面</strong></p><p>这篇文章自写下起即被加密，预计三年后解开。</p><p>三年过去了，如果让我评价一下自己的本科生涯，我觉得总体方向上和预期相符。虽然结局和最开始的梦想稍有差距，但也说不上哪个更好。我这个人嘛，多少还是有点重感情的。</p><p>我本科的心路历程，还真像 <a href="https://music.163.com/song?id=1341359828">Reach for the Summit</a> 一样。起初，充满憧憬与好奇，有着无穷的能量，在摸爬滚打中前行。后来，也曾困于不适合自己的梦境，也曾有过顺风与逆风，有过迷茫时期。最后，不管怎样，还是达到了理想的彼岸。回过头来，我对自己的本科生涯基本上是满意的。</p></blockquote><hr><p>夜，还不算深。</p><p>我坐在电脑前，写下第一篇博文。</p><hr><p>经历了前些天的思想波动，我基本回到了正常的生活状态，完成了今天的学习和运动计划，并留下了时间做自己想做的事（虽然比预期少了一点）。</p><p>于是，我郑重其事地写起了我的博客。</p><p>不过，当我说到“郑重其事”时，我可能已经走在错误的道路上了。为什么要建这个博客？或许是之前思想波动的产物，或许有着其它的什么目的。总之，好像自己就是需要有一个博客，尽管一时说不出什么道理。</p><p><strong>那么，这个博客也应当是随心而写。心中有所想，就有所表达，不必拘束。</strong></p><hr><p>但这个博客总得有什么内容吧。写什么呢？碎碎念？那整个博客似乎会过于琐碎了。心得记录？那确实可以随心而写，不过可能缺少一点主题。技术分享？这大概也是我建这个博客的初衷，不过这样又显得太过单调……</p><p>这么看来，怎么想都是错。也许根源就在于，我似乎总想在一开始就对未来的事情有所掌控，殊不知，这样只会为自己带来更多的困扰。</p><p><strong>不如贪心一点，想清楚自己现在最想要的是什么。以后的路还很长，慢慢走，别着急。</strong></p><hr><p>当然，一点点远见还是有必要的。比如接下来的两年多时间里，不出意外，我只会越来越忙。而这后半个学期，也由于一些阴差阳错，变得比较清闲。<strong>因此，我应当抓紧这段时间，把自己以后想做的事争取开个头，走出第一步。</strong></p><p>大概有那些事呢？除了完成好学业任务以外，我简单列了一下：</p><ul><li>维护个人博客</li><li>多学几种语言</li><li>掌握应用开发</li><li>开源一个项目（计划是Powernomial）</li><li>入门电子编曲（放在最后显然<del>咕咕咕的可能性</del>难度最大）</li><li>……</li></ul><p><del>想到自己要眼看着这么多flag一个个倒下去就心疼（bushi）</del></p><p>虽然这半个学期相对轻松一点，不过有这么多事要做，应该也不会太闲了吧~</p><p>至于以后会怎么样，姑且先走一步看一步吧！</p><hr><p><strong>其实，未来究竟是什么样子的，从现在来看的确不得而知。</strong></p><p><strong>就说这个博客，在一定时间内，估计也只是一个小圈子里的人会看吧。</strong></p><p>不过，这篇文章也确实过于碎碎念了，我还是打算过两天把它暂时封存起来。或许，留到三年后，再回头看看，现在的自己变成了什么样吧！</p><hr><p>最后，也附上一些拙劣的句子。它们和我建立博客的念头差不多一起诞生，可能与这个博客也或多或少有着间接的联系吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">找到了自己想变成的模样，</span><br><span class="line">无关标准、功利与特奖。</span><br><span class="line">把那份愿望悄悄藏在心底，</span><br><span class="line">三年后看看自己走到了何方。</span><br><span class="line">攀登的道路注定不会简单，</span><br><span class="line">热情与信念指引征途的方向。</span><br><span class="line">求知若饥，虚心若愚，</span><br><span class="line">永远不要丢掉眼里的光。</span><br></pre></td></tr></table></figure><p>也算是郑重其事地写完了第一篇博文。</p><p>我也要去准备迎接第一个期末ddl了~</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>啊呀！页面不见了o(╥﹏╥)o</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>404 Not Found…</p><p>要不……先回主页看看？</p><p><a href="/">传送门~</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>大家好，我是 UNIDY，现就读于清华大学计算机系，对这个学科有浓厚的兴趣和探索的热情。</p><p>我最喜欢的编程语言是 Kotlin 和 TypeScript。我厌恶动态类型语言。</p><p>我曾担任计算机系学生科协智能体部副主席。</p><p>我的主要作品有 <a href="https://app.cs.tsinghua.edu.cn/">THUInfo</a>，一个旨在提升同学们信息化生活体验的校园 APP。</p><p>我还参与过 <a href="https://github.com/saiblo">Saiblo</a> 平台的开发和维护工作。</p><p>我最喜欢的游戏是空洞骑士和蔚蓝。我很少接触其他游戏。</p><p>我最喜欢的电影是星际穿越。</p><p>好听的原声带会大幅增加我对某个游戏或电影的好感度。</p><p>我的十六型人格是 <a href="https://www.16personalities.com/profiles/698219d12cb34">ISFJ-A</a>。</p><p>我最喜欢的人是 @xyi。</p><p>传送门：<a href="/cv/cv.pdf">个人简历</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>C++快速入门（实验版）</title>
      <link href="/cpp/index.html"/>
      <url>/cpp/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="1/">上册</a><ul><li>01 - 你好，世界！（Hello, world!）</li><li>02 - 二数之和（add）</li><li>03 - 二数之积（mul）</li><li>04 - 计价器（taxi）</li><li>05 - 素数判断（isprime）</li><li>06 - 哥德巴赫猜想（goldbach）</li><li>07 - 素数表（primetable）</li><li>08 - 选择排序（selection）</li><li>09 - 成绩排名（student）</li><li>10 - 分数（fraction）</li></ul></li><li>下册</li><li>增值包</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>资源下载</title>
      <link href="/downloads/index.html"/>
      <url>/downloads/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="全部资源"><a href="#全部资源" class="headerlink" title="全部资源"></a>全部资源</h2><h3 id="主题与配置"><a href="#主题与配置" class="headerlink" title="主题与配置"></a>主题与配置</h3><ul><li><p><a href="themes/Splendid-CLion.icls">Splendid-CLion.icls</a></p><p>一款适用于CLion的主题配色方案。</p></li><li><p><a href="themes/Splendid-Idea.icls">Splendid-Idea.icls</a></p><p>一款适用于Idea的主题配色方案。</p></li><li><p><a href="themes/Splendid-PyCharm.icls">Splendid-PyCharm.icls</a></p><p>一款适用于PyCharm的主题配色方案。</p></li></ul><h3 id="教程资料"><a href="#教程资料" class="headerlink" title="教程资料"></a>教程资料</h3><ul><li><a href="tutorials/cpp/">C++快速入门（实验版）</a></li></ul><h3 id="培养方案"><a href="#培养方案" class="headerlink" title="培养方案"></a>培养方案</h3><ul><li><a href="curricula">2019级计算机系培养方案</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>大一秋</title>
      <link href="/alpha/sem/index.html"/>
      <url>/alpha/sem/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="选课情况"><a href="#选课情况" class="headerlink" title="选课情况"></a>选课情况</h3> <body> <ol>     <table style="border: 2px solid black; width: 300px; padding: 5px; text-align: center">     <tbody>     <tr>       <td colspan="2" style="border: 2px solid black">必修</td>      </tr>      <tr>       <td>微积分</td>       <td>章纪民</td>      </tr>      <tr>       <td>线代</td>       <td>田垠</td>      </tr>      <tr>       <td>思修</td>       <td>戴木才</td>      </tr>      <tr>       <td>信概</td>       <td>N/A</td>      </tr>      <tr>       <td colspan="2" style="border: 2px solid black">限选</td>      </tr>      <tr>       <td>程设</td>       <td>徐明星</td>      </tr>      <tr>       <td>离散</td>       <td>王宏</td>      </tr>      <tr>       <td colspan="2" style="border: 2px solid black">任选</td>      </tr>      <tr>       <td>计算机系统研讨<br>[新生研讨课]<br>[文核]</td>       <td>陈文光</td>      </tr>      <tr>       <td>文化素质教育讲座<br>[文核]</td>       <td>N/A</td>      </tr>     </tbody>   </table>  </ol>  </body><h3 id="课程资料"><a href="#课程资料" class="headerlink" title="课程资料"></a>课程资料</h3><h4 id="微积分A-1"><a href="#微积分A-1" class="headerlink" title="微积分A(1)"></a>微积分A(1)</h4><p>先列几个比较热门的老师（可能不全）：<strong>章纪民、崔建莲、姚家燕</strong>。<br>然后说一下我上的章老师的课的情况。配分2:3:5，然后<strong>只要作业做得不太差，20分平时分是可以拿满的</strong>。讲课的话是不用说的，讲得很清楚，板书也很详细，人也非常和蔼可亲。考试前会有复习课，也会在网络学堂上放一份模拟卷。<br>稍微提一下王晓峰老师的“微积分W”，如果对自己的数学没什么信心的话，据说会感觉比较劝退。</p><h4 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h4><p><strong>朱敏娴老师的课据说不错</strong>，然后估计鲁自群老师的课会被抢爆，如果这样其实不一定要跟着去抢。<strong>线性代数的老师除了特别劝退的，只要课上能把概念以及来龙去脉讲清楚，基本上就能让你学到很多东西了。</strong><br>说一下田老师的课。田老师是一名年轻老师，比较认真负责，平时分也比较慷慨。此外，我上的时候因为选的人少，所以就像是在上小班课一样。不过毕竟是比较年轻的老师，授课经验相比于其他热门老师来讲稍微逊色一点。<br>最后说一下教材。<strong>官方教材应该还是英文书，不过用不用取决于老师。</strong>那本英文书的特点是比较平易近人。（而且不太必要怕英文教材，毕竟数学课本能弄出多少复杂的句子呢。）<strong>不过系统性稍有欠缺，而且内容比较偏重计算。所以可以备一本中文书参考。</strong></p><h4 id="思想道德修养与法律基础"><a href="#思想道德修养与法律基础" class="headerlink" title="思想道德修养与法律基础"></a>思想道德修养与法律基础</h4><p>我没了解过别的老师的情况，不过<strong>不同老师主要的区别应该就在期末考试。</strong><br>我选的戴木才老师算分的项目比较多，由慕课、两次作业（作文）、一次社会实践（交证明即可，也可用期中总结或读书报告替代）、小班讨论和期末考试组成。其中，期末考试是一大一小两篇作文，所以不用翻书或是考前背很多东西。</p><h4 id="信息科学技术概论"><a href="#信息科学技术概论" class="headerlink" title="信息科学技术概论"></a>信息科学技术概论</h4><p><strong>八场讲座，不计考勤</strong>，不过会有三份作业，要针对其中三场报告的内容写点报告。<strong>十几周的时候需要提交一份三千字的文献综述，内容需要更专业一点，然后多引一些文献</strong>（毕竟文献综述大概就是对于某某领域，前人有了某某成就，他们的方法有某某异同，各有什么优势，还有什么改进的空间）。<br>据说只要作业都是认真完成的，最后给分还不错。</p><h4 id="程序设计基础"><a href="#程序设计基础" class="headerlink" title="程序设计基础"></a>程序设计基础</h4><p>这个主要是之前有无系统的编程经历的事吧。如果中学阶段没学过竞赛，也没研究过编程的话，花的时间会多一点。<br><strong>两个老师各有特点，都挺值得选的。</strong>不过两个班的作业和大作业题目不一样，风格也有点差别。（我个人感觉王老师的大作业比较容易导致内卷现象……？）<br>给点建议吧。<strong>一个是用一个好一点的IDE。</strong>（都上大学了就尽量别用Dev-C++了吧，反正迟早是要用更强大的IDE的。）像VS、CLion、VSCode都有强大的提示和调试功能，也能有助于自己形成较好的码风。另一个，<strong>多积累一点debug的经验</strong>，IDE给的调试工具要会用，最原始的断点输出也要会。然后<strong>学习新东西的时候可以试着面向百度编程</strong>。<br><strong>最后，假如程设真的学不好，不代表以后编程就没救了。程设课成绩与编程水平线性无关。</strong></p><h4 id="离散数学-1"><a href="#离散数学-1" class="headerlink" title="离散数学(1)"></a>离散数学(1)</h4><p>离散(1)的课，上的时候估计会感觉知识挺离散的，<strong>不过看书自学也能学得会，作业也不难，而且有答案可以看。</strong><br>如果你有自学的能力的话，既然课可以不听，那么选哪个老师其实不太重要了。然而假如想要听课体验更好的话，可以选马老师的课。<br><strong>最后，考试会比作业难一个数量级，所以考试周要做好充分的准备。</strong></p><h4 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h4><p><strong>大一体育上什么专项都是分配好的</strong>，这个由不得自己来选。所以，也没什么好说的，就是认真上课，平时练习，不要缺勤。</p><h4 id="文素课们"><a href="#文素课们" class="headerlink" title="文素课们"></a>文素课们</h4><h5 id="新生研讨课"><a href="#新生研讨课" class="headerlink" title="新生研讨课"></a>新生研讨课</h5><p>挑一个自己喜欢的课，如果这门课不会带来太多压力那更好。<br>陈文光老师的计算机系统研讨课就挺不错的，记通过，没有考试，只要每次作业都交了，就不会让你挂的。老师讲得也不错，也能学到不少东西。<br>当然，也有许多其他很好的新生研讨课，不过我也没打听过，这里就不列举了。</p><h5 id="文化素质教育讲座"><a href="#文化素质教育讲座" class="headerlink" title="文化素质教育讲座"></a>文化素质教育讲座</h5><p>一门记通过的文素课，只要听满八场讲座，再写一篇报告，就能通过。</p><h5 id="计算科学与职业生涯规划"><a href="#计算科学与职业生涯规划" class="headerlink" title="计算科学与职业生涯规划"></a>计算科学与职业生涯规划</h5><p>（好像是这个名字）<br>据说也是不错的一门课，不过由于我没上过，所以不太好评价。主要是没什么压力吧。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>上册</title>
      <link href="/cpp/1/index.html"/>
      <url>/cpp/1/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎使用本教程！</p><p>本教程是一份快速入门教程，旨在让您用最短的时间掌握大部分C++基本语法知识。</p><p>祝您学习愉快！</p><h3 id="和我一起改进这份教程"><a href="#和我一起改进这份教程" class="headerlink" title="和我一起改进这份教程~"></a>和我一起改进这份教程~</h3><p>该教程是实验版，仍有不少缺陷和编写不当的地方，甚至会有一些谬误。</p><p><strong>在此，邀请您和我一起来改进这份教程。</strong>我在每一节的最后都放有反馈链接，是一份很简单的调查问卷。当然，若您对本教程某一部分的编排有更好的建议，或是认为某一节的讲解难以理解，抑或是发现了内容的错误，也可以向我反馈。</p><p>最后，再次祝您学习愉快！</p><hr><h2 id="C-快速入门（上册）"><a href="#C-快速入门（上册）" class="headerlink" title="C++快速入门（上册）"></a>C++快速入门（上册）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>欢迎使用本教程。</p><p>本教程的作者为UNIDY，是一个只会在屏幕上打出随机字符的垃圾程序猿。但是他好歹稍微懂一些C++的基本语法，虽然自己做不出什么成果来，但是还是希望能够让更多朋友走进C++的大门。</p><p>C++与C语言不同，相传不同在两个加号上。其中一个加号，是指<code>Standard Template Library</code>（<strong>标准模板库</strong>，简称<code>STL</code>），提供了大量好用的函数库与模块；另一个加号，是指<code>Object Oriented Programming</code>（<strong>面向对象的程序设计</strong>，简称<code>OOP</code>），体现了C++作为面向对象的中级语言的特性，这一特性将随着你对C++学习的逐步深入有所体会。简而言之，C++是对C语言的改进。</p><h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><p>在你进行程序设计前，需要先认识两个工具：<strong>集成开发环境</strong>（<code>Integrated Development Environment</code>，简称<code>IDE</code>）和<strong>编译器</strong>（<code>Compiler</code>）。</p><p>IDE是你编写代码的环境，称之为<strong>集成</strong>的，是因为它集合了程序开发过程中需要的各种功能。<strong>不同的IDE价格不同，功能各异，使用体验也因而有所差异。</strong>有的IDE只是简单地实现了语法标注、自动缩进等功能，但有些IDE内置有良好的<strong>类型推导、代码补全</strong>等机制。<strong>选择哪一款IDE，取决于你的应用需求、使用习惯和经费因素<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="有些IDE提供学生版，可以凭学生证获得优惠。有些学校统一为学生批量订购IDE，学生可免费试用。">[1]</span></a></sup>。</strong></p><p><strong>编译器的主要功能是将一种（高级）语言转换为另一种（低级）语言</strong>，例如C++编译器能够将你所编写的代码（<code>*.cpp</code>）转化为机器可以识别的二进制码，通常为一个可执行文件，运行这个可执行文件，即可实现代码的机器运行。</p><p><strong>编写并运行一个小型C++程序，一般的流程是：写代码→编译→运行→反复调试（除非你能一遍写对）。</strong></p><h3 id="适用读者"><a href="#适用读者" class="headerlink" title="适用读者"></a>适用读者</h3><p>本教程适用于对编程感兴趣，希望通过C++入门或借助算法辅助自己研究问题的读者。</p><p><strong>如果你符合以下描述，那么你很适合阅读本教程：</strong></p><ul><li><p>希望掌握一门新的程序语言；</p></li><li><p>学校课程中需要用到C++语言；</p></li><li><p>想要利用C++帮助自己完成有关问题的研究；</p></li><li><p>愿意通过学习算法来提升自己程序设计乃至解决问题的思维品质；</p></li><li><p>期待从编程中获得快乐与成就感。</p></li></ul><p><strong>如果你符合以下描述，那么不太建议你阅读本教程：</strong></p><ul><li><p>是CS专业的学生（该教程的深♂度可能无法达到要求）；</p></li><li><p>有志于开发游戏或手机APP（出门右转Java&#x2F;Kotlin&#x2F;Swift）；</p></li><li><p>急需借助程序完成数学建模项目（出门右转MATLAB）；</p></li><li><p>打算参加大型计算机编程比赛项目（应当采取更有针对性的训练方式）；</p></li><li><p>学校统一讲授C语言（我真的不会C……）。</p></li></ul><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>该教程配有<strong>相应的测试题和测试工具</strong>，你可以利用它们帮助学习，<del>但是题目都很水。</del></p><p>该教程内容多有残缺，想要更详细的内容，参见<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">https://www.runoob.com/cplusplus/cpp-tutorial.html</a>。</p><p>该教程推荐使用Dev-C++作为IDE，不是因为它有多好，而是因为对初学者而言，这款IDE正合适。</p><p>Dev-C++的安装包下载地址：<a href="/downloads/softwares/Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup.exe">&#x2F;downloads&#x2F;softwares&#x2F;Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup.exe</a>。</p><p><strong>注意：Dev-C++只有Windows版本。</strong></p><h3 id="新手上路"><a href="#新手上路" class="headerlink" title="新手上路"></a>新手上路</h3><p>我相信你还是会安装应用程序的吧……</p><p>装好后启动Dev-C++。</p><p>如果发现是英文界面，<code>Tools</code>→<code>Environment Options</code>→<code>Language</code>→简体中文。</p><p>然后工具→编辑器选项→代码→缺省源→勾选向项目初始源文件插入代码，并把下面这段代码弄进去：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这段代码将作为每次新建文件后的默认初始代码</strong>，然后点确定。</p><p> 接下来，点进工具→环境选项，把以下几个选项勾上：</p><ul><li><p>在<code>return</code>之后暂停控制台程序</p></li><li><p>编译时显示</p></li><li><p>编译完成，自动关闭</p></li></ul><p>以上是设置工作，然后<code>Ctrl+N</code>，<code>Ctrl+S</code>之类的相信你是会的。</p><p><a href="../">回到目录</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">有些IDE提供学生版，可以凭学生证获得优惠。有些学校统一为学生批量订购IDE，学生可免费试用。<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>2019级计算机系培养方案</title>
      <link href="/downloads/curricula/index.html"/>
      <url>/downloads/curricula/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="2019级计算机系培养方案"><a href="#2019级计算机系培养方案" class="headerlink" title="2019级计算机系培养方案"></a>2019级计算机系培养方案</h3><p>以下为2019级培养方案，2020级及以后据说会有不小的变动。</p><p><a href="2019%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF%E7%B3%BB%E6%9C%AC%E7%A7%91%E5%9F%B9%E5%85%BB%E6%96%B9%E6%A1%88.pdf">官方电子版</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>教程资料</title>
      <link href="/downloads/tutorials/index.html"/>
      <url>/downloads/tutorials/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="全部资源"><a href="#全部资源" class="headerlink" title="全部资源"></a>全部资源</h2><ul><li><a href="cpp/">C++快速入门（实验版）</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>主题与配置</title>
      <link href="/downloads/themes/index.html"/>
      <url>/downloads/themes/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="全部资源"><a href="#全部资源" class="headerlink" title="全部资源"></a>全部资源</h2><ul><li><p><a href="Splendid-CLion.icls">Splendid-CLion.icls</a></p><p>一款适用于CLion的主题配色方案。</p></li><li><p><a href="Splendid-Idea.icls">Splendid-Idea.icls</a></p><p>一款适用于Idea的主题配色方案。</p></li><li><p><a href="Splendid-PyCharm.icls">Splendid-PyCharm.icls</a></p><p>一款适用于PyCharm的主题配色方案。</p></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>C++快速入门（实验版）</title>
      <link href="/downloads/tutorials/cpp/index.html"/>
      <url>/downloads/tutorials/cpp/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="煞有其事的教程介绍……"><a href="#煞有其事的教程介绍……" class="headerlink" title="煞有其事的教程介绍……"></a>煞有其事的教程介绍……</h2><p>首先是<a href="cpp_tutorial_experimental.zip">下载链接</a>。</p><p>以及<a href="/downloads/softwares/Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup.exe">Dev-C++安装包</a>。</p><p>先简单说一下为什么会有这份教程吧……</p><p>其实我也不知道为啥，就是高中毕业后那个暑假心血来潮想写一份C++快速教程，然后就写了一点。然而当时flag立得过于离谱了，想要上册下册增值包一起出完，但最后么……</p><hr><p>网络上C++的教程有很多，也有不少质量非常高的，那我写这份教程的意义何在呢？</p><p><strong>我想，我这份教程最大的特点在于，既尽量遵循一个新手学习的自然过程，又能够在最短的时间内让你快速上手，且通过一些习题，让你真正有能力写出一些有点意义的代码。</strong>这三点，都是我目前所看到的其它教程稍有欠缺的地方。</p><p><del>然而，讲道理，我也没有那么多自信，说自己写的这份教程就真的有多么多么好……</del></p><hr><p>距离上次打开这份教程，也有四五个月了吧。要不是前几天开了个网站，我也没想到会把它重新翻出来。</p><p>然而，经过这半个多学期的大学学习，我对C++的认识也在不断提升。<strong>我也渐渐意识到自己许多旧有的观念都是不合适的，甚至是有隐患的。可当我回想起这份教程，却发现自己竟然也传达了这样一些不太合适的内容。</strong></p><p>所以，这份教程也应当有所改进。不过，由于人类的某种本质，我暂时并不想修正之前的教程。因此，我也只能说当前的这一版本是实验版的。况且，还有很大一部分内容我还没写呢……</p><p>此外，既然我把这份教程放到网上了，按理应该也把它同步做成网页版。不过这个嘛……<del>还是人类的某种本质（x）</del></p><hr><p>所以，大致先列一个ToDo吧……</p><ul><li>修正旧教程中一些不合适的内容</li><li>将教程同步做成网页版</li><li>写完这份教程</li><li>……</li></ul><p>（To-Do List：程序员最大的谎言）</p><p>先逃了（</p>]]></content>
      
    </entry>
    
    
  
</search>
